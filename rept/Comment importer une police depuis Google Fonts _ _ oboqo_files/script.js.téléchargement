;(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('jquery'));
  } else {
    root.MotionUI = factory(root.jQuery);
  }
}(this, function($) {
'use strict';

// Polyfill for requestAnimationFrame
(function() {
  if (!Date.now)
    Date.now = function() { return new Date().getTime(); };

  var vendors = ['webkit', 'moz'];
  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp+'RequestAnimationFrame'];
      window.cancelAnimationFrame = (window[vp+'CancelAnimationFrame']
                                 || window[vp+'CancelRequestAnimationFrame']);
  }
  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)
    || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime = 0;
    window.requestAnimationFrame = function(callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function() { callback(lastTime = nextTime); },
                          nextTime - now);
    };
    window.cancelAnimationFrame = clearTimeout;
  }
})();

var initClasses   = ['mui-enter', 'mui-leave'];
var activeClasses = ['mui-enter-active', 'mui-leave-active'];

// Find the right "transitionend" event for this browser
var endEvent = (function() {
  var transitions = {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'otransitionend'
  }
  var elem = window.document.createElement('div');

  for (var t in transitions) {
    if (typeof elem.style[t] !== 'undefined') {
      return transitions[t];
    }
  }

  return null;
})();

function animate(isIn, element, animation, cb) {
  element = $(element).eq(0);

  if (!element.length) return;

  if (endEvent === null) {
    isIn ? element.show() : element.hide();
    cb();
    return;
  }

  var initClass = isIn ? initClasses[0] : initClasses[1];
  var activeClass = isIn ? activeClasses[0] : activeClasses[1];

  // Set up the animation
  reset();
  element.addClass(animation);
  element.css('transition', 'none');
  requestAnimationFrame(function() {
    element.addClass(initClass);
    if (isIn) element.show();
  });

  // Start the animation
  requestAnimationFrame(function() {
    element[0].offsetWidth;
    element.css('transition', '');
    element.addClass(activeClass);
  });

  // Clean up the animation when it finishes
  element.one('transitionend', finish);

  // Hides the element (for out animations), resets the element, and runs a callback
  function finish() {
    if (!isIn) element.hide();
    reset();
    if (cb) cb.apply(element);
  }

  // Resets transitions and removes motion-specific classes
  function reset() {
    element[0].style.transitionDuration = 0;
    element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
  }
}

var MotionUI = {
  animateIn: function(element, animation, cb) {
    animate(true, element, animation, cb);
  },

  animateOut: function(element, animation, cb) {
    animate(false, element, animation, cb);
  }
}

return MotionUI;
}));

;/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return rtl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return GetYoDigits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return transitionend; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);




// Core Foundation Utilities, utilized in a number of places.

/**
 * Returns a boolean for RTL support
 */
function rtl() {
  return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html').attr('dir') === 'rtl';
}

/**
 * returns a random base-36 uid with namespacing
 * @function
 * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
 * @param {String} namespace - name of plugin to be incorporated in uid, optional.
 * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
 * @returns {String} - unique id
 */
function GetYoDigits(length, namespace) {
  length = length || 6;
  return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
}

function transitionend($elem) {
  var transitions = {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'otransitionend'
  };
  var elem = document.createElement('div'),
      end;

  for (var t in transitions) {
    if (typeof elem.style[t] !== 'undefined') {
      end = transitions[t];
    }
  }
  if (end) {
    return end;
  } else {
    end = setTimeout(function () {
      $elem.triggerHandler('transitionend', [$elem]);
    }, 1);
    return 'transitionend';
  }
}



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_core__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(4);



__WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].addToJquery(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

// These are now separated out, but historically were a part of this module,
// and since this is here for backwards compatibility we include them in
// this entry.

__WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].rtl = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["a" /* rtl */];
__WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].GetYoDigits = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["b" /* GetYoDigits */];
__WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].transitionend = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["c" /* transitionend */];

// Every plugin depends on plugin now, we can include that on the core for the
// script inclusion path.


__WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].Plugin = __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["a" /* Plugin */];

window.Foundation = __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */];

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Foundation; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(5);






var FOUNDATION_VERSION = '6.4.3';

// Global Foundation object
// This is attached to the window, or used as a module for AMD/Browserify
var Foundation = {
  version: FOUNDATION_VERSION,

  /**
   * Stores initialized plugins.
   */
  _plugins: {},

  /**
   * Stores generated unique ids for plugin instances
   */
  _uuids: [],

  /**
   * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
   * @param {Object} plugin - The constructor of the plugin.
   */
  plugin: function (plugin, name) {
    // Object key to use when adding to global Foundation object
    // Examples: Foundation.Reveal, Foundation.OffCanvas
    var className = name || functionName(plugin);
    // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
    // Examples: data-reveal, data-off-canvas
    var attrName = hyphenate(className);

    // Add to the Foundation object and the plugins list (for reflowing)
    this._plugins[attrName] = this[className] = plugin;
  },
  /**
   * @function
   * Populates the _uuids array with pointers to each individual plugin instance.
   * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
   * Also fires the initialization event for each plugin, consolidating repetitive code.
   * @param {Object} plugin - an instance of a plugin, usually `this` in context.
   * @param {String} name - the name of the plugin, passed as a camelCased string.
   * @fires Plugin#init
   */
  registerPlugin: function (plugin, name) {
    var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
    plugin.uuid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, pluginName);

    if (!plugin.$element.attr('data-' + pluginName)) {
      plugin.$element.attr('data-' + pluginName, plugin.uuid);
    }
    if (!plugin.$element.data('zfPlugin')) {
      plugin.$element.data('zfPlugin', plugin);
    }
    /**
     * Fires when the plugin has initialized.
     * @event Plugin#init
     */
    plugin.$element.trigger('init.zf.' + pluginName);

    this._uuids.push(plugin.uuid);

    return;
  },
  /**
   * @function
   * Removes the plugins uuid from the _uuids array.
   * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
   * Also fires the destroyed event for the plugin, consolidating repetitive code.
   * @param {Object} plugin - an instance of a plugin, usually `this` in context.
   * @fires Plugin#destroyed
   */
  unregisterPlugin: function (plugin) {
    var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

    this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
    plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
    /**
     * Fires when the plugin has been destroyed.
     * @event Plugin#destroyed
     */
    .trigger('destroyed.zf.' + pluginName);
    for (var prop in plugin) {
      plugin[prop] = null; //clean up script to prep for garbage collection.
    }
    return;
  },

  /**
   * @function
   * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
   * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
   * @default If no argument is passed, reflow all currently active plugins.
   */
  reInit: function (plugins) {
    var isJQ = plugins instanceof __WEBPACK_IMPORTED_MODULE_0_jquery___default.a;
    try {
      if (isJQ) {
        plugins.each(function () {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('zfPlugin')._init();
        });
      } else {
        var type = typeof plugins,
            _this = this,
            fns = {
          'object': function (plgs) {
            plgs.forEach(function (p) {
              p = hyphenate(p);
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + p + ']').foundation('_init');
            });
          },
          'string': function () {
            plugins = hyphenate(plugins);
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugins + ']').foundation('_init');
          },
          'undefined': function () {
            this['object'](Object.keys(_this._plugins));
          }
        };
        fns[type](plugins);
      }
    } catch (err) {
      console.error(err);
    } finally {
      return plugins;
    }
  },

  /**
   * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
   * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
   * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
   */
  reflow: function (elem, plugins) {

    // If plugins is undefined, just grab everything
    if (typeof plugins === 'undefined') {
      plugins = Object.keys(this._plugins);
    }
    // If plugins is a string, convert it to an array with one item
    else if (typeof plugins === 'string') {
        plugins = [plugins];
      }

    var _this = this;

    // Iterate through each plugin
    __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(plugins, function (i, name) {
      // Get the current plugin
      var plugin = _this._plugins[name];

      // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
      var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

      // For each plugin found, initialize it
      $elem.each(function () {
        var $el = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
            opts = {};
        // Don't double-dip on plugins
        if ($el.data('zfPlugin')) {
          console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
          return;
        }

        if ($el.attr('data-options')) {
          var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
            var opt = e.split(':').map(function (el) {
              return el.trim();
            });
            if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
          });
        }
        try {
          $el.data('zfPlugin', new plugin(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), opts));
        } catch (er) {
          console.error(er);
        } finally {
          return;
        }
      });
    });
  },
  getFnName: functionName,

  addToJquery: function ($) {
    // TODO: consider not making this a jQuery function
    // TODO: need way to reflow vs. re-initialize
    /**
     * The Foundation jQuery method.
     * @param {String|Array} method - An action to perform on the current jQuery object.
     */
    var foundation = function (method) {
      var type = typeof method,
          $noJS = $('.no-js');

      if ($noJS.length) {
        $noJS.removeClass('no-js');
      }

      if (type === 'undefined') {
        //needs to initialize the Foundation object, or an individual plugin.
        __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();
        Foundation.reflow(this);
      } else if (type === 'string') {
        //an individual method to invoke on a plugin or group of plugins
        var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
        var plugClass = this.data('zfPlugin'); //determine the class of plugin

        if (plugClass !== undefined && plugClass[method] !== undefined) {
          //make sure both the class and method exist
          if (this.length === 1) {
            //if there's only one, call it directly.
            plugClass[method].apply(plugClass, args);
          } else {
            this.each(function (i, el) {
              //otherwise loop through the jQuery collection and invoke the method on each
              plugClass[method].apply($(el).data('zfPlugin'), args);
            });
          }
        } else {
          //error for no class or no method
          throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
        }
      } else {
        //error for invalid argument type
        throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
      }
      return this;
    };
    $.fn.foundation = foundation;
    return $;
  }
};

Foundation.util = {
  /**
   * Function for applying a debounce effect to a function call.
   * @function
   * @param {Function} func - Function to be called at end of timeout.
   * @param {Number} delay - Time in ms to delay the call of `func`.
   * @returns function
   */
  throttle: function (func, delay) {
    var timer = null;

    return function () {
      var context = this,
          args = arguments;

      if (timer === null) {
        timer = setTimeout(function () {
          func.apply(context, args);
          timer = null;
        }, delay);
      }
    };
  }
};

window.Foundation = Foundation;

// Polyfill for requestAnimationFrame
(function () {
  if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
    return new Date().getTime();
  };

  var vendors = ['webkit', 'moz'];
  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
  }
  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime = 0;
    window.requestAnimationFrame = function (callback) {
      var now = Date.now();
      var nextTime = Math.max(lastTime + 16, now);
      return setTimeout(function () {
        callback(lastTime = nextTime);
      }, nextTime - now);
    };
    window.cancelAnimationFrame = clearTimeout;
  }
  /**
   * Polyfill for performance.now, required by rAF
   */
  if (!window.performance || !window.performance.now) {
    window.performance = {
      start: Date.now(),
      now: function () {
        return Date.now() - this.start;
      }
    };
  }
})();
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== 'function') {
      // closest thing possible to the ECMAScript 5
      // internal IsCallable function
      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function () {},
        fBound = function () {
      return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
    };

    if (this.prototype) {
      // native functions don't have a prototype
      fNOP.prototype = this.prototype;
    }
    fBound.prototype = new fNOP();

    return fBound;
  };
}
// Polyfill to get the name of a function in IE9
function functionName(fn) {
  if (Function.prototype.name === undefined) {
    var funcNameRegex = /function\s([^(]{1,})\(/;
    var results = funcNameRegex.exec(fn.toString());
    return results && results.length > 1 ? results[1].trim() : "";
  } else if (fn.prototype === undefined) {
    return fn.constructor.name;
  } else {
    return fn.prototype.constructor.name;
  }
}
function parseValue(str) {
  if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
  return str;
}
// Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580
function hyphenate(str) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Plugin; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




// Abstract class for providing lifecycle hooks. Expect plugins to define AT LEAST
// {function} _setup (replaces previous constructor),
// {function} _destroy (replaces previous destroy)

var Plugin = function () {
  function Plugin(element, options) {
    _classCallCheck(this, Plugin);

    this._setup(element, options);
    var pluginName = getPluginName(this);
    this.uuid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, pluginName);

    if (!this.$element.attr('data-' + pluginName)) {
      this.$element.attr('data-' + pluginName, this.uuid);
    }
    if (!this.$element.data('zfPlugin')) {
      this.$element.data('zfPlugin', this);
    }
    /**
     * Fires when the plugin has initialized.
     * @event Plugin#init
     */
    this.$element.trigger('init.zf.' + pluginName);
  }

  _createClass(Plugin, [{
    key: 'destroy',
    value: function destroy() {
      this._destroy();
      var pluginName = getPluginName(this);
      this.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger('destroyed.zf.' + pluginName);
      for (var prop in this) {
        this[prop] = null; //clean up script to prep for garbage collection.
      }
    }
  }]);

  return Plugin;
}();

// Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580


function hyphenate(str) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

function getPluginName(obj) {
  if (typeof obj.constructor.name !== 'undefined') {
    return hyphenate(obj.constructor.name);
  } else {
    return hyphenate(obj.className);
  }
}



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MediaQuery; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);




// Default set of media queries
var defaultQueries = {
  'default': 'only screen',
  landscape: 'only screen and (orientation: landscape)',
  portrait: 'only screen and (orientation: portrait)',
  retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
};

// matchMedia() polyfill - Test a CSS media type/query in JS.
// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
var matchMedia = window.matchMedia || function () {
  'use strict';

  // For browsers that support matchMedium api such as IE 9 and webkit

  var styleMedia = window.styleMedia || window.media;

  // For those that don't support matchMedium
  if (!styleMedia) {
    var style = document.createElement('style'),
        script = document.getElementsByTagName('script')[0],
        info = null;

    style.type = 'text/css';
    style.id = 'matchmediajs-test';

    script && script.parentNode && script.parentNode.insertBefore(style, script);

    // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
    info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

    styleMedia = {
      matchMedium: function (media) {
        var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

        // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
        if (style.styleSheet) {
          style.styleSheet.cssText = text;
        } else {
          style.textContent = text;
        }

        // Test if media query is true or false
        return info.width === '1px';
      }
    };
  }

  return function (media) {
    return {
      matches: styleMedia.matchMedium(media || 'all'),
      media: media || 'all'
    };
  };
}();

var MediaQuery = {
  queries: [],

  current: '',

  /**
   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
   * @function
   * @private
   */
  _init: function () {
    var self = this;
    var $meta = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('meta.foundation-mq');
    if (!$meta.length) {
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<meta class="foundation-mq">').appendTo(document.head);
    }

    var extractedStyles = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.foundation-mq').css('font-family');
    var namedQueries;

    namedQueries = parseStyleToObject(extractedStyles);

    for (var key in namedQueries) {
      if (namedQueries.hasOwnProperty(key)) {
        self.queries.push({
          name: key,
          value: 'only screen and (min-width: ' + namedQueries[key] + ')'
        });
      }
    }

    this.current = this._getCurrentSize();

    this._watcher();
  },


  /**
   * Checks if the screen is at least as wide as a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
   */
  atLeast: function (size) {
    var query = this.get(size);

    if (query) {
      return matchMedia(query).matches;
    }

    return false;
  },


  /**
   * Checks if the screen matches to a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
   */
  is: function (size) {
    size = size.trim().split(' ');
    if (size.length > 1 && size[1] === 'only') {
      if (size[0] === this._getCurrentSize()) return true;
    } else {
      return this.atLeast(size[0]);
    }
    return false;
  },


  /**
   * Gets the media query of a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to get.
   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
   */
  get: function (size) {
    for (var i in this.queries) {
      if (this.queries.hasOwnProperty(i)) {
        var query = this.queries[i];
        if (size === query.name) return query.value;
      }
    }

    return null;
  },


  /**
   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
   * @function
   * @private
   * @returns {String} Name of the current breakpoint.
   */
  _getCurrentSize: function () {
    var matched;

    for (var i = 0; i < this.queries.length; i++) {
      var query = this.queries[i];

      if (matchMedia(query.value).matches) {
        matched = query;
      }
    }

    if (typeof matched === 'object') {
      return matched.name;
    } else {
      return matched;
    }
  },


  /**
   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
   * @function
   * @private
   */
  _watcher: function () {
    var _this = this;

    __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {
      var newSize = _this._getCurrentSize(),
          currentSize = _this.current;

      if (newSize !== currentSize) {
        // Change the current media query
        _this.current = newSize;

        // Broadcast the media query change on the window
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
      }
    });
  }
};

// Thank you: https://github.com/sindresorhus/query-string
function parseStyleToObject(str) {
  var styleObject = {};

  if (typeof str !== 'string') {
    return styleObject;
  }

  str = str.trim().slice(1, -1); // browsers re-quote string style values

  if (!str) {
    return styleObject;
  }

  styleObject = str.split('&').reduce(function (ret, param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = parts[0];
    var val = parts[1];
    key = decodeURIComponent(key);

    // missing `=` should be `null`:
    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    val = val === undefined ? null : decodeURIComponent(val);

    if (!ret.hasOwnProperty(key)) {
      ret[key] = val;
    } else if (Array.isArray(ret[key])) {
      ret[key].push(val);
    } else {
      ret[key] = [ret[key], val];
    }
    return ret;
  }, {});

  return styleObject;
}



/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ })
/******/ ]);
;'use strict';/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=100);/******/})(/************************************************************************//******/{/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/100:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(34);/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/34:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_box__=__webpack_require__(64);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Box=__WEBPACK_IMPORTED_MODULE_1__foundation_util_box__["a"/* Box */];/***/},/***/64:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Box;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__);var Box={ImNotTouchingYou:ImNotTouchingYou,OverlapArea:OverlapArea,GetDimensions:GetDimensions,GetOffsets:GetOffsets,GetExplicitOffsets:GetExplicitOffsets/**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */};function ImNotTouchingYou(element,parent,lrOnly,tbOnly,ignoreBottom){return OverlapArea(element,parent,lrOnly,tbOnly,ignoreBottom)===0;};function OverlapArea(element,parent,lrOnly,tbOnly,ignoreBottom){var eleDims=GetDimensions(element),topOver,bottomOver,leftOver,rightOver;if(parent){var parDims=GetDimensions(parent);bottomOver=parDims.height+parDims.offset.top-(eleDims.offset.top+eleDims.height);topOver=eleDims.offset.top-parDims.offset.top;leftOver=eleDims.offset.left-parDims.offset.left;rightOver=parDims.width+parDims.offset.left-(eleDims.offset.left+eleDims.width);}else{bottomOver=eleDims.windowDims.height+eleDims.windowDims.offset.top-(eleDims.offset.top+eleDims.height);topOver=eleDims.offset.top-eleDims.windowDims.offset.top;leftOver=eleDims.offset.left-eleDims.windowDims.offset.left;rightOver=eleDims.windowDims.width-(eleDims.offset.left+eleDims.width);}bottomOver=ignoreBottom?0:Math.min(bottomOver,0);topOver=Math.min(topOver,0);leftOver=Math.min(leftOver,0);rightOver=Math.min(rightOver,0);if(lrOnly){return leftOver+rightOver;}if(tbOnly){return topOver+bottomOver;}// use sum of squares b/c we care about overlap area.
return Math.sqrt(topOver*topOver+bottomOver*bottomOver+leftOver*leftOver+rightOver*rightOver);}/**
 * Uses native methods to return an object of dimension values.
 * @function
 * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
 * @returns {Object} - nested object of integer pixel values
 * TODO - if element is window, return only those values.
 */function GetDimensions(elem){elem=elem.length?elem[0]:elem;if(elem===window||elem===document){throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");}var rect=elem.getBoundingClientRect(),parRect=elem.parentNode.getBoundingClientRect(),winRect=document.body.getBoundingClientRect(),winY=window.pageYOffset,winX=window.pageXOffset;return{width:rect.width,height:rect.height,offset:{top:rect.top+winY,left:rect.left+winX},parentDims:{width:parRect.width,height:parRect.height,offset:{top:parRect.top+winY,left:parRect.left+winX}},windowDims:{width:winRect.width,height:winRect.height,offset:{top:winY,left:winX}}};}/**
 * Returns an object of top and left integer pixel values for dynamically rendered elements,
 * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where
 * you don't know alignment, but generally from
 * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.
 * @function
 * @param {jQuery} element - jQuery object for the element being positioned.
 * @param {jQuery} anchor - jQuery object for the element's anchor point.
 * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
 * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
 * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
 * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
 * TODO alter/rewrite to work with `em` values as well/instead of pixels
 */function GetOffsets(element,anchor,position,vOffset,hOffset,isOverflow){console.log("NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5");switch(position){case'top':return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["rtl"])()?GetExplicitOffsets(element,anchor,'top','left',vOffset,hOffset,isOverflow):GetExplicitOffsets(element,anchor,'top','right',vOffset,hOffset,isOverflow);case'bottom':return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["rtl"])()?GetExplicitOffsets(element,anchor,'bottom','left',vOffset,hOffset,isOverflow):GetExplicitOffsets(element,anchor,'bottom','right',vOffset,hOffset,isOverflow);case'center top':return GetExplicitOffsets(element,anchor,'top','center',vOffset,hOffset,isOverflow);case'center bottom':return GetExplicitOffsets(element,anchor,'bottom','center',vOffset,hOffset,isOverflow);case'center left':return GetExplicitOffsets(element,anchor,'left','center',vOffset,hOffset,isOverflow);case'center right':return GetExplicitOffsets(element,anchor,'right','center',vOffset,hOffset,isOverflow);case'left bottom':return GetExplicitOffsets(element,anchor,'bottom','left',vOffset,hOffset,isOverflow);case'right bottom':return GetExplicitOffsets(element,anchor,'bottom','right',vOffset,hOffset,isOverflow);// Backwards compatibility... this along with the reveal and reveal full
// classes are the only ones that didn't reference anchor
case'center':return{left:$eleDims.windowDims.offset.left+$eleDims.windowDims.width/2-$eleDims.width/2+hOffset,top:$eleDims.windowDims.offset.top+$eleDims.windowDims.height/2-($eleDims.height/2+vOffset)};case'reveal':return{left:($eleDims.windowDims.width-$eleDims.width)/2+hOffset,top:$eleDims.windowDims.offset.top+vOffset};case'reveal full':return{left:$eleDims.windowDims.offset.left,top:$eleDims.windowDims.offset.top};break;default:return{left:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["rtl"])()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width-hOffset:$anchorDims.offset.left+hOffset,top:$anchorDims.offset.top+$anchorDims.height+vOffset};}}function GetExplicitOffsets(element,anchor,position,alignment,vOffset,hOffset,isOverflow){var $eleDims=GetDimensions(element),$anchorDims=anchor?GetDimensions(anchor):null;var topVal,leftVal;// set position related attribute
switch(position){case'top':topVal=$anchorDims.offset.top-($eleDims.height+vOffset);break;case'bottom':topVal=$anchorDims.offset.top+$anchorDims.height+vOffset;break;case'left':leftVal=$anchorDims.offset.left-($eleDims.width+hOffset);break;case'right':leftVal=$anchorDims.offset.left+$anchorDims.width+hOffset;break;}// set alignment related attribute
switch(position){case'top':case'bottom':switch(alignment){case'left':leftVal=$anchorDims.offset.left+hOffset;break;case'right':leftVal=$anchorDims.offset.left-$eleDims.width+$anchorDims.width-hOffset;break;case'center':leftVal=isOverflow?hOffset:$anchorDims.offset.left+$anchorDims.width/2-$eleDims.width/2+hOffset;break;}break;case'right':case'left':switch(alignment){case'bottom':topVal=$anchorDims.offset.top-vOffset+$anchorDims.height-$eleDims.height;break;case'top':topVal=$anchorDims.offset.top+vOffset;break;case'center':topVal=$anchorDims.offset.top+vOffset+$anchorDims.height/2-$eleDims.height/2;break;}break;}return{top:topVal,left:leftVal};}/***/}/******/});
;"use strict";!function(t){function e(i){if(o[i])return o[i].exports;var n=o[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,e),n.l=!0,n.exports;}var o={};e.m=t,e.c=o,e.i=function(t){return t;},e.d=function(t,o,i){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:i});},e.n=function(t){var o=t&&t.__esModule?function(){return t.default;}:function(){return t;};return e.d(o,"a",o),o;},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e);},e.p="",e(e.s=100);}({1:function _(t,e){t.exports={Foundation:window.Foundation};},100:function _(t,e,o){t.exports=o(34);},3:function _(t,e){t.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};},34:function _(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=o(1),n=(o.n(i),o(64));i.Foundation.Box=n.a;},64:function _(t,e,o){"use strict";function i(t,e,o,i,f){return 0===n(t,e,o,i,f);}function n(t,e,o,i,n){var s,r,h,a,c=f(t);if(e){var l=f(e);r=l.height+l.offset.top-(c.offset.top+c.height),s=c.offset.top-l.offset.top,h=c.offset.left-l.offset.left,a=l.width+l.offset.left-(c.offset.left+c.width);}else r=c.windowDims.height+c.windowDims.offset.top-(c.offset.top+c.height),s=c.offset.top-c.windowDims.offset.top,h=c.offset.left-c.windowDims.offset.left,a=c.windowDims.width-(c.offset.left+c.width);return r=n?0:Math.min(r,0),s=Math.min(s,0),h=Math.min(h,0),a=Math.min(a,0),o?h+a:i?s+r:Math.sqrt(s*s+r*r+h*h+a*a);}function f(t){if((t=t.length?t[0]:t)===window||t===document)throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");var e=t.getBoundingClientRect(),o=t.parentNode.getBoundingClientRect(),i=document.body.getBoundingClientRect(),n=window.pageYOffset,f=window.pageXOffset;return{width:e.width,height:e.height,offset:{top:e.top+n,left:e.left+f},parentDims:{width:o.width,height:o.height,offset:{top:o.top+n,left:o.left+f}},windowDims:{width:i.width,height:i.height,offset:{top:n,left:f}}};}function s(t,e,i,n,f,s){switch(console.log("NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5"),i){case"top":return o.i(h.rtl)()?r(t,e,"top","left",n,f,s):r(t,e,"top","right",n,f,s);case"bottom":return o.i(h.rtl)()?r(t,e,"bottom","left",n,f,s):r(t,e,"bottom","right",n,f,s);case"center top":return r(t,e,"top","center",n,f,s);case"center bottom":return r(t,e,"bottom","center",n,f,s);case"center left":return r(t,e,"left","center",n,f,s);case"center right":return r(t,e,"right","center",n,f,s);case"left bottom":return r(t,e,"bottom","left",n,f,s);case"right bottom":return r(t,e,"bottom","right",n,f,s);case"center":return{left:$eleDims.windowDims.offset.left+$eleDims.windowDims.width/2-$eleDims.width/2+f,top:$eleDims.windowDims.offset.top+$eleDims.windowDims.height/2-($eleDims.height/2+n)};case"reveal":return{left:($eleDims.windowDims.width-$eleDims.width)/2+f,top:$eleDims.windowDims.offset.top+n};case"reveal full":return{left:$eleDims.windowDims.offset.left,top:$eleDims.windowDims.offset.top};default:return{left:o.i(h.rtl)()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width-f:$anchorDims.offset.left+f,top:$anchorDims.offset.top+$anchorDims.height+n};}}function r(t,e,o,i,n,s,r){var h,a,c=f(t),l=e?f(e):null;switch(o){case"top":h=l.offset.top-(c.height+n);break;case"bottom":h=l.offset.top+l.height+n;break;case"left":a=l.offset.left-(c.width+s);break;case"right":a=l.offset.left+l.width+s;}switch(o){case"top":case"bottom":switch(i){case"left":a=l.offset.left+s;break;case"right":a=l.offset.left-c.width+l.width-s;break;case"center":a=r?s:l.offset.left+l.width/2-c.width/2+s;}break;case"right":case"left":switch(i){case"bottom":h=l.offset.top-n+l.height-c.height;break;case"top":h=l.offset.top+n;break;case"center":h=l.offset.top+n+l.height/2-c.height/2;}}return{top:h,left:a};}o.d(e,"a",function(){return a;});var h=o(3),a=(o.n(h),{ImNotTouchingYou:i,OverlapArea:n,GetDimensions:f,GetOffsets:s,GetExplicitOffsets:r});}});
;'use strict';/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=101);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/101:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(35);/***/},/***/35:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_imageLoader__=__webpack_require__(65);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].onImagesLoaded=__WEBPACK_IMPORTED_MODULE_1__foundation_util_imageLoader__["a"/* onImagesLoaded */];/***/},/***/65:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return onImagesLoaded;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/**
 * Runs a callback function when images are fully loaded.
 * @param {Object} images - Image(s) to check if loaded.
 * @param {Func} callback - Function to execute when image is fully loaded.
 */function onImagesLoaded(images,callback){var self=this,unloaded=images.length;if(unloaded===0){callback();}images.each(function(){// Check if image is loaded
if(this.complete&&this.naturalWidth!==undefined){singleImageLoaded();}else{// If the above check failed, simulate loading on detached element.
var image=new Image();// Still count image as loaded if it finalizes with an error.
var events="load.zf.images error.zf.images";__WEBPACK_IMPORTED_MODULE_0_jquery___default()(image).one(events,function me(event){// Unbind the event listeners. We're using 'one' but only one of the two events will have fired.
__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).off(events,me);singleImageLoaded();});image.src=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('src');}});function singleImageLoaded(){unloaded--;if(unloaded===0){callback();}}}/***/}/******/});
;"use strict";!function(n){function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports;}var e={};t.m=n,t.c=e,t.i=function(n){return n;},t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:o});},t.n=function(n){var e=n&&n.__esModule?function(){return n.default;}:function(){return n;};return t.d(e,"a",e),e;},t.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t);},t.p="",t(t.s=101);}({0:function _(n,t){n.exports=jQuery;},1:function _(n,t){n.exports={Foundation:window.Foundation};},101:function _(n,t,e){n.exports=e(35);},35:function _(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=e(1),r=(e.n(o),e(65));o.Foundation.onImagesLoaded=r.a;},65:function _(n,t,e){"use strict";function o(n,t){function e(){0===--o&&t();}var o=n.length;0===o&&t(),n.each(function(){if(this.complete&&void 0!==this.naturalWidth)e();else{var n=new Image(),t="load.zf.images error.zf.images";i()(n).one(t,function n(o){i()(this).off(t,n),e();}),n.src=i()(this).attr("src");}});}e.d(t,"a",function(){return o;});var r=e(0),i=e.n(r);}});
;'use strict';/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=102);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/102:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(36);/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/36:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(66);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Keyboard=__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a"/* Keyboard */];/***/},/***/66:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Keyboard;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/var keyCodes={9:'TAB',13:'ENTER',27:'ESCAPE',32:'SPACE',35:'END',36:'HOME',37:'ARROW_LEFT',38:'ARROW_UP',39:'ARROW_RIGHT',40:'ARROW_DOWN'};var commands={};// Functions pulled out to be referenceable from internals
function findFocusable($element){if(!$element){return false;}return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function(){if(!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':visible')||__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('tabindex')<0){return false;}//only have visible elements and those that have a tabindex greater or equal 0
return true;});}function parseKey(event){var key=keyCodes[event.which||event.keyCode]||String.fromCharCode(event.which).toUpperCase();// Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
key=key.replace(/\W+/,'');if(event.shiftKey)key='SHIFT_'+key;if(event.ctrlKey)key='CTRL_'+key;if(event.altKey)key='ALT_'+key;// Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
key=key.replace(/_$/,'');return key;}var Keyboard={keys:getKeyCodes(keyCodes),/**
   * Parses the (keyboard) event and returns a String that represents its key
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   * @param {Event} event - the event generated by the event handler
   * @return String key - String that represents the key pressed
   */parseKey:parseKey,/**
   * Handles the given (keyboard) event
   * @param {Event} event - the event generated by the event handler
   * @param {String} component - Foundation component's name, e.g. Slider or Reveal
   * @param {Objects} functions - collection of functions that are to be executed
   */handleKey:function handleKey(event,component,functions){var commandList=commands[component],keyCode=this.parseKey(event),cmds,command,fn;if(!commandList)return console.warn('Component not defined!');if(typeof commandList.ltr==='undefined'){// this component does not differentiate between ltr and rtl
cmds=commandList;// use plain list
}else{// merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["rtl"])())cmds=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},commandList.ltr,commandList.rtl);else cmds=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},commandList.rtl,commandList.ltr);}command=cmds[keyCode];fn=functions[command];if(fn&&typeof fn==='function'){// execute function  if exists
var returnValue=fn.apply();if(functions.handled||typeof functions.handled==='function'){// execute function when event was handled
functions.handled(returnValue);}}else{if(functions.unhandled||typeof functions.unhandled==='function'){// execute function when event was not handled
functions.unhandled();}}},/**
   * Finds all focusable elements within the given `$element`
   * @param {jQuery} $element - jQuery object to search within
   * @return {jQuery} $focusable - all focusable elements within `$element`
   */findFocusable:findFocusable,/**
   * Returns the component name name
   * @param {Object} component - Foundation component, e.g. Slider or Reveal
   * @return String componentName
   */register:function register(componentName,cmds){commands[componentName]=cmds;},// TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?
//
/**
   * Traps the focus in the given element.
   * @param  {jQuery} $element  jQuery object to trap the foucs into.
   */trapFocus:function trapFocus($element){var $focusable=findFocusable($element),$firstFocusable=$focusable.eq(0),$lastFocusable=$focusable.eq(-1);$element.on('keydown.zf.trapfocus',function(event){if(event.target===$lastFocusable[0]&&parseKey(event)==='TAB'){event.preventDefault();$firstFocusable.focus();}else if(event.target===$firstFocusable[0]&&parseKey(event)==='SHIFT_TAB'){event.preventDefault();$lastFocusable.focus();}});},/**
   * Releases the trapped focus from the given element.
   * @param  {jQuery} $element  jQuery object to release the focus for.
   */releaseFocus:function releaseFocus($element){$element.off('keydown.zf.trapfocus');}};/*
 * Constants for easier comparing.
 * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
 */function getKeyCodes(kcs){var k={};for(var kc in kcs){k[kcs[kc]]=kcs[kc];}return k;}/***/}/******/});
;"use strict";!function(n){function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports;}var e={};t.m=n,t.c=e,t.i=function(n){return n;},t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:o});},t.n=function(n){var e=n&&n.__esModule?function(){return n.default;}:function(){return n;};return t.d(e,"a",e),e;},t.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t);},t.p="",t(t.s=102);}({0:function _(n,t){n.exports=jQuery;},1:function _(n,t){n.exports={Foundation:window.Foundation};},102:function _(n,t,e){n.exports=e(36);},3:function _(n,t){n.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};},36:function _(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=e(1),r=(e.n(o),e(66));o.Foundation.Keyboard=r.a;},66:function _(n,t,e){"use strict";function o(n){return!!n&&n.find("a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]").filter(function(){return!(!a()(this).is(":visible")||a()(this).attr("tabindex")<0);});}function r(n){var t=d[n.which||n.keyCode]||String.fromCharCode(n.which).toUpperCase();return t=t.replace(/\W+/,""),n.shiftKey&&(t="SHIFT_"+t),n.ctrlKey&&(t="CTRL_"+t),n.altKey&&(t="ALT_"+t),t=t.replace(/_$/,"");}e.d(t,"a",function(){return c;});var i=e(0),a=e.n(i),u=e(3),d=(e.n(u),{9:"TAB",13:"ENTER",27:"ESCAPE",32:"SPACE",35:"END",36:"HOME",37:"ARROW_LEFT",38:"ARROW_UP",39:"ARROW_RIGHT",40:"ARROW_DOWN"}),f={},c={keys:function(n){var t={};for(var e in n){t[n[e]]=n[e];}return t;}(d),parseKey:r,handleKey:function handleKey(n,t,o){var r,i,d,c=f[t],s=this.parseKey(n);if(!c)return console.warn("Component not defined!");if(r=void 0===c.ltr?c:e.i(u.rtl)()?a.a.extend({},c.ltr,c.rtl):a.a.extend({},c.rtl,c.ltr),i=r[s],(d=o[i])&&"function"==typeof d){var l=d.apply();(o.handled||"function"==typeof o.handled)&&o.handled(l);}else(o.unhandled||"function"==typeof o.unhandled)&&o.unhandled();},findFocusable:o,register:function register(n,t){f[n]=t;},trapFocus:function trapFocus(n){var t=o(n),e=t.eq(0),i=t.eq(-1);n.on("keydown.zf.trapfocus",function(n){n.target===i[0]&&"TAB"===r(n)?(n.preventDefault(),e.focus()):n.target===e[0]&&"SHIFT_TAB"===r(n)&&(n.preventDefault(),i.focus());});},releaseFocus:function releaseFocus(n){n.off("keydown.zf.trapfocus");}};}});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=103);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/103:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(37);/***/},/***/37:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__=__webpack_require__(67);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].MediaQuery=__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a"/* MediaQuery */];__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].MediaQuery._init();/***/},/***/67:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return MediaQuery;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);// Default set of media queries
var defaultQueries={'default':'only screen',landscape:'only screen and (orientation: landscape)',portrait:'only screen and (orientation: portrait)',retina:'only screen and (-webkit-min-device-pixel-ratio: 2),'+'only screen and (min--moz-device-pixel-ratio: 2),'+'only screen and (-o-min-device-pixel-ratio: 2/1),'+'only screen and (min-device-pixel-ratio: 2),'+'only screen and (min-resolution: 192dpi),'+'only screen and (min-resolution: 2dppx)'};// matchMedia() polyfill - Test a CSS media type/query in JS.
// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
var matchMedia=window.matchMedia||function(){'use strict';// For browsers that support matchMedium api such as IE 9 and webkit
var styleMedia=window.styleMedia||window.media;// For those that don't support matchMedium
if(!styleMedia){var style=document.createElement('style'),script=document.getElementsByTagName('script')[0],info=null;style.type='text/css';style.id='matchmediajs-test';script&&script.parentNode&&script.parentNode.insertBefore(style,script);// 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
info='getComputedStyle'in window&&window.getComputedStyle(style,null)||style.currentStyle;styleMedia={matchMedium:function matchMedium(media){var text='@media '+media+'{ #matchmediajs-test { width: 1px; } }';// 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
if(style.styleSheet){style.styleSheet.cssText=text;}else{style.textContent=text;}// Test if media query is true or false
return info.width==='1px';}};}return function(media){return{matches:styleMedia.matchMedium(media||'all'),media:media||'all'};};}();var MediaQuery={queries:[],current:'',/**
   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
   * @function
   * @private
   */_init:function _init(){var self=this;var $meta=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('meta.foundation-mq');if(!$meta.length){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('<meta class="foundation-mq">').appendTo(document.head);}var extractedStyles=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.foundation-mq').css('font-family');var namedQueries;namedQueries=parseStyleToObject(extractedStyles);for(var key in namedQueries){if(namedQueries.hasOwnProperty(key)){self.queries.push({name:key,value:'only screen and (min-width: '+namedQueries[key]+')'});}}this.current=this._getCurrentSize();this._watcher();},/**
   * Checks if the screen is at least as wide as a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
   */atLeast:function atLeast(size){var query=this.get(size);if(query){return matchMedia(query).matches;}return false;},/**
   * Checks if the screen matches to a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
   */is:function is(size){size=size.trim().split(' ');if(size.length>1&&size[1]==='only'){if(size[0]===this._getCurrentSize())return true;}else{return this.atLeast(size[0]);}return false;},/**
   * Gets the media query of a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to get.
   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
   */get:function get(size){for(var i in this.queries){if(this.queries.hasOwnProperty(i)){var query=this.queries[i];if(size===query.name)return query.value;}}return null;},/**
   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
   * @function
   * @private
   * @returns {String} Name of the current breakpoint.
   */_getCurrentSize:function _getCurrentSize(){var matched;for(var i=0;i<this.queries.length;i++){var query=this.queries[i];if(matchMedia(query.value).matches){matched=query;}}if((typeof matched==='undefined'?'undefined':_typeof(matched))==='object'){return matched.name;}else{return matched;}},/**
   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
   * @function
   * @private
   */_watcher:function _watcher(){var _this=this;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery',function(){var newSize=_this._getCurrentSize(),currentSize=_this.current;if(newSize!==currentSize){// Change the current media query
_this.current=newSize;// Broadcast the media query change on the window
__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).trigger('changed.zf.mediaquery',[newSize,currentSize]);}});}};// Thank you: https://github.com/sindresorhus/query-string
function parseStyleToObject(str){var styleObject={};if(typeof str!=='string'){return styleObject;}str=str.trim().slice(1,-1);// browsers re-quote string style values
if(!str){return styleObject;}styleObject=str.split('&').reduce(function(ret,param){var parts=param.replace(/\+/g,' ').split('=');var key=parts[0];var val=parts[1];key=decodeURIComponent(key);// missing `=` should be `null`:
// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
val=val===undefined?null:decodeURIComponent(val);if(!ret.hasOwnProperty(key)){ret[key]=val;}else if(Array.isArray(ret[key])){ret[key].push(val);}else{ret[key]=[ret[key],val];}return ret;},{});return styleObject;}/***/}/******/});
;"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports;}var n={};t.m=e,t.c=n,t.i=function(e){return e;},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r});},t.n=function(e){var n=e&&e.__esModule?function(){return e.default;}:function(){return e;};return t.d(n,"a",n),n;},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t);},t.p="",t(t.s=103);}({0:function _(e,t){e.exports=jQuery;},1:function _(e,t){e.exports={Foundation:window.Foundation};},103:function _(e,t,n){e.exports=n(37);},37:function _(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=(n.n(r),n(67));r.Foundation.MediaQuery=i.a,r.Foundation.MediaQuery._init();},67:function _(e,t,n){"use strict";function r(e){var t={};return"string"!=typeof e?t:(e=e.trim().slice(1,-1))?t=e.split("&").reduce(function(e,t){var n=t.replace(/\+/g," ").split("="),r=n[0],i=n[1];return r=decodeURIComponent(r),i=void 0===i?null:decodeURIComponent(i),e.hasOwnProperty(r)?Array.isArray(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i,e;},{}):t;}n.d(t,"a",function(){return a;});var i=n(0),u=n.n(i),o=window.matchMedia||function(){var e=window.styleMedia||window.media;if(!e){var t=document.createElement("style"),n=document.getElementsByTagName("script")[0],r=null;t.type="text/css",t.id="matchmediajs-test",n&&n.parentNode&&n.parentNode.insertBefore(t,n),r="getComputedStyle"in window&&window.getComputedStyle(t,null)||t.currentStyle,e={matchMedium:function matchMedium(e){var n="@media "+e+"{ #matchmediajs-test { width: 1px; } }";return t.styleSheet?t.styleSheet.cssText=n:t.textContent=n,"1px"===r.width;}};}return function(t){return{matches:e.matchMedium(t||"all"),media:t||"all"};};}(),a={queries:[],current:"",_init:function _init(){var e=this;u()("meta.foundation-mq").length||u()('<meta class="foundation-mq">').appendTo(document.head);var t,n=u()(".foundation-mq").css("font-family");t=r(n);for(var i in t){t.hasOwnProperty(i)&&e.queries.push({name:i,value:"only screen and (min-width: "+t[i]+")"});}this.current=this._getCurrentSize(),this._watcher();},atLeast:function atLeast(e){var t=this.get(e);return!!t&&o(t).matches;},is:function is(e){return e=e.trim().split(" "),e.length>1&&"only"===e[1]?e[0]===this._getCurrentSize():this.atLeast(e[0]);},get:function get(e){for(var t in this.queries){if(this.queries.hasOwnProperty(t)){var n=this.queries[t];if(e===n.name)return n.value;}}return null;},_getCurrentSize:function _getCurrentSize(){for(var e,t=0;t<this.queries.length;t++){var n=this.queries[t];o(n.value).matches&&(e=n);}return"object"==(typeof e==="undefined"?"undefined":_typeof(e))?e.name:e;},_watcher:function _watcher(){var e=this;u()(window).off("resize.zf.mediaquery").on("resize.zf.mediaquery",function(){var t=e._getCurrentSize(),n=e.current;t!==n&&(e.current=t,u()(window).trigger("changed.zf.mediaquery",[t,n]));});}};}});
;'use strict';/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=104);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/104:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(38);/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/38:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(68);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Motion=__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["a"/* Motion */];__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Move=__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["b"/* Move */];/***/},/***/68:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"b",function(){return Move;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Motion;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);/**
 * Motion module.
 * @module foundation.motion
 */var initClasses=['mui-enter','mui-leave'];var activeClasses=['mui-enter-active','mui-leave-active'];var Motion={animateIn:function animateIn(element,animation,cb){animate(true,element,animation,cb);},animateOut:function animateOut(element,animation,cb){animate(false,element,animation,cb);}};function Move(duration,elem,fn){var anim,prog,start=null;// console.log('called');
if(duration===0){fn.apply(elem);elem.trigger('finished.zf.animate',[elem]).triggerHandler('finished.zf.animate',[elem]);return;}function move(ts){if(!start)start=ts;// console.log(start, ts);
prog=ts-start;fn.apply(elem);if(prog<duration){anim=window.requestAnimationFrame(move,elem);}else{window.cancelAnimationFrame(anim);elem.trigger('finished.zf.animate',[elem]).triggerHandler('finished.zf.animate',[elem]);}}anim=window.requestAnimationFrame(move);}/**
 * Animates an element in or out using a CSS transition class.
 * @function
 * @private
 * @param {Boolean} isIn - Defines if the animation is in or out.
 * @param {Object} element - jQuery or HTML object to animate.
 * @param {String} animation - CSS class to use.
 * @param {Function} cb - Callback to run when animation is finished.
 */function animate(isIn,element,animation,cb){element=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(element).eq(0);if(!element.length)return;var initClass=isIn?initClasses[0]:initClasses[1];var activeClass=isIn?activeClasses[0]:activeClasses[1];// Set up the animation
reset();element.addClass(animation).css('transition','none');requestAnimationFrame(function(){element.addClass(initClass);if(isIn)element.show();});// Start the animation
requestAnimationFrame(function(){element[0].offsetWidth;element.css('transition','').addClass(activeClass);});// Clean up the animation when it finishes
element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["transitionend"])(element),finish);// Hides the element (for out animations), resets the element, and runs a callback
function finish(){if(!isIn)element.hide();reset();if(cb)cb.apply(element);}// Resets transitions and removes motion-specific classes
function reset(){element[0].style.transitionDuration=0;element.removeClass(initClass+' '+activeClass+' '+animation);}}/***/}/******/});
;"use strict";!function(n){function t(e){if(i[e])return i[e].exports;var o=i[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports;}var i={};t.m=n,t.c=i,t.i=function(n){return n;},t.d=function(n,i,e){t.o(n,i)||Object.defineProperty(n,i,{configurable:!1,enumerable:!0,get:e});},t.n=function(n){var i=n&&n.__esModule?function(){return n.default;}:function(){return n;};return t.d(i,"a",i),i;},t.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t);},t.p="",t(t.s=104);}({0:function _(n,t){n.exports=jQuery;},1:function _(n,t){n.exports={Foundation:window.Foundation};},104:function _(n,t,i){n.exports=i(38);},3:function _(n,t){n.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};},38:function _(n,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var e=i(1),o=(i.n(e),i(68));e.Foundation.Motion=o.a,e.Foundation.Move=o.b;},68:function _(n,t,i){"use strict";function e(n,t,i){function e(u){a||(a=u),r=u-a,i.apply(t),r<n?o=window.requestAnimationFrame(e,t):(window.cancelAnimationFrame(o),t.trigger("finished.zf.animate",[t]).triggerHandler("finished.zf.animate",[t]));}var o,r,a=null;if(0===n)return i.apply(t),void t.trigger("finished.zf.animate",[t]).triggerHandler("finished.zf.animate",[t]);o=window.requestAnimationFrame(e);}function o(n,t,e,o){function r(){n||t.hide(),d(),o&&o.apply(t);}function d(){t[0].style.transitionDuration=0,t.removeClass(c+" "+l+" "+e);}if(t=a()(t).eq(0),t.length){var c=n?s[0]:s[1],l=n?f[0]:f[1];d(),t.addClass(e).css("transition","none"),requestAnimationFrame(function(){t.addClass(c),n&&t.show();}),requestAnimationFrame(function(){t[0].offsetWidth,t.css("transition","").addClass(l);}),t.one(i.i(u.transitionend)(t),r);}}i.d(t,"b",function(){return e;}),i.d(t,"a",function(){return d;});var r=i(0),a=i.n(r),u=i(3),s=(i.n(u),["mui-enter","mui-leave"]),f=["mui-enter-active","mui-leave-active"],d={animateIn:function animateIn(n,t,i){o(!0,n,t,i);},animateOut:function animateOut(n,t,i){o(!1,n,t,i);}};}});
;'use strict';/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=105);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/105:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(39);/***/},/***/39:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_nest__=__webpack_require__(69);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Nest=__WEBPACK_IMPORTED_MODULE_1__foundation_util_nest__["a"/* Nest */];/***/},/***/69:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Nest;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);var Nest={Feather:function Feather(menu){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'zf';menu.attr('role','menubar');var items=menu.find('li').attr({'role':'menuitem'}),subMenuClass='is-'+type+'-submenu',subItemClass=subMenuClass+'-item',hasSubClass='is-'+type+'-submenu-parent',applyAria=type!=='accordion';// Accordions handle their own ARIA attriutes.
items.each(function(){var $item=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),$sub=$item.children('ul');if($sub.length){$item.addClass(hasSubClass);$sub.addClass('submenu '+subMenuClass).attr({'data-submenu':''});if(applyAria){$item.attr({'aria-haspopup':true,'aria-label':$item.children('a:first').text()});// Note:  Drilldowns behave differently in how they hide, and so need
// additional attributes.  We should look if this possibly over-generalized
// utility (Nest) is appropriate when we rework menus in 6.4
if(type==='drilldown'){$item.attr({'aria-expanded':false});}}$sub.addClass('submenu '+subMenuClass).attr({'data-submenu':'','role':'menu'});if(type==='drilldown'){$sub.attr({'aria-hidden':true});}}if($item.parent('[data-submenu]').length){$item.addClass('is-submenu-item '+subItemClass);}});return;},Burn:function Burn(menu,type){var//items = menu.find('li'),
subMenuClass='is-'+type+'-submenu',subItemClass=subMenuClass+'-item',hasSubClass='is-'+type+'-submenu-parent';menu.find('>li, .menu, .menu > li').removeClass(subMenuClass+' '+subItemClass+' '+hasSubClass+' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display','');}};/***/}/******/});
;"use strict";!function(n){function e(r){if(t[r])return t[r].exports;var u=t[r]={i:r,l:!1,exports:{}};return n[r].call(u.exports,u,u.exports,e),u.l=!0,u.exports;}var t={};e.m=n,e.c=t,e.i=function(n){return n;},e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:r});},e.n=function(n){var t=n&&n.__esModule?function(){return n.default;}:function(){return n;};return e.d(t,"a",t),t;},e.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e);},e.p="",e(e.s=105);}({0:function _(n,e){n.exports=jQuery;},1:function _(n,e){n.exports={Foundation:window.Foundation};},105:function _(n,e,t){n.exports=t(39);},39:function _(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=t(1),u=(t.n(r),t(69));r.Foundation.Nest=u.a;},69:function _(n,e,t){"use strict";t.d(e,"a",function(){return a;});var r=t(0),u=t.n(r),a={Feather:function Feather(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"zf";n.attr("role","menubar");var t=n.find("li").attr({role:"menuitem"}),r="is-"+e+"-submenu",a=r+"-item",i="is-"+e+"-submenu-parent",o="accordion"!==e;t.each(function(){var n=u()(this),t=n.children("ul");t.length&&(n.addClass(i),t.addClass("submenu "+r).attr({"data-submenu":""}),o&&(n.attr({"aria-haspopup":!0,"aria-label":n.children("a:first").text()}),"drilldown"===e&&n.attr({"aria-expanded":!1})),t.addClass("submenu "+r).attr({"data-submenu":"",role:"menu"}),"drilldown"===e&&t.attr({"aria-hidden":!0})),n.parent("[data-submenu]").length&&n.addClass("is-submenu-item "+a);});},Burn:function Burn(n,e){var t="is-"+e+"-submenu",r=t+"-item",u="is-"+e+"-submenu-parent";n.find(">li, .menu, .menu > li").removeClass(t+" "+r+" "+u+" is-submenu-item submenu is-active").removeAttr("data-submenu").css("display","");}};}});
;'use strict';/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=106);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/106:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(40);/***/},/***/40:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_timer__=__webpack_require__(70);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Timer=__WEBPACK_IMPORTED_MODULE_1__foundation_util_timer__["a"/* Timer */];/***/},/***/70:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Timer;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);function Timer(elem,options,cb){var _this=this,duration=options.duration,//options is an object for easily adding features later.
nameSpace=Object.keys(elem.data())[0]||'timer',remain=-1,start,timer;this.isPaused=false;this.restart=function(){remain=-1;clearTimeout(timer);this.start();};this.start=function(){this.isPaused=false;// if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
clearTimeout(timer);remain=remain<=0?duration:remain;elem.data('paused',false);start=Date.now();timer=setTimeout(function(){if(options.infinite){_this.restart();//rerun the timer.
}if(cb&&typeof cb==='function'){cb();}},remain);elem.trigger('timerstart.zf.'+nameSpace);};this.pause=function(){this.isPaused=true;//if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
clearTimeout(timer);elem.data('paused',true);var end=Date.now();remain=remain-(end-start);elem.trigger('timerpaused.zf.'+nameSpace);};}/***/}/******/});
;"use strict";!function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports;}var n={};e.m=t,e.c=n,e.i=function(t){return t;},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r});},e.n=function(t){var n=t&&t.__esModule?function(){return t.default;}:function(){return t;};return e.d(n,"a",n),n;},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e);},e.p="",e(e.s=106);}({0:function _(t,e){t.exports=jQuery;},1:function _(t,e){t.exports={Foundation:window.Foundation};},106:function _(t,e,n){t.exports=n(40);},40:function _(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),i=(n.n(r),n(70));r.Foundation.Timer=i.a;},70:function _(t,e,n){"use strict";function r(t,e,n){var r,i,o=this,u=e.duration,a=Object.keys(t.data())[0]||"timer",s=-1;this.isPaused=!1,this.restart=function(){s=-1,clearTimeout(i),this.start();},this.start=function(){this.isPaused=!1,clearTimeout(i),s=s<=0?u:s,t.data("paused",!1),r=Date.now(),i=setTimeout(function(){e.infinite&&o.restart(),n&&"function"==typeof n&&n();},s),t.trigger("timerstart.zf."+a);},this.pause=function(){this.isPaused=!0,clearTimeout(i),t.data("paused",!0);var e=Date.now();s-=e-r,t.trigger("timerpaused.zf."+a);};}n.d(e,"a",function(){return r;});var i=n(0);n.n(i);}});
;'use strict';!function($){function Timer(elem,options,cb){var _this=this,duration=options.duration,//options is an object for easily adding features later.
nameSpace=Object.keys(elem.data())[0]||'timer',remain=-1,start,timer;this.isPaused=false;this.restart=function(){remain=-1;clearTimeout(timer);this.start();};this.start=function(){this.isPaused=false;// if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
clearTimeout(timer);remain=remain<=0?duration:remain;elem.data('paused',false);start=Date.now();timer=setTimeout(function(){if(options.infinite){_this.restart();//rerun the timer.
}if(cb&&typeof cb==='function'){cb();}},remain);elem.trigger('timerstart.zf.'+nameSpace);};this.pause=function(){this.isPaused=true;//if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
clearTimeout(timer);elem.data('paused',true);var end=Date.now();remain=remain-(end-start);elem.trigger('timerpaused.zf.'+nameSpace);};}/**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */function onImagesLoaded(images,callback){var self=this,unloaded=images.length;if(unloaded===0){callback();}images.each(function(){// Check if image is loaded
if(this.complete||this.readyState===4||this.readyState==='complete'){singleImageLoaded();}// Force load the image
else{// fix for IE. See https://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/
var src=$(this).attr('src');$(this).attr('src',src+(src.indexOf('?')>=0?'&':'?')+new Date().getTime());$(this).one('load',function(){singleImageLoaded();});}});function singleImageLoaded(){unloaded--;if(unloaded===0){callback();}}}Foundation.Timer=Timer;Foundation.onImagesLoaded=onImagesLoaded;}(jQuery);
;"use strict";!function(t){function e(t,e,i){var a,s,n=this,r=e.duration,o=Object.keys(t.data())[0]||"timer",u=-1;this.isPaused=!1,this.restart=function(){u=-1,clearTimeout(s),this.start();},this.start=function(){this.isPaused=!1,clearTimeout(s),u=u<=0?r:u,t.data("paused",!1),a=Date.now(),s=setTimeout(function(){e.infinite&&n.restart(),i&&"function"==typeof i&&i();},u),t.trigger("timerstart.zf."+o);},this.pause=function(){this.isPaused=!0,clearTimeout(s),t.data("paused",!0);var e=Date.now();u-=e-a,t.trigger("timerpaused.zf."+o);};}function i(e,i){function a(){s--,0===s&&i();}var s=e.length;0===s&&i(),e.each(function(){if(this.complete||4===this.readyState||"complete"===this.readyState)a();else{var e=t(this).attr("src");t(this).attr("src",e+(e.indexOf("?")>=0?"&":"?")+new Date().getTime()),t(this).one("load",function(){a();});}});}Foundation.Timer=e,Foundation.onImagesLoaded=i;}(jQuery);
;'use strict';/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=107);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/107:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(41);/***/},/***/41:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_touch__=__webpack_require__(71);__WEBPACK_IMPORTED_MODULE_1__foundation_util_touch__["a"/* Touch */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);window.Foundation.Touch=__WEBPACK_IMPORTED_MODULE_1__foundation_util_touch__["a"/* Touch */];/***/},/***/71:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Touch;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
var Touch={};var startPosX,startPosY,startTime,elapsedTime,isMoving=false;function onTouchEnd(){//  alert(this);
this.removeEventListener('touchmove',onTouchMove);this.removeEventListener('touchend',onTouchEnd);isMoving=false;}function onTouchMove(e){if(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.preventDefault){e.preventDefault();}if(isMoving){var x=e.touches[0].pageX;var y=e.touches[0].pageY;var dx=startPosX-x;var dy=startPosY-y;var dir;elapsedTime=new Date().getTime()-startTime;if(Math.abs(dx)>=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.moveThreshold&&elapsedTime<=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.timeThreshold){dir=dx>0?'left':'right';}// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
//   dir = dy > 0 ? 'down' : 'up';
// }
if(dir){e.preventDefault();onTouchEnd.call(this);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('swipe',dir).trigger('swipe'+dir);}}}function onTouchStart(e){if(e.touches.length==1){startPosX=e.touches[0].pageX;startPosY=e.touches[0].pageY;isMoving=true;startTime=new Date().getTime();this.addEventListener('touchmove',onTouchMove,false);this.addEventListener('touchend',onTouchEnd,false);}}function init(){this.addEventListener&&this.addEventListener('touchstart',onTouchStart,false);}function teardown(){this.removeEventListener('touchstart',onTouchStart);}var SpotSwipe=function(){function SpotSwipe($){_classCallCheck(this,SpotSwipe);this.version='1.0.0';this.enabled='ontouchstart'in document.documentElement;this.preventDefault=false;this.moveThreshold=75;this.timeThreshold=200;this.$=$;this._init();}_createClass(SpotSwipe,[{key:'_init',value:function _init(){var $=this.$;$.event.special.swipe={setup:init};$.each(['left','up','down','right'],function(){$.event.special['swipe'+this]={setup:function setup(){$(this).on('swipe',$.noop);}};});}}]);return SpotSwipe;}();/****************************************************
 * As far as I can tell, both setupSpotSwipe and    *
 * setupTouchHandler should be idempotent,          *
 * because they directly replace functions &        *
 * values, and do not add event handlers directly.  *
 ****************************************************/Touch.setupSpotSwipe=function($){$.spotSwipe=new SpotSwipe($);};/****************************************************
 * Method for adding pseudo drag events to elements *
 ***************************************************/Touch.setupTouchHandler=function($){$.fn.addTouch=function(){this.each(function(i,el){$(el).bind('touchstart touchmove touchend touchcancel',function(){//we pass the original event object because the jQuery event
//object is normalized to w3c specs and does not provide the TouchList
handleTouch(event);});});var handleTouch=function handleTouch(event){var touches=event.changedTouches,first=touches[0],eventTypes={touchstart:'mousedown',touchmove:'mousemove',touchend:'mouseup'},type=eventTypes[event.type],simulatedEvent;if('MouseEvent'in window&&typeof window.MouseEvent==='function'){simulatedEvent=new window.MouseEvent(type,{'bubbles':true,'cancelable':true,'screenX':first.screenX,'screenY':first.screenY,'clientX':first.clientX,'clientY':first.clientY});}else{simulatedEvent=document.createEvent('MouseEvent');simulatedEvent.initMouseEvent(type,true,true,window,1,first.screenX,first.screenY,first.clientX,first.clientY,false,false,false,false,0/*left*/,null);}first.target.dispatchEvent(simulatedEvent);};};};Touch.init=function($){if(typeof $.spotSwipe==='undefined'){Touch.setupSpotSwipe($);Touch.setupTouchHandler($);}};/***/}/******/});
;"use strict";!function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports;}var n={};t.m=e,t.c=n,t.i=function(e){return e;},t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o});},t.n=function(e){var n=e&&e.__esModule?function(){return e.default;}:function(){return e;};return t.d(n,"a",n),n;},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t);},t.p="",t(t.s=107);}({0:function _(e,t){e.exports=jQuery;},107:function _(e,t,n){e.exports=n(41);},41:function _(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=n.n(o),u=n(71);u.a.init(i.a),window.Foundation.Touch=u.a;},71:function _(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function");}function i(){this.removeEventListener("touchmove",u),this.removeEventListener("touchend",i),w=!1;}function u(e){if(l.a.spotSwipe.preventDefault&&e.preventDefault(),w){var t,n=e.touches[0].pageX,o=(e.touches[0].pageY,s-n);p=new Date().getTime()-h,Math.abs(o)>=l.a.spotSwipe.moveThreshold&&p<=l.a.spotSwipe.timeThreshold&&(t=o>0?"left":"right"),t&&(e.preventDefault(),i.call(this),l()(this).trigger("swipe",t).trigger("swipe"+t));}}function r(e){1==e.touches.length&&(s=e.touches[0].pageX,a=e.touches[0].pageY,w=!0,h=new Date().getTime(),this.addEventListener("touchmove",u,!1),this.addEventListener("touchend",i,!1));}function c(){this.addEventListener&&this.addEventListener("touchstart",r,!1);}n.d(t,"a",function(){return v;});var s,a,h,p,f=n(0),l=n.n(f),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o);}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t;};}(),v={},w=!1,m=function(){function e(t){o(this,e),this.version="1.0.0",this.enabled="ontouchstart"in document.documentElement,this.preventDefault=!1,this.moveThreshold=75,this.timeThreshold=200,this.$=t,this._init();}return d(e,[{key:"_init",value:function value(){var e=this.$;e.event.special.swipe={setup:c},e.each(["left","up","down","right"],function(){e.event.special["swipe"+this]={setup:function setup(){e(this).on("swipe",e.noop);}};});}}]),e;}();v.setupSpotSwipe=function(e){e.spotSwipe=new m(e);},v.setupTouchHandler=function(e){e.fn.addTouch=function(){this.each(function(n,o){e(o).bind("touchstart touchmove touchend touchcancel",function(){t(event);});});var t=function t(e){var t,n=e.changedTouches,o=n[0],i={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup"},u=i[e.type];"MouseEvent"in window&&"function"==typeof window.MouseEvent?t=new window.MouseEvent(u,{bubbles:!0,cancelable:!0,screenX:o.screenX,screenY:o.screenY,clientX:o.clientX,clientY:o.clientY}):(t=document.createEvent("MouseEvent"),t.initMouseEvent(u,!0,!0,window,1,o.screenX,o.screenY,o.clientX,o.clientY,!1,!1,!1,!1,0,null)),o.target.dispatchEvent(t);};};},v.init=function(e){void 0===e.spotSwipe&&(v.setupSpotSwipe(e),v.setupTouchHandler(e));};}});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=108);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/108:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(42);/***/},/***/4:/***/function _(module,exports){module.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};/***/},/***/42:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_triggers__=__webpack_require__(7);__WEBPACK_IMPORTED_MODULE_2__foundation_util_triggers__["a"/* Triggers */].init(__WEBPACK_IMPORTED_MODULE_1_jquery___default.a,__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"]);/***/},/***/7:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Triggers;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};var Triggers={Listeners:{Basic:{},Global:{}},Initializers:{}};Triggers.Listeners.Basic={openListener:function openListener(){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'open');},closeListener:function closeListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'close');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');}},toggleListener:function toggleListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'toggle');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');}},closeableListener:function closeableListener(e){e.stopPropagation();var animation=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');if(animation!==''){__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),animation,function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');});}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');}},toggleFocusListener:function toggleFocusListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id).triggerHandler('toggle.zf.trigger',[__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);}};// Elements with [data-open] will reveal a plugin that supports it when clicked.
Triggers.Initializers.addOpenListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.openListener);$elem.on('click.zf.trigger','[data-open]',Triggers.Listeners.Basic.openListener);};// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
Triggers.Initializers.addCloseListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.closeListener);$elem.on('click.zf.trigger','[data-close]',Triggers.Listeners.Basic.closeListener);};// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
Triggers.Initializers.addToggleListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.toggleListener);$elem.on('click.zf.trigger','[data-toggle]',Triggers.Listeners.Basic.toggleListener);};// Elements with [data-closable] will respond to close.zf.trigger events.
Triggers.Initializers.addCloseableListener=function($elem){$elem.off('close.zf.trigger',Triggers.Listeners.Basic.closeableListener);$elem.on('close.zf.trigger','[data-closeable], [data-closable]',Triggers.Listeners.Basic.closeableListener);};// Elements with [data-toggle-focus] will respond to coming in and out of focus
Triggers.Initializers.addToggleFocusListener=function($elem){$elem.off('focus.zf.trigger blur.zf.trigger',Triggers.Listeners.Basic.toggleFocusListener);$elem.on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',Triggers.Listeners.Basic.toggleFocusListener);};// More Global/complex listeners and triggers
Triggers.Listeners.Global={resizeListener:function resizeListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event
$nodes.attr('data-events',"resize");},scrollListener:function scrollListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event
$nodes.attr('data-events',"scroll");},closeMeListener:function closeMeListener(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-'+plugin+']').not('[data-yeti-box="'+pluginId+'"]');plugins.each(function(){var _this=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);_this.triggerHandler('close.zf.trigger',[_this]);});}// Global, parses whole document.
};Triggers.Initializers.addClosemeListener=function(pluginName){var yetiBoxes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners,Triggers.Listeners.Global.closeMeListener);}};function debounceGlobalListener(debounce,trigger,listener){var timer=void 0,args=Array.prototype.slice.call(arguments,3);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger,function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){listener.apply(null,args);},debounce||10);//default time to emit scroll event
});}Triggers.Initializers.addResizeListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');if($nodes.length){debounceGlobalListener(debounce,'resize.zf.trigger',Triggers.Listeners.Global.resizeListener,$nodes);}};Triggers.Initializers.addScrollListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');if($nodes.length){debounceGlobalListener(debounce,'scroll.zf.trigger',Triggers.Listeners.Global.scrollListener,$nodes);}};Triggers.Initializers.addMutationEventsListener=function($elem){if(!MutationObserver){return false;}var $nodes=$elem.find('[data-resize], [data-scroll], [data-mutate]');//element callback
var listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);//trigger the event handler for the element depending on type
switch(mutationRecordsList[0].type){case"attributes":if($target.attr("data-events")==="scroll"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);}if($target.attr("data-events")==="resize"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('resizeme.zf.trigger',[$target]);}if(mutationRecordsList[0].attributeName==="style"){$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);}break;case"childList":$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);break;default:return false;//nothing
}};if($nodes.length){//for each element that needs to listen for resizing, scrolling, or mutation add a single observer
for(var i=0;i<=$nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe($nodes[i],{attributes:true,childList:true,characterData:false,subtree:true,attributeFilter:["data-events","style"]});}}};Triggers.Initializers.addSimpleListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addOpenListener($document);Triggers.Initializers.addCloseListener($document);Triggers.Initializers.addToggleListener($document);Triggers.Initializers.addCloseableListener($document);Triggers.Initializers.addToggleFocusListener($document);};Triggers.Initializers.addGlobalListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addMutationEventsListener($document);Triggers.Initializers.addResizeListener();Triggers.Initializers.addScrollListener();Triggers.Initializers.addClosemeListener();};Triggers.init=function($,Foundation){if(typeof $.triggersInitialized==='undefined'){var $document=$(document);if(document.readyState==="complete"){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();}else{$(window).on('load',function(){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();});}$.triggersInitialized=true;}if(Foundation){Foundation.Triggers=Triggers;// Legacy included to be backwards compatible for now.
Foundation.IHearYou=Triggers.Initializers.addGlobalListeners;}};/***/}/******/});
;"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};!function(e){function t(r){if(i[r])return i[r].exports;var n=i[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,t),n.l=!0,n.exports;}var i={};t.m=e,t.c=i,t.i=function(e){return e;},t.d=function(e,i,r){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:r});},t.n=function(e){var i=e&&e.__esModule?function(){return e.default;}:function(){return e;};return t.d(i,"a",i),i;},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t);},t.p="",t(t.s=108);}({0:function _(e,t){e.exports=jQuery;},1:function _(e,t){e.exports={Foundation:window.Foundation};},108:function _(e,t,i){e.exports=i(42);},4:function _(e,t){e.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};},42:function _(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(1),n=(i.n(r),i(0)),s=i.n(n);i(7).a.init(s.a,r.Foundation);},7:function _(e,t,i){"use strict";function r(e,t,i){var r=void 0,n=Array.prototype.slice.call(arguments,3);s()(window).off(t).on(t,function(t){r&&clearTimeout(r),r=setTimeout(function(){i.apply(null,n);},e||10);});}i.d(t,"a",function(){return c;});var n=i(0),s=i.n(n),a=i(4),o=(i.n(a),function(){for(var e=["WebKit","Moz","O","Ms",""],t=0;t<e.length;t++){if(e[t]+"MutationObserver"in window)return window[e[t]+"MutationObserver"];}return!1;}()),l=function l(e,t){e.data(t).split(" ").forEach(function(i){s()("#"+i)["close"===t?"trigger":"triggerHandler"](t+".zf.trigger",[e]);});},c={Listeners:{Basic:{},Global:{}},Initializers:{}};c.Listeners.Basic={openListener:function openListener(){l(s()(this),"open");},closeListener:function closeListener(){s()(this).data("close")?l(s()(this),"close"):s()(this).trigger("close.zf.trigger");},toggleListener:function toggleListener(){s()(this).data("toggle")?l(s()(this),"toggle"):s()(this).trigger("toggle.zf.trigger");},closeableListener:function closeableListener(e){e.stopPropagation();var t=s()(this).data("closable");""!==t?a.Motion.animateOut(s()(this),t,function(){s()(this).trigger("closed.zf");}):s()(this).fadeOut().trigger("closed.zf");},toggleFocusListener:function toggleFocusListener(){var e=s()(this).data("toggle-focus");s()("#"+e).triggerHandler("toggle.zf.trigger",[s()(this)]);}},c.Initializers.addOpenListener=function(e){e.off("click.zf.trigger",c.Listeners.Basic.openListener),e.on("click.zf.trigger","[data-open]",c.Listeners.Basic.openListener);},c.Initializers.addCloseListener=function(e){e.off("click.zf.trigger",c.Listeners.Basic.closeListener),e.on("click.zf.trigger","[data-close]",c.Listeners.Basic.closeListener);},c.Initializers.addToggleListener=function(e){e.off("click.zf.trigger",c.Listeners.Basic.toggleListener),e.on("click.zf.trigger","[data-toggle]",c.Listeners.Basic.toggleListener);},c.Initializers.addCloseableListener=function(e){e.off("close.zf.trigger",c.Listeners.Basic.closeableListener),e.on("close.zf.trigger","[data-closeable], [data-closable]",c.Listeners.Basic.closeableListener);},c.Initializers.addToggleFocusListener=function(e){e.off("focus.zf.trigger blur.zf.trigger",c.Listeners.Basic.toggleFocusListener),e.on("focus.zf.trigger blur.zf.trigger","[data-toggle-focus]",c.Listeners.Basic.toggleFocusListener);},c.Listeners.Global={resizeListener:function resizeListener(e){o||e.each(function(){s()(this).triggerHandler("resizeme.zf.trigger");}),e.attr("data-events","resize");},scrollListener:function scrollListener(e){o||e.each(function(){s()(this).triggerHandler("scrollme.zf.trigger");}),e.attr("data-events","scroll");},closeMeListener:function closeMeListener(e,t){var i=e.namespace.split(".")[0];s()("[data-"+i+"]").not('[data-yeti-box="'+t+'"]').each(function(){var e=s()(this);e.triggerHandler("close.zf.trigger",[e]);});}},c.Initializers.addClosemeListener=function(e){var t=s()("[data-yeti-box]"),i=["dropdown","tooltip","reveal"];if(e&&("string"==typeof e?i.push(e):"object"==(typeof e==="undefined"?"undefined":_typeof(e))&&"string"==typeof e[0]?i.concat(e):console.error("Plugin names must be strings")),t.length){var r=i.map(function(e){return"closeme.zf."+e;}).join(" ");s()(window).off(r).on(r,c.Listeners.Global.closeMeListener);}},c.Initializers.addResizeListener=function(e){var t=s()("[data-resize]");t.length&&r(e,"resize.zf.trigger",c.Listeners.Global.resizeListener,t);},c.Initializers.addScrollListener=function(e){var t=s()("[data-scroll]");t.length&&r(e,"scroll.zf.trigger",c.Listeners.Global.scrollListener,t);},c.Initializers.addMutationEventsListener=function(e){if(!o)return!1;var t=e.find("[data-resize], [data-scroll], [data-mutate]"),i=function i(e){var t=s()(e[0].target);switch(e[0].type){case"attributes":"scroll"===t.attr("data-events")&&"data-events"===e[0].attributeName&&t.triggerHandler("scrollme.zf.trigger",[t,window.pageYOffset]),"resize"===t.attr("data-events")&&"data-events"===e[0].attributeName&&t.triggerHandler("resizeme.zf.trigger",[t]),"style"===e[0].attributeName&&(t.closest("[data-mutate]").attr("data-events","mutate"),t.closest("[data-mutate]").triggerHandler("mutateme.zf.trigger",[t.closest("[data-mutate]")]));break;case"childList":t.closest("[data-mutate]").attr("data-events","mutate"),t.closest("[data-mutate]").triggerHandler("mutateme.zf.trigger",[t.closest("[data-mutate]")]);break;default:return!1;}};if(t.length)for(var r=0;r<=t.length-1;r++){var n=new o(i);n.observe(t[r],{attributes:!0,childList:!0,characterData:!1,subtree:!0,attributeFilter:["data-events","style"]});}},c.Initializers.addSimpleListeners=function(){var e=s()(document);c.Initializers.addOpenListener(e),c.Initializers.addCloseListener(e),c.Initializers.addToggleListener(e),c.Initializers.addCloseableListener(e),c.Initializers.addToggleFocusListener(e);},c.Initializers.addGlobalListeners=function(){var e=s()(document);c.Initializers.addMutationEventsListener(e),c.Initializers.addResizeListener(),c.Initializers.addScrollListener(),c.Initializers.addClosemeListener();},c.init=function(e,t){if(void 0===e.triggersInitialized){e(document);"complete"===document.readyState?(c.Initializers.addSimpleListeners(),c.Initializers.addGlobalListeners()):e(window).on("load",function(){c.Initializers.addSimpleListeners(),c.Initializers.addGlobalListeners();}),e.triggersInitialized=!0;}t&&(t.Triggers=c,t.IHearYou=c.Initializers.addGlobalListeners);};}});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=95);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/29:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_smoothScroll__=__webpack_require__(59);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_smoothScroll__["a"/* SmoothScroll */],'SmoothScroll');/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/59:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return SmoothScroll;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * SmoothScroll module.
 * @module foundation.smooth-scroll
 */var SmoothScroll=function(_Plugin){_inherits(SmoothScroll,_Plugin);function SmoothScroll(){_classCallCheck(this,SmoothScroll);return _possibleConstructorReturn(this,(SmoothScroll.__proto__||Object.getPrototypeOf(SmoothScroll)).apply(this,arguments));}_createClass(SmoothScroll,[{key:'_setup',/**
         * Creates a new instance of SmoothScroll.
         * @class
         * @name SmoothScroll
         * @fires SmoothScroll#init
         * @param {Object} element - jQuery object to add the trigger to.
         * @param {Object} options - Overrides to the default plugin settings.
         */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},SmoothScroll.defaults,this.$element.data(),options);this.className='SmoothScroll';// ie9 back compat
this._init();}/**
         * Initialize the SmoothScroll plugin
         * @private
         */},{key:'_init',value:function _init(){var id=this.$element[0].id||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["GetYoDigits"])(6,'smooth-scroll');var _this=this;this.$element.attr({'id':id});this._events();}/**
         * Initializes events for SmoothScroll.
         * @private
         */},{key:'_events',value:function _events(){var _this=this;// click handler function.
var handleLinkClick=function handleLinkClick(e){// exit function if the event source isn't coming from an anchor with href attribute starts with '#'
if(!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is('a[href^="#"]')){return false;}var arrival=this.getAttribute('href');_this._inTransition=true;SmoothScroll.scrollToLoc(arrival,_this.options,function(){_this._inTransition=false;});e.preventDefault();};this.$element.on('click.zf.smoothScroll',handleLinkClick);this.$element.on('click.zf.smoothScroll','a[href^="#"]',handleLinkClick);}/**
         * Function to scroll to a given location on the page.
         * @param {String} loc - A properly formatted jQuery id selector. Example: '#foo'
         * @param {Object} options - The options to use.
         * @param {Function} callback - The callback function.
         * @static
         * @function
         */}],[{key:'scrollToLoc',value:function scrollToLoc(loc){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:SmoothScroll.defaults;var callback=arguments[2];// Do nothing if target does not exist to prevent errors
if(!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(loc).length){return false;}var scrollPos=Math.round(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(loc).offset().top-options.threshold/2-options.offset);__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').stop(true).animate({scrollTop:scrollPos},options.animationDuration,options.animationEasing,function(){if(callback&&typeof callback=="function"){callback();}});}}]);return SmoothScroll;}(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["Plugin"]);/**
 * Default settings for plugin.
 */SmoothScroll.defaults={/**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @type {number}
     * @default 500
     */animationDuration:500,/**
     * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
     * @option
     * @type {string}
     * @default 'linear'
     * @see {@link https://api.jquery.com/animate|Jquery animate}
     */animationEasing:'linear',/**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @type {number}
     * @default 50
     */threshold:50,/**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @type {number}
     * @default 0
     */offset:0};/***/},/***/95:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(29);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=80);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/14:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_accordion__=__webpack_require__(44);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_accordion__["a"/* Accordion */],'Accordion');/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/44:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Accordion;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Accordion module.
 * @module foundation.accordion
 * @requires foundation.util.keyboard
 */var Accordion=function(_Plugin){_inherits(Accordion,_Plugin);function Accordion(){_classCallCheck(this,Accordion);return _possibleConstructorReturn(this,(Accordion.__proto__||Object.getPrototypeOf(Accordion)).apply(this,arguments));}_createClass(Accordion,[{key:'_setup',/**
     * Creates a new instance of an accordion.
     * @class
     * @name Accordion
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Accordion.defaults,this.$element.data(),options);this.className='Accordion';// ie9 back compat
this._init();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Accordion',{'ENTER':'toggle','SPACE':'toggle','ARROW_DOWN':'next','ARROW_UP':'previous'});}/**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */},{key:'_init',value:function _init(){var _this3=this;this.$element.attr('role','tablist');this.$tabs=this.$element.children('[data-accordion-item]');this.$tabs.each(function(idx,el){var $el=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(el),$content=$el.children('[data-tab-content]'),id=$content[0].id||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6,'accordion'),linkId=el.id||id+'-label';$el.find('a:first').attr({'aria-controls':id,'role':'tab','id':linkId,'aria-expanded':false,'aria-selected':false});$content.attr({'role':'tabpanel','aria-labelledby':linkId,'aria-hidden':true,'id':id});});var $initActive=this.$element.find('.is-active').children('[data-tab-content]');this.firstTimeInit=true;if($initActive.length){this.down($initActive,this.firstTimeInit);this.firstTimeInit=false;}this._checkDeepLink=function(){var anchor=window.location.hash;//need a hash and a relevant anchor in this tabset
if(anchor.length){var $link=_this3.$element.find('[href$="'+anchor+'"]'),$anchor=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor);if($link.length&&$anchor){if(!$link.parent('[data-accordion-item]').hasClass('is-active')){_this3.down($anchor,_this3.firstTimeInit);_this3.firstTimeInit=false;};//roll up a little to show the titles
if(_this3.options.deepLinkSmudge){var _this=_this3;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).load(function(){var offset=_this.$element.offset();__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({scrollTop:offset.top},_this.options.deepLinkSmudgeDelay);});}/**
              * Fires when the zplugin has deeplinked at pageload
              * @event Accordion#deeplink
              */_this3.$element.trigger('deeplink.zf.accordion',[$link,$anchor]);}}};//use browser to open a tab, if it exists in this tabset
if(this.options.deepLink){this._checkDeepLink();}this._events();}/**
     * Adds event handlers for items within the accordion.
     * @private
     */},{key:'_events',value:function _events(){var _this=this;this.$tabs.each(function(){var $elem=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);var $tabContent=$elem.children('[data-tab-content]');if($tabContent.length){$elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion',function(e){e.preventDefault();_this.toggle($tabContent);}).on('keydown.zf.accordion',function(e){__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e,'Accordion',{toggle:function toggle(){_this.toggle($tabContent);},next:function next(){var $a=$elem.next().find('a').focus();if(!_this.options.multiExpand){$a.trigger('click.zf.accordion');}},previous:function previous(){var $a=$elem.prev().find('a').focus();if(!_this.options.multiExpand){$a.trigger('click.zf.accordion');}},handled:function handled(){e.preventDefault();e.stopPropagation();}});});}});if(this.options.deepLink){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate',this._checkDeepLink);}}/**
     * Toggles the selected content pane's open/close state.
     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
     * @function
     */},{key:'toggle',value:function toggle($target){if($target.closest('[data-accordion]').is('[disabled]')){console.info('Cannot toggle an accordion that is disabled.');return;}if($target.parent().hasClass('is-active')){this.up($target);}else{this.down($target);}//either replace or update browser history
if(this.options.deepLink){var anchor=$target.prev('a').attr('href');if(this.options.updateHistory){history.pushState({},'',anchor);}else{history.replaceState({},'',anchor);}}}/**
     * Opens the accordion tab defined by `$target`.
     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
     * @param {Boolean} firstTime - flag to determine if reflow should happen.
     * @fires Accordion#down
     * @function
     */},{key:'down',value:function down($target,firstTime){var _this4=this;/**
       * checking firstTime allows for initial render of the accordion
       * to render preset is-active panes.
       */if($target.closest('[data-accordion]').is('[disabled]')&&!firstTime){console.info('Cannot call down on an accordion that is disabled.');return;}$target.attr('aria-hidden',false).parent('[data-tab-content]').addBack().parent().addClass('is-active');if(!this.options.multiExpand&&!firstTime){var $currentActive=this.$element.children('.is-active').children('[data-tab-content]');if($currentActive.length){this.up($currentActive.not($target));}}$target.slideDown(this.options.slideSpeed,function(){/**
         * Fires when the tab is done opening.
         * @event Accordion#down
         */_this4.$element.trigger('down.zf.accordion',[$target]);});__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+$target.attr('aria-labelledby')).attr({'aria-expanded':true,'aria-selected':true});}/**
     * Closes the tab defined by `$target`.
     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
     * @fires Accordion#up
     * @function
     */},{key:'up',value:function up($target){if($target.closest('[data-accordion]').is('[disabled]')){console.info('Cannot call up on an accordion that is disabled.');return;}var $aunts=$target.parent().siblings(),_this=this;if(!this.options.allowAllClosed&&!$aunts.hasClass('is-active')||!$target.parent().hasClass('is-active')){return;}$target.slideUp(_this.options.slideSpeed,function(){/**
         * Fires when the tab is done collapsing up.
         * @event Accordion#up
         */_this.$element.trigger('up.zf.accordion',[$target]);});$target.attr('aria-hidden',true).parent().removeClass('is-active');__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+$target.attr('aria-labelledby')).attr({'aria-expanded':false,'aria-selected':false});}/**
     * Destroys an instance of an accordion.
     * @fires Accordion#destroyed
     * @function
     */},{key:'_destroy',value:function _destroy(){this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display','');this.$element.find('a').off('.zf.accordion');if(this.options.deepLink){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate',this._checkDeepLink);}}}]);return Accordion;}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);Accordion.defaults={/**
   * Amount of time to animate the opening of an accordion pane.
   * @option
   * @type {number}
   * @default 250
   */slideSpeed:250,/**
   * Allow the accordion to have multiple open panes.
   * @option
   * @type {boolean}
   * @default false
   */multiExpand:false,/**
   * Allow the accordion to close all panes.
   * @option
   * @type {boolean}
   * @default false
   */allowAllClosed:false,/**
   * Allows the window to scroll to content of pane specified by hash anchor
   * @option
   * @type {boolean}
   * @default false
   */deepLink:false,/**
   * Adjust the deep link scroll to make sure the top of the accordion panel is visible
   * @option
   * @type {boolean}
   * @default false
   */deepLinkSmudge:false,/**
   * Animation time (ms) for the deep link adjustment
   * @option
   * @type {number}
   * @default 300
   */deepLinkSmudgeDelay:300,/**
   * Update the browser history with the open accordion
   * @option
   * @type {boolean}
   * @default false
   */updateHistory:false};/***/},/***/5:/***/function _(module,exports){module.exports={Keyboard:window.Foundation.Keyboard};/***/},/***/80:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(14);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=81);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/15:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_accordionMenu__=__webpack_require__(45);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_accordionMenu__["a"/* AccordionMenu */],'AccordionMenu');/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/45:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return AccordionMenu;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * AccordionMenu module.
 * @module foundation.accordionMenu
 * @requires foundation.util.keyboard
 * @requires foundation.util.nest
 */var AccordionMenu=function(_Plugin){_inherits(AccordionMenu,_Plugin);function AccordionMenu(){_classCallCheck(this,AccordionMenu);return _possibleConstructorReturn(this,(AccordionMenu.__proto__||Object.getPrototypeOf(AccordionMenu)).apply(this,arguments));}_createClass(AccordionMenu,[{key:'_setup',/**
     * Creates a new instance of an accordion menu.
     * @class
     * @name AccordionMenu
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},AccordionMenu.defaults,this.$element.data(),options);this.className='AccordionMenu';// ie9 back compat
this._init();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('AccordionMenu',{'ENTER':'toggle','SPACE':'toggle','ARROW_RIGHT':'open','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'close','ESCAPE':'closeAll'});}/**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Feather(this.$element,'accordion');var _this=this;this.$element.find('[data-submenu]').not('.is-active').slideUp(0);//.find('a').css('padding-left', '1rem');
this.$element.attr({'role':'tree','aria-multiselectable':this.options.multiOpen});this.$menuLinks=this.$element.find('.is-accordion-submenu-parent');this.$menuLinks.each(function(){var linkId=this.id||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6,'acc-menu-link'),$elem=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),$sub=$elem.children('[data-submenu]'),subId=$sub[0].id||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6,'acc-menu'),isActive=$sub.hasClass('is-active');if(_this.options.submenuToggle){$elem.addClass('has-submenu-toggle');$elem.children('a').after('<button id="'+linkId+'" class="submenu-toggle" aria-controls="'+subId+'" aria-expanded="'+isActive+'" title="'+_this.options.submenuToggleText+'"><span class="submenu-toggle-text">'+_this.options.submenuToggleText+'</span></button>');}else{$elem.attr({'aria-controls':subId,'aria-expanded':isActive,'id':linkId});}$sub.attr({'aria-labelledby':linkId,'aria-hidden':!isActive,'role':'group','id':subId});});this.$element.find('li').attr({'role':'treeitem'});var initPanes=this.$element.find('.is-active');if(initPanes.length){var _this=this;initPanes.each(function(){_this.down(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));});}this._events();}/**
     * Adds event handlers for items within the menu.
     * @private
     */},{key:'_events',value:function _events(){var _this=this;this.$element.find('li').each(function(){var $submenu=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('[data-submenu]');if($submenu.length){if(_this.options.submenuToggle){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu',function(e){_this.toggle($submenu);});}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu',function(e){e.preventDefault();_this.toggle($submenu);});}}}).on('keydown.zf.accordionmenu',function(e){var $element=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),$elements=$element.parent('ul').children('li'),$prevElement,$nextElement,$target=$element.children('[data-submenu]');$elements.each(function(i){if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)){$prevElement=$elements.eq(Math.max(0,i-1)).find('a').first();$nextElement=$elements.eq(Math.min(i+1,$elements.length-1)).find('a').first();if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('[data-submenu]:visible').length){// has open sub menu
$nextElement=$element.find('li:first-child').find('a').first();}if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':first-child')){// is first element of sub menu
$prevElement=$element.parents('li').first().find('a').first();}else if($prevElement.parents('li').first().children('[data-submenu]:visible').length){// if previous element has open sub menu
$prevElement=$prevElement.parents('li').find('li:last-child').find('a').first();}if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':last-child')){// is last element of sub menu
$nextElement=$element.parents('li').first().next('li').find('a').first();}return;}});__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e,'AccordionMenu',{open:function open(){if($target.is(':hidden')){_this.down($target);$target.find('li').first().find('a').first().focus();}},close:function close(){if($target.length&&!$target.is(':hidden')){// close active sub of this item
_this.up($target);}else if($element.parent('[data-submenu]').length){// close currently open sub
_this.up($element.parent('[data-submenu]'));$element.parents('li').first().find('a').first().focus();}},up:function up(){$prevElement.focus();return true;},down:function down(){$nextElement.focus();return true;},toggle:function toggle(){if(_this.options.submenuToggle){return false;}if($element.children('[data-submenu]').length){_this.toggle($element.children('[data-submenu]'));return true;}},closeAll:function closeAll(){_this.hideAll();},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}e.stopImmediatePropagation();}});});//.attr('tabindex', 0);
}/**
     * Closes all panes of the menu.
     * @function
     */},{key:'hideAll',value:function hideAll(){this.up(this.$element.find('[data-submenu]'));}/**
     * Opens all panes of the menu.
     * @function
     */},{key:'showAll',value:function showAll(){this.down(this.$element.find('[data-submenu]'));}/**
     * Toggles the open/close state of a submenu.
     * @function
     * @param {jQuery} $target - the submenu to toggle
     */},{key:'toggle',value:function toggle($target){if(!$target.is(':animated')){if(!$target.is(':hidden')){this.up($target);}else{this.down($target);}}}/**
     * Opens the sub-menu defined by `$target`.
     * @param {jQuery} $target - Sub-menu to open.
     * @fires AccordionMenu#down
     */},{key:'down',value:function down($target){var _this=this;if(!this.options.multiOpen){this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));}$target.addClass('is-active').attr({'aria-hidden':false});if(this.options.submenuToggle){$target.prev('.submenu-toggle').attr({'aria-expanded':true});}else{$target.parent('.is-accordion-submenu-parent').attr({'aria-expanded':true});}$target.slideDown(_this.options.slideSpeed,function(){/**
         * Fires when the menu is done opening.
         * @event AccordionMenu#down
         */_this.$element.trigger('down.zf.accordionMenu',[$target]);});}/**
     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
     * @param {jQuery} $target - Sub-menu to close.
     * @fires AccordionMenu#up
     */},{key:'up',value:function up($target){var _this=this;$target.slideUp(_this.options.slideSpeed,function(){/**
         * Fires when the menu is done collapsing up.
         * @event AccordionMenu#up
         */_this.$element.trigger('up.zf.accordionMenu',[$target]);});var $menus=$target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden',true);if(this.options.submenuToggle){$menus.prev('.submenu-toggle').attr('aria-expanded',false);}else{$menus.parent('.is-accordion-submenu-parent').attr('aria-expanded',false);}}/**
     * Destroys an instance of accordion menu.
     * @fires AccordionMenu#destroyed
     */},{key:'_destroy',value:function _destroy(){this.$element.find('[data-submenu]').slideDown(0).css('display','');this.$element.find('a').off('click.zf.accordionMenu');if(this.options.submenuToggle){this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');this.$element.find('.submenu-toggle').remove();}__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Burn(this.$element,'accordion');}}]);return AccordionMenu;}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);AccordionMenu.defaults={/**
   * Amount of time to animate the opening of a submenu in ms.
   * @option
   * @type {number}
   * @default 250
   */slideSpeed:250,/**
   * Adds a separate submenu toggle button. This allows the parent item to have a link.
   * @option
   * @example true
   */submenuToggle:false,/**
   * The text used for the submenu toggle if enabled. This is used for screen readers only.
   * @option
   * @example true
   */submenuToggleText:'Toggle menu',/**
   * Allow the menu to have multiple open panes.
   * @option
   * @type {boolean}
   * @default true
   */multiOpen:true};/***/},/***/5:/***/function _(module,exports){module.exports={Keyboard:window.Foundation.Keyboard};/***/},/***/81:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(15);/***/},/***/9:/***/function _(module,exports){module.exports={Nest:window.Foundation.Nest};/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=90);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/24:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_responsiveAccordionTabs__=__webpack_require__(54);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_responsiveAccordionTabs__["a"/* ResponsiveAccordionTabs */],'ResponsiveAccordionTabs');/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/54:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return ResponsiveAccordionTabs;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_accordion__=__webpack_require__(72);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_accordion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_accordion__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_tabs__=__webpack_require__(77);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_tabs___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_tabs__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}// The plugin matches the plugin classes with these plugin instances.
var MenuPlugins={tabs:{cssClass:'tabs',plugin:__WEBPACK_IMPORTED_MODULE_5__foundation_tabs__["Tabs"]},accordion:{cssClass:'accordion',plugin:__WEBPACK_IMPORTED_MODULE_4__foundation_accordion__["Accordion"]}};/**
 * ResponsiveAccordionTabs module.
 * @module foundation.responsiveAccordionTabs
 * @requires foundation.util.motion
 * @requires foundation.accordion
 * @requires foundation.tabs
 */var ResponsiveAccordionTabs=function(_Plugin){_inherits(ResponsiveAccordionTabs,_Plugin);function ResponsiveAccordionTabs(){_classCallCheck(this,ResponsiveAccordionTabs);return _possibleConstructorReturn(this,(ResponsiveAccordionTabs.__proto__||Object.getPrototypeOf(ResponsiveAccordionTabs)).apply(this,arguments));}_createClass(ResponsiveAccordionTabs,[{key:'_setup',/**
     * Creates a new instance of a responsive accordion tabs.
     * @class
     * @name ResponsiveAccordionTabs
     * @fires ResponsiveAccordionTabs#init
     * @param {jQuery} element - jQuery object to make into Responsive Accordion Tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},this.$element.data(),options);this.rules=this.$element.data('responsive-accordion-tabs');this.currentMq=null;this.currentPlugin=null;this.className='ResponsiveAccordionTabs';// ie9 back compat
if(!this.$element.attr('id')){this.$element.attr('id',__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6,'responsiveaccordiontabs'));};this._init();this._events();}/**
     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
     * @function
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();// The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
if(typeof this.rules==='string'){var rulesTree={};// Parse rules from "classes" pulled from data attribute
var rules=this.rules.split(' ');// Iterate through every rule found
for(var i=0;i<rules.length;i++){var rule=rules[i].split('-');var ruleSize=rule.length>1?rule[0]:'small';var rulePlugin=rule.length>1?rule[1]:rule[0];if(MenuPlugins[rulePlugin]!==null){rulesTree[ruleSize]=MenuPlugins[rulePlugin];}}this.rules=rulesTree;}this._getAllOptions();if(!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.isEmptyObject(this.rules)){this._checkMediaQueries();}}},{key:'_getAllOptions',value:function _getAllOptions(){//get all defaults and options
var _this=this;_this.allOptions={};for(var key in MenuPlugins){if(MenuPlugins.hasOwnProperty(key)){var obj=MenuPlugins[key];try{var dummyPlugin=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('<ul></ul>');var tmpPlugin=new obj.plugin(dummyPlugin,_this.options);for(var keyKey in tmpPlugin.options){if(tmpPlugin.options.hasOwnProperty(keyKey)&&keyKey!=='zfPlugin'){var objObj=tmpPlugin.options[keyKey];_this.allOptions[keyKey]=objObj;}}tmpPlugin.destroy();}catch(e){}}}}/**
     * Initializes events for the Menu.
     * @function
     * @private
     */},{key:'_events',value:function _events(){var _this=this;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery',function(){_this._checkMediaQueries();});}/**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */},{key:'_checkMediaQueries',value:function _checkMediaQueries(){var matchedMq,_this=this;// Iterate through each rule and find the last matching rule
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(this.rules,function(key){if(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].atLeast(key)){matchedMq=key;}});// No match? No dice
if(!matchedMq)return;// Plugin already initialized? We good
if(this.currentPlugin instanceof this.rules[matchedMq].plugin)return;// Remove existing plugin-specific CSS classes
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(MenuPlugins,function(key,value){_this.$element.removeClass(value.cssClass);});// Add the CSS class for the new plugin
this.$element.addClass(this.rules[matchedMq].cssClass);// Create an instance of the new plugin
if(this.currentPlugin){//don't know why but on nested elements data zfPlugin get's lost
if(!this.currentPlugin.$element.data('zfPlugin')&&this.storezfData)this.currentPlugin.$element.data('zfPlugin',this.storezfData);this.currentPlugin.destroy();}this._handleMarkup(this.rules[matchedMq].cssClass);this.currentPlugin=new this.rules[matchedMq].plugin(this.$element,{});this.storezfData=this.currentPlugin.$element.data('zfPlugin');}},{key:'_handleMarkup',value:function _handleMarkup(toSet){var _this=this,fromString='accordion';var $panels=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content='+this.$element.attr('id')+']');if($panels.length)fromString='tabs';if(fromString===toSet){return;};var tabsTitle=_this.allOptions.linkClass?_this.allOptions.linkClass:'tabs-title';var tabsPanel=_this.allOptions.panelClass?_this.allOptions.panelClass:'tabs-panel';this.$element.removeAttr('role');var $liHeads=this.$element.children('.'+tabsTitle+',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');var $liHeadsA=$liHeads.children('a').removeClass('accordion-title');if(fromString==='tabs'){$panels=$panels.children('.'+tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');$panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');}else{$panels=$liHeads.children('[data-tab-content]').removeClass('accordion-content');};$panels.css({display:'',visibility:''});$liHeads.css({display:'',visibility:''});if(toSet==='accordion'){$panels.each(function(key,value){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content','').removeClass('is-active').css({height:''});__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content='+_this.$element.attr('id')+']').after('<div id="tabs-placeholder-'+_this.$element.attr('id')+'"></div>').detach();$liHeads.addClass('accordion-item').attr('data-accordion-item','');$liHeadsA.addClass('accordion-title');});}else if(toSet==='tabs'){var $tabsContent=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content='+_this.$element.attr('id')+']');var $placeholder=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#tabs-placeholder-'+_this.$element.attr('id'));if($placeholder.length){$tabsContent=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content',_this.$element.attr('id'));$placeholder.remove();}else{$tabsContent=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content',_this.$element.attr('id'));};$panels.each(function(key,value){var tempValue=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).appendTo($tabsContent).addClass(tabsPanel);var hash=$liHeadsA.get(key).hash.slice(1);var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id')||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6,'accordion');if(hash!==id){if(hash!==''){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id',hash);}else{hash=id;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id',hash);__WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeadsA.get(key)).attr('href',__WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeadsA.get(key)).attr('href').replace('#','')+'#'+hash);};};var isActive=__WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeads.get(key)).hasClass('is-active');if(isActive){tempValue.addClass('is-active');};});$liHeads.addClass(tabsTitle);};}/**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */},{key:'_destroy',value:function _destroy(){if(this.currentPlugin)this.currentPlugin.destroy();__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.ResponsiveAccordionTabs');}}]);return ResponsiveAccordionTabs;}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);ResponsiveAccordionTabs.defaults={};/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/72:/***/function _(module,exports){module.exports={Accordion:window.Foundation.Accordion};/***/},/***/77:/***/function _(module,exports){module.exports={Tabs:window.Foundation.Tabs};/***/},/***/90:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(24);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=82);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/16:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_drilldown__=__webpack_require__(46);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_drilldown__["a"/* Drilldown */],'Drilldown');/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/46:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Drilldown;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_box__=__webpack_require__(8);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_box___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_util_box__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Drilldown module.
 * @module foundation.drilldown
 * @requires foundation.util.keyboard
 * @requires foundation.util.nest
 * @requires foundation.util.box
 */var Drilldown=function(_Plugin){_inherits(Drilldown,_Plugin);function Drilldown(){_classCallCheck(this,Drilldown);return _possibleConstructorReturn(this,(Drilldown.__proto__||Object.getPrototypeOf(Drilldown)).apply(this,arguments));}_createClass(Drilldown,[{key:'_setup',/**
     * Creates a new instance of a drilldown menu.
     * @class
     * @name Drilldown
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Drilldown.defaults,this.$element.data(),options);this.className='Drilldown';// ie9 back compat
this._init();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Drilldown',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'previous','ESCAPE':'close','TAB':'down','SHIFT_TAB':'up'});}/**
     * Initializes the drilldown by creating jQuery collections of elements
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Feather(this.$element,'drilldown');if(this.options.autoApplyClass){this.$element.addClass('drilldown');}this.$element.attr({'role':'tree','aria-multiselectable':false});this.$submenuAnchors=this.$element.find('li.is-drilldown-submenu-parent').children('a');this.$submenus=this.$submenuAnchors.parent('li').children('[data-submenu]').attr('role','group');this.$menuItems=this.$element.find('li').not('.js-drilldown-back').attr('role','treeitem').find('a');this.$element.attr('data-mutate',this.$element.attr('data-drilldown')||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6,'drilldown'));this._prepareMenu();this._registerEvents();this._keyboardEvents();}/**
     * prepares drilldown menu by setting attributes to links and elements
     * sets a min height to prevent content jumping
     * wraps the element if not already wrapped
     * @private
     * @function
     */},{key:'_prepareMenu',value:function _prepareMenu(){var _this=this;// if(!this.options.holdOpen){
//   this._menuLinkEvents();
// }
this.$submenuAnchors.each(function(){var $link=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);var $sub=$link.parent();if(_this.options.parentLink){$link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menuitem"></li>');}$link.data('savedHref',$link.attr('href')).removeAttr('href').attr('tabindex',0);$link.children('[data-submenu]').attr({'aria-hidden':true,'tabindex':0,'role':'group'});_this._events($link);});this.$submenus.each(function(){var $menu=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),$back=$menu.find('.js-drilldown-back');if(!$back.length){switch(_this.options.backButtonPosition){case"bottom":$menu.append(_this.options.backButton);break;case"top":$menu.prepend(_this.options.backButton);break;default:console.error("Unsupported backButtonPosition value '"+_this.options.backButtonPosition+"'");}}_this._back($menu);});this.$submenus.addClass('invisible');if(!this.options.autoHeight){this.$submenus.addClass('drilldown-submenu-cover-previous');}// create a wrapper on element if it doesn't exist.
if(!this.$element.parent().hasClass('is-drilldown')){this.$wrapper=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.wrapper).addClass('is-drilldown');if(this.options.animateHeight)this.$wrapper.addClass('animate-height');this.$element.wrap(this.$wrapper);}// set wrapper
this.$wrapper=this.$element.parent();this.$wrapper.css(this._getMaxDims());}},{key:'_resize',value:function _resize(){this.$wrapper.css({'max-width':'none','min-height':'none'});// _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths
this.$wrapper.css(this._getMaxDims());}/**
     * Adds event handlers to elements in the menu.
     * @function
     * @private
     * @param {jQuery} $elem - the current menu item to add handlers to.
     */},{key:'_events',value:function _events($elem){var _this=this;$elem.off('click.zf.drilldown').on('click.zf.drilldown',function(e){if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul','li').hasClass('is-drilldown-submenu-parent')){e.stopImmediatePropagation();e.preventDefault();}// if(e.target !== e.currentTarget.firstElementChild){
//   return false;
// }
_this._show($elem.parent('li'));if(_this.options.closeOnClick){var $body=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body');$body.off('.zf.drilldown').on('click.zf.drilldown',function(e){if(e.target===_this.$element[0]||__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0],e.target)){return;}e.preventDefault();_this._hideAll();$body.off('.zf.drilldown');});}});}/**
     * Adds event handlers to the menu element.
     * @function
     * @private
     */},{key:'_registerEvents',value:function _registerEvents(){if(this.options.scrollTop){this._bindHandler=this._scrollTop.bind(this);this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown',this._bindHandler);}this.$element.on('mutateme.zf.trigger',this._resize.bind(this));}/**
     * Scroll to Top of Element or data-scroll-top-element
     * @function
     * @fires Drilldown#scrollme
     */},{key:'_scrollTop',value:function _scrollTop(){var _this=this;var $scrollTopElement=_this.options.scrollTopElement!=''?__WEBPACK_IMPORTED_MODULE_0_jquery___default()(_this.options.scrollTopElement):_this.$element,scrollPos=parseInt($scrollTopElement.offset().top+_this.options.scrollTopOffset,10);__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').stop(true).animate({scrollTop:scrollPos},_this.options.animationDuration,_this.options.animationEasing,function(){/**
          * Fires after the menu has scrolled
          * @event Drilldown#scrollme
          */if(this===__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html')[0])_this.$element.trigger('scrollme.zf.drilldown');});}/**
     * Adds keydown event listener to `li`'s in the menu.
     * @private
     */},{key:'_keyboardEvents',value:function _keyboardEvents(){var _this=this;this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown',function(e){var $element=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),$elements=$element.parent('li').parent('ul').children('li').children('a'),$prevElement,$nextElement;$elements.each(function(i){if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)){$prevElement=$elements.eq(Math.max(0,i-1));$nextElement=$elements.eq(Math.min(i+1,$elements.length-1));return;}});__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e,'Drilldown',{next:function next(){if($element.is(_this.$submenuAnchors)){_this._show($element.parent('li'));$element.parent('li').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($element),function(){$element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();});return true;}},previous:function previous(){_this._hide($element.parent('li').parent('ul'));$element.parent('li').parent('ul').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($element),function(){setTimeout(function(){$element.parent('li').parent('ul').parent('li').children('a').first().focus();},1);});return true;},up:function up(){$prevElement.focus();// Don't tap focus on first element in root ul
return!$element.is(_this.$element.find('> li:first-child > a'));},down:function down(){$nextElement.focus();// Don't tap focus on last element in root ul
return!$element.is(_this.$element.find('> li:last-child > a'));},close:function close(){// Don't close on element in root ul
if(!$element.is(_this.$element.find('> li > a'))){_this._hide($element.parent().parent());$element.parent().parent().siblings('a').focus();}},open:function open(){if(!$element.is(_this.$menuItems)){// not menu item means back button
_this._hide($element.parent('li').parent('ul'));$element.parent('li').parent('ul').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($element),function(){setTimeout(function(){$element.parent('li').parent('ul').parent('li').children('a').first().focus();},1);});return true;}else if($element.is(_this.$submenuAnchors)){_this._show($element.parent('li'));$element.parent('li').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($element),function(){$element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();});return true;}},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}e.stopImmediatePropagation();}});});// end keyboardAccess
}/**
     * Closes all open elements, and returns to root menu.
     * @function
     * @fires Drilldown#closed
     */},{key:'_hideAll',value:function _hideAll(){var $elem=this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');if(this.options.autoHeight)this.$wrapper.css({height:$elem.parent().closest('ul').data('calcHeight')});$elem.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($elem),function(e){$elem.removeClass('is-active is-closing');});/**
       * Fires when the menu is fully closed.
       * @event Drilldown#closed
       */this.$element.trigger('closed.zf.drilldown');}/**
     * Adds event listener for each `back` button, and closes open menus.
     * @function
     * @fires Drilldown#back
     * @param {jQuery} $elem - the current sub-menu to add `back` event.
     */},{key:'_back',value:function _back($elem){var _this=this;$elem.off('click.zf.drilldown');$elem.children('.js-drilldown-back').on('click.zf.drilldown',function(e){e.stopImmediatePropagation();// console.log('mouseup on back');
_this._hide($elem);// If there is a parent submenu, call show
var parentSubMenu=$elem.parent('li').parent('ul').parent('li');if(parentSubMenu.length){_this._show(parentSubMenu);}});}/**
     * Adds event listener to menu items w/o submenus to close open menus on click.
     * @function
     * @private
     */},{key:'_menuLinkEvents',value:function _menuLinkEvents(){var _this=this;this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown',function(e){// e.stopImmediatePropagation();
setTimeout(function(){_this._hideAll();},0);});}/**
     * Opens a submenu.
     * @function
     * @fires Drilldown#open
     * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
     */},{key:'_show',value:function _show($elem){if(this.options.autoHeight)this.$wrapper.css({height:$elem.children('[data-submenu]').data('calcHeight')});$elem.attr('aria-expanded',true);$elem.children('[data-submenu]').addClass('is-active').removeClass('invisible').attr('aria-hidden',false);/**
       * Fires when the submenu has opened.
       * @event Drilldown#open
       */this.$element.trigger('open.zf.drilldown',[$elem]);}},{key:'_hide',/**
     * Hides a submenu
     * @function
     * @fires Drilldown#hide
     * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
     */value:function _hide($elem){if(this.options.autoHeight)this.$wrapper.css({height:$elem.parent().closest('ul').data('calcHeight')});var _this=this;$elem.parent('li').attr('aria-expanded',false);$elem.attr('aria-hidden',true).addClass('is-closing');$elem.addClass('is-closing').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($elem),function(){$elem.removeClass('is-active is-closing');$elem.blur().addClass('invisible');});/**
       * Fires when the submenu has closed.
       * @event Drilldown#hide
       */$elem.trigger('hide.zf.drilldown',[$elem]);}/**
     * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
     * Prevents content jumping.
     * @function
     * @private
     */},{key:'_getMaxDims',value:function _getMaxDims(){var maxHeight=0,result={},_this=this;this.$submenus.add(this.$element).each(function(){var numOfElems=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('li').length;var height=__WEBPACK_IMPORTED_MODULE_4__foundation_util_box__["Box"].GetDimensions(this).height;maxHeight=height>maxHeight?height:maxHeight;if(_this.options.autoHeight){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('calcHeight',height);if(!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).hasClass('is-drilldown-submenu'))result['height']=height;}});if(!this.options.autoHeight)result['min-height']=maxHeight+'px';result['max-width']=this.$element[0].getBoundingClientRect().width+'px';return result;}/**
     * Destroys the Drilldown Menu
     * @function
     */},{key:'_destroy',value:function _destroy(){if(this.options.scrollTop)this.$element.off('.zf.drilldown',this._bindHandler);this._hideAll();this.$element.off('mutateme.zf.trigger');__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Burn(this.$element,'drilldown');this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');this.$submenuAnchors.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).off('.zf.drilldown');});this.$submenus.removeClass('drilldown-submenu-cover-previous invisible');this.$element.find('a').each(function(){var $link=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);$link.removeAttr('tabindex');if($link.data('savedHref')){$link.attr('href',$link.data('savedHref')).removeData('savedHref');}else{return;}});}}]);return Drilldown;}(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__["Plugin"]);Drilldown.defaults={/**
   * Drilldowns depend on styles in order to function properly; in the default build of Foundation these are
   * on the `drilldown` class. This option auto-applies this class to the drilldown upon initialization.
   * @option
   * @type {boolian}
   * @default true
   */autoApplyClass:true,/**
   * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
   * @option
   * @type {string}
   * @default '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>'
   */backButton:'<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',/**
   * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.
   * @option
   * @type {string}
   * @default top
   */backButtonPosition:'top',/**
   * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
   * @option
   * @type {string}
   * @default '<div></div>'
   */wrapper:'<div></div>',/**
   * Adds the parent link to the submenu.
   * @option
   * @type {boolean}
   * @default false
   */parentLink:false,/**
   * Allow the menu to return to root list on body click.
   * @option
   * @type {boolean}
   * @default false
   */closeOnClick:false,/**
   * Allow the menu to auto adjust height.
   * @option
   * @type {boolean}
   * @default false
   */autoHeight:false,/**
   * Animate the auto adjust height.
   * @option
   * @type {boolean}
   * @default false
   */animateHeight:false,/**
   * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button
   * @option
   * @type {boolean}
   * @default false
   */scrollTop:false,/**
   * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken
   * @option
   * @type {string}
   * @default ''
   */scrollTopElement:'',/**
   * ScrollTop offset
   * @option
   * @type {number}
   * @default 0
   */scrollTopOffset:0,/**
   * Scroll animation duration
   * @option
   * @type {number}
   * @default 500
   */animationDuration:500,/**
   * Scroll animation easing. Can be `'swing'` or `'linear'`.
   * @option
   * @type {string}
   * @see {@link https://api.jquery.com/animate|JQuery animate}
   * @default 'swing'
   */animationEasing:'swing'// holdOpen: false
};/***/},/***/5:/***/function _(module,exports){module.exports={Keyboard:window.Foundation.Keyboard};/***/},/***/8:/***/function _(module,exports){module.exports={Box:window.Foundation.Box};/***/},/***/82:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(16);/***/},/***/9:/***/function _(module,exports){module.exports={Nest:window.Foundation.Nest};/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=83);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/11:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Positionable;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__=__webpack_require__(8);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var POSITIONS=['left','right','top','bottom'];var VERTICAL_ALIGNMENTS=['top','bottom','center'];var HORIZONTAL_ALIGNMENTS=['left','right','center'];var ALIGNMENTS={'left':VERTICAL_ALIGNMENTS,'right':VERTICAL_ALIGNMENTS,'top':HORIZONTAL_ALIGNMENTS,'bottom':HORIZONTAL_ALIGNMENTS};function nextItem(item,array){var currentIdx=array.indexOf(item);if(currentIdx===array.length-1){return array[0];}else{return array[currentIdx+1];}}var Positionable=function(_Plugin){_inherits(Positionable,_Plugin);function Positionable(){_classCallCheck(this,Positionable);return _possibleConstructorReturn(this,(Positionable.__proto__||Object.getPrototypeOf(Positionable)).apply(this,arguments));}_createClass(Positionable,[{key:'_init',/**
     * Abstract class encapsulating the tether-like explicit positioning logic
     * including repositioning based on overlap.
     * Expects classes to define defaults for vOffset, hOffset, position,
     * alignment, allowOverlap, and allowBottomOverlap. They can do this by
     * extending the defaults, or (for now recommended due to the way docs are
     * generated) by explicitly declaring them.
     *
     **/value:function _init(){this.triedPositions={};this.position=this.options.position==='auto'?this._getDefaultPosition():this.options.position;this.alignment=this.options.alignment==='auto'?this._getDefaultAlignment():this.options.alignment;}},{key:'_getDefaultPosition',value:function _getDefaultPosition(){return'bottom';}},{key:'_getDefaultAlignment',value:function _getDefaultAlignment(){switch(this.position){case'bottom':case'top':return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["rtl"])()?'right':'left';case'left':case'right':return'bottom';}}/**
     * Adjusts the positionable possible positions by iterating through alignments
     * and positions.
     * @function
     * @private
     */},{key:'_reposition',value:function _reposition(){if(this._alignmentsExhausted(this.position)){this.position=nextItem(this.position,POSITIONS);this.alignment=ALIGNMENTS[this.position][0];}else{this._realign();}}/**
     * Adjusts the dropdown pane possible positions by iterating through alignments
     * on the current position.
     * @function
     * @private
     */},{key:'_realign',value:function _realign(){this._addTriedPosition(this.position,this.alignment);this.alignment=nextItem(this.alignment,ALIGNMENTS[this.position]);}},{key:'_addTriedPosition',value:function _addTriedPosition(position,alignment){this.triedPositions[position]=this.triedPositions[position]||[];this.triedPositions[position].push(alignment);}},{key:'_positionsExhausted',value:function _positionsExhausted(){var isExhausted=true;for(var i=0;i<POSITIONS.length;i++){isExhausted=isExhausted&&this._alignmentsExhausted(POSITIONS[i]);}return isExhausted;}},{key:'_alignmentsExhausted',value:function _alignmentsExhausted(position){return this.triedPositions[position]&&this.triedPositions[position].length==ALIGNMENTS[position].length;}// When we're trying to center, we don't want to apply offset that's going to
// take us just off center, so wrap around to return 0 for the appropriate
// offset in those alignments.  TODO: Figure out if we want to make this
// configurable behavior... it feels more intuitive, especially for tooltips, but
// it's possible someone might actually want to start from center and then nudge
// slightly off.
},{key:'_getVOffset',value:function _getVOffset(){return this.options.vOffset;}},{key:'_getHOffset',value:function _getHOffset(){return this.options.hOffset;}},{key:'_setPosition',value:function _setPosition($anchor,$element,$parent){if($anchor.attr('aria-expanded')==='false'){return false;}var $eleDims=__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetDimensions($element),$anchorDims=__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetDimensions($anchor);$element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element,$anchor,this.position,this.alignment,this._getVOffset(),this._getHOffset()));if(!this.options.allowOverlap){var overlaps={};var minOverlap=100000000;// default coordinates to how we start, in case we can't figure out better
var minCoordinates={position:this.position,alignment:this.alignment};while(!this._positionsExhausted()){var overlap=__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].OverlapArea($element,$parent,false,false,this.options.allowBottomOverlap);if(overlap===0){return;}if(overlap<minOverlap){minOverlap=overlap;minCoordinates={position:this.position,alignment:this.alignment};}this._reposition();$element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element,$anchor,this.position,this.alignment,this._getVOffset(),this._getHOffset()));}// If we get through the entire loop, there was no non-overlapping
// position available. Pick the version with least overlap.
this.position=minCoordinates.position;this.alignment=minCoordinates.alignment;$element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element,$anchor,this.position,this.alignment,this._getVOffset(),this._getHOffset()));}}}]);return Positionable;}(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__["Plugin"]);Positionable.defaults={/**
   * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */position:'auto',/**
   * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */alignment:'auto',/**
   * Allow overlap of container/window. If false, dropdown positionable first
   * try to position as defined by data-position and data-alignment, but
   * reposition if it would cause an overflow.
   * @option
   * @type {boolean}
   * @default false
   */allowOverlap:false,/**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * @option
   * @type {boolean}
   * @default true
   */allowBottomOverlap:true,/**
   * Number of pixels the positionable should be separated vertically from anchor
   * @option
   * @type {number}
   * @default 0
   */vOffset:0,/**
   * Number of pixels the positionable should be separated horizontally from anchor
   * @option
   * @type {number}
   * @default 0
   */hOffset:0};/***/},/***/17:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_dropdown__=__webpack_require__(47);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_dropdown__["a"/* Dropdown */],'Dropdown');/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/4:/***/function _(module,exports){module.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};/***/},/***/47:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Dropdown;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_positionable__=__webpack_require__(11);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__=__webpack_require__(7);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Dropdown module.
 * @module foundation.dropdown
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.triggers
 */var Dropdown=function(_Positionable){_inherits(Dropdown,_Positionable);function Dropdown(){_classCallCheck(this,Dropdown);return _possibleConstructorReturn(this,(Dropdown.__proto__||Object.getPrototypeOf(Dropdown)).apply(this,arguments));}_createClass(Dropdown,[{key:'_setup',/**
     * Creates a new instance of a dropdown.
     * @class
     * @name Dropdown
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Dropdown.defaults,this.$element.data(),options);this.className='Dropdown';// ie9 back compat
// Triggers init is idempotent, just need to make sure it is initialized
__WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__["a"/* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);this._init();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Dropdown',{'ENTER':'open','SPACE':'open','ESCAPE':'close'});}/**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */},{key:'_init',value:function _init(){var $id=this.$element.attr('id');this.$anchors=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="'+$id+'"]').length?__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="'+$id+'"]'):__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="'+$id+'"]');this.$anchors.attr({'aria-controls':$id,'data-is-focus':false,'data-yeti-box':$id,'aria-haspopup':true,'aria-expanded':false});this._setCurrentAnchor(this.$anchors.first());if(this.options.parentClass){this.$parent=this.$element.parents('.'+this.options.parentClass);}else{this.$parent=null;}this.$element.attr({'aria-hidden':'true','data-yeti-box':$id,'data-resize':$id,'aria-labelledby':this.$currentAnchor.id||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6,'dd-anchor')});_get(Dropdown.prototype.__proto__||Object.getPrototypeOf(Dropdown.prototype),'_init',this).call(this);this._events();}},{key:'_getDefaultPosition',value:function _getDefaultPosition(){// handle legacy classnames
var position=this.$element[0].className.match(/(top|left|right|bottom)/g);if(position){return position[0];}else{return'bottom';}}},{key:'_getDefaultAlignment',value:function _getDefaultAlignment(){// handle legacy float approach
var horizontalPosition=/float-(\S+)/.exec(this.$currentAnchor.className);if(horizontalPosition){return horizontalPosition[1];}return _get(Dropdown.prototype.__proto__||Object.getPrototypeOf(Dropdown.prototype),'_getDefaultAlignment',this).call(this);}/**
     * Sets the position and orientation of the dropdown pane, checks for collisions if allow-overlap is not true.
     * Recursively calls itself if a collision is detected, with a new position class.
     * @function
     * @private
     */},{key:'_setPosition',value:function _setPosition(){_get(Dropdown.prototype.__proto__||Object.getPrototypeOf(Dropdown.prototype),'_setPosition',this).call(this,this.$currentAnchor,this.$element,this.$parent);}/**
     * Make it a current anchor.
     * Current anchor as the reference for the position of Dropdown panes.
     * @param {HTML} el - DOM element of the anchor.
     * @function
     * @private
     */},{key:'_setCurrentAnchor',value:function _setCurrentAnchor(el){this.$currentAnchor=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(el);}/**
     * Adds event listeners to the element utilizing the triggers utility library.
     * @function
     * @private
     */},{key:'_events',value:function _events(){var _this=this;this.$element.on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':this.close.bind(this),'toggle.zf.trigger':this.toggle.bind(this),'resizeme.zf.trigger':this._setPosition.bind(this)});this.$anchors.off('click.zf.trigger').on('click.zf.trigger',function(){_this._setCurrentAnchor(this);});if(this.options.hover){this.$anchors.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown',function(){_this._setCurrentAnchor(this);var bodyData=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').data();if(typeof bodyData.whatinput==='undefined'||bodyData.whatinput==='mouse'){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.open();_this.$anchors.data('hover',true);},_this.options.hoverDelay);}}).on('mouseleave.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.close();_this.$anchors.data('hover',false);},_this.options.hoverDelay);});if(this.options.hoverPane){this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown',function(){clearTimeout(_this.timeout);}).on('mouseleave.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.close();_this.$anchors.data('hover',false);},_this.options.hoverDelay);});}}this.$anchors.add(this.$element).on('keydown.zf.dropdown',function(e){var $target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),visibleFocusableElements=__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].findFocusable(_this.$element);__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e,'Dropdown',{open:function open(){if($target.is(_this.$anchors)){_this.open();_this.$element.attr('tabindex',-1).focus();e.preventDefault();}},close:function close(){_this.close();_this.$anchors.focus();}});});}/**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */},{key:'_addBodyHandler',value:function _addBodyHandler(){var $body=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).not(this.$element),_this=this;$body.off('click.zf.dropdown').on('click.zf.dropdown',function(e){if(_this.$anchors.is(e.target)||_this.$anchors.find(e.target).length){return;}if(_this.$element.find(e.target).length){return;}_this.close();$body.off('click.zf.dropdown');});}/**
     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
     * @function
     * @fires Dropdown#closeme
     * @fires Dropdown#show
     */},{key:'open',value:function open(){// var _this = this;
/**
       * Fires to close other open dropdowns, typically when dropdown is opening
       * @event Dropdown#closeme
       */this.$element.trigger('closeme.zf.dropdown',this.$element.attr('id'));this.$anchors.addClass('hover').attr({'aria-expanded':true});// this.$element/*.show()*/;
this.$element.addClass('is-opening');this._setPosition();this.$element.removeClass('is-opening').addClass('is-open').attr({'aria-hidden':false});if(this.options.autoFocus){var $focusable=__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].findFocusable(this.$element);if($focusable.length){$focusable.eq(0).focus();}}if(this.options.closeOnClick){this._addBodyHandler();}if(this.options.trapFocus){__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].trapFocus(this.$element);}/**
       * Fires once the dropdown is visible.
       * @event Dropdown#show
       */this.$element.trigger('show.zf.dropdown',[this.$element]);}/**
     * Closes the open dropdown pane.
     * @function
     * @fires Dropdown#hide
     */},{key:'close',value:function close(){if(!this.$element.hasClass('is-open')){return false;}this.$element.removeClass('is-open').attr({'aria-hidden':true});this.$anchors.removeClass('hover').attr('aria-expanded',false);/**
       * Fires once the dropdown is no longer visible.
       * @event Dropdown#hide
       */this.$element.trigger('hide.zf.dropdown',[this.$element]);if(this.options.trapFocus){__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].releaseFocus(this.$element);}}/**
     * Toggles the dropdown pane's visibility.
     * @function
     */},{key:'toggle',value:function toggle(){if(this.$element.hasClass('is-open')){if(this.$anchors.data('hover'))return;this.close();}else{this.open();}}/**
     * Destroys the dropdown.
     * @function
     */},{key:'_destroy',value:function _destroy(){this.$element.off('.zf.trigger').hide();this.$anchors.off('.zf.dropdown');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).off('click.zf.dropdown');}}]);return Dropdown;}(__WEBPACK_IMPORTED_MODULE_3__foundation_positionable__["a"/* Positionable */]);Dropdown.defaults={/**
   * Class that designates bounding container of Dropdown (default: window)
   * @option
   * @type {?string}
   * @default null
   */parentClass:null,/**
   * Amount of time to delay opening a submenu on hover event.
   * @option
   * @type {number}
   * @default 250
   */hoverDelay:250,/**
   * Allow submenus to open on hover events
   * @option
   * @type {boolean}
   * @default false
   */hover:false,/**
   * Don't close dropdown when hovering over dropdown pane
   * @option
   * @type {boolean}
   * @default false
   */hoverPane:false,/**
   * Number of pixels between the dropdown pane and the triggering element on open.
   * @option
   * @type {number}
   * @default 0
   */vOffset:0,/**
   * Number of pixels between the dropdown pane and the triggering element on open.
   * @option
   * @type {number}
   * @default 0
   */hOffset:0,/**
   * DEPRECATED: Class applied to adjust open position.
   * @option
   * @type {string}
   * @default ''
   */positionClass:'',/**
   * Position of dropdown. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */position:'auto',/**
   * Alignment of dropdown relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */alignment:'auto',/**
   * Allow overlap of container/window. If false, dropdown will first try to position as defined by data-position and data-alignment, but reposition if it would cause an overflow.
   * @option
   * @type {boolean}
   * @default false
   */allowOverlap:false,/**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * @option
   * @type {boolean}
   * @default true
   */allowBottomOverlap:true,/**
   * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
   * @option
   * @type {boolean}
   * @default false
   */trapFocus:false,/**
   * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
   * @option
   * @type {boolean}
   * @default false
   */autoFocus:false,/**
   * Allows a click on the body to close the dropdown.
   * @option
   * @type {boolean}
   * @default false
   */closeOnClick:false};/***/},/***/5:/***/function _(module,exports){module.exports={Keyboard:window.Foundation.Keyboard};/***/},/***/7:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Triggers;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};var Triggers={Listeners:{Basic:{},Global:{}},Initializers:{}};Triggers.Listeners.Basic={openListener:function openListener(){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'open');},closeListener:function closeListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'close');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');}},toggleListener:function toggleListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'toggle');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');}},closeableListener:function closeableListener(e){e.stopPropagation();var animation=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');if(animation!==''){__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),animation,function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');});}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');}},toggleFocusListener:function toggleFocusListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id).triggerHandler('toggle.zf.trigger',[__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);}};// Elements with [data-open] will reveal a plugin that supports it when clicked.
Triggers.Initializers.addOpenListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.openListener);$elem.on('click.zf.trigger','[data-open]',Triggers.Listeners.Basic.openListener);};// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
Triggers.Initializers.addCloseListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.closeListener);$elem.on('click.zf.trigger','[data-close]',Triggers.Listeners.Basic.closeListener);};// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
Triggers.Initializers.addToggleListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.toggleListener);$elem.on('click.zf.trigger','[data-toggle]',Triggers.Listeners.Basic.toggleListener);};// Elements with [data-closable] will respond to close.zf.trigger events.
Triggers.Initializers.addCloseableListener=function($elem){$elem.off('close.zf.trigger',Triggers.Listeners.Basic.closeableListener);$elem.on('close.zf.trigger','[data-closeable], [data-closable]',Triggers.Listeners.Basic.closeableListener);};// Elements with [data-toggle-focus] will respond to coming in and out of focus
Triggers.Initializers.addToggleFocusListener=function($elem){$elem.off('focus.zf.trigger blur.zf.trigger',Triggers.Listeners.Basic.toggleFocusListener);$elem.on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',Triggers.Listeners.Basic.toggleFocusListener);};// More Global/complex listeners and triggers
Triggers.Listeners.Global={resizeListener:function resizeListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event
$nodes.attr('data-events',"resize");},scrollListener:function scrollListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event
$nodes.attr('data-events',"scroll");},closeMeListener:function closeMeListener(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-'+plugin+']').not('[data-yeti-box="'+pluginId+'"]');plugins.each(function(){var _this=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);_this.triggerHandler('close.zf.trigger',[_this]);});}// Global, parses whole document.
};Triggers.Initializers.addClosemeListener=function(pluginName){var yetiBoxes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners,Triggers.Listeners.Global.closeMeListener);}};function debounceGlobalListener(debounce,trigger,listener){var timer=void 0,args=Array.prototype.slice.call(arguments,3);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger,function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){listener.apply(null,args);},debounce||10);//default time to emit scroll event
});}Triggers.Initializers.addResizeListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');if($nodes.length){debounceGlobalListener(debounce,'resize.zf.trigger',Triggers.Listeners.Global.resizeListener,$nodes);}};Triggers.Initializers.addScrollListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');if($nodes.length){debounceGlobalListener(debounce,'scroll.zf.trigger',Triggers.Listeners.Global.scrollListener,$nodes);}};Triggers.Initializers.addMutationEventsListener=function($elem){if(!MutationObserver){return false;}var $nodes=$elem.find('[data-resize], [data-scroll], [data-mutate]');//element callback
var listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);//trigger the event handler for the element depending on type
switch(mutationRecordsList[0].type){case"attributes":if($target.attr("data-events")==="scroll"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);}if($target.attr("data-events")==="resize"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('resizeme.zf.trigger',[$target]);}if(mutationRecordsList[0].attributeName==="style"){$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);}break;case"childList":$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);break;default:return false;//nothing
}};if($nodes.length){//for each element that needs to listen for resizing, scrolling, or mutation add a single observer
for(var i=0;i<=$nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe($nodes[i],{attributes:true,childList:true,characterData:false,subtree:true,attributeFilter:["data-events","style"]});}}};Triggers.Initializers.addSimpleListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addOpenListener($document);Triggers.Initializers.addCloseListener($document);Triggers.Initializers.addToggleListener($document);Triggers.Initializers.addCloseableListener($document);Triggers.Initializers.addToggleFocusListener($document);};Triggers.Initializers.addGlobalListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addMutationEventsListener($document);Triggers.Initializers.addResizeListener();Triggers.Initializers.addScrollListener();Triggers.Initializers.addClosemeListener();};Triggers.init=function($,Foundation){if(typeof $.triggersInitialized==='undefined'){var $document=$(document);if(document.readyState==="complete"){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();}else{$(window).on('load',function(){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();});}$.triggersInitialized=true;}if(Foundation){Foundation.Triggers=Triggers;// Legacy included to be backwards compatible for now.
Foundation.IHearYou=Triggers.Initializers.addGlobalListeners;}};/***/},/***/8:/***/function _(module,exports){module.exports={Box:window.Foundation.Box};/***/},/***/83:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(17);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=84);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/18:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_dropdownMenu__=__webpack_require__(48);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_dropdownMenu__["a"/* DropdownMenu */],'DropdownMenu');/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/48:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return DropdownMenu;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__=__webpack_require__(8);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_box___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_box__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * DropdownMenu module.
 * @module foundation.dropdown-menu
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.nest
 */var DropdownMenu=function(_Plugin){_inherits(DropdownMenu,_Plugin);function DropdownMenu(){_classCallCheck(this,DropdownMenu);return _possibleConstructorReturn(this,(DropdownMenu.__proto__||Object.getPrototypeOf(DropdownMenu)).apply(this,arguments));}_createClass(DropdownMenu,[{key:'_setup',/**
     * Creates a new instance of DropdownMenu.
     * @class
     * @name DropdownMenu
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},DropdownMenu.defaults,this.$element.data(),options);this.className='DropdownMenu';// ie9 back compat
this._init();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('DropdownMenu',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'previous','ESCAPE':'close'});}/**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Feather(this.$element,'dropdown');var subs=this.$element.find('li.is-dropdown-submenu-parent');this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');this.$menuItems=this.$element.find('[role="menuitem"]');this.$tabs=this.$element.children('[role="menuitem"]');this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);if(this.options.alignment==='auto'){if(this.$element.hasClass(this.options.rightClass)||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__["rtl"])()||this.$element.parents('.top-bar-right').is('*')){this.options.alignment='right';subs.addClass('opens-left');}else{this.options.alignment='left';subs.addClass('opens-right');}}else{if(this.options.alignment==='right'){subs.addClass('opens-left');}else{subs.addClass('opens-right');}}this.changed=false;this._events();}},{key:'_isVertical',value:function _isVertical(){return this.$tabs.css('display')==='block'||this.$element.css('flex-direction')==='column';}},{key:'_isRtl',value:function _isRtl(){return this.$element.hasClass('align-right')||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__["rtl"])()&&!this.$element.hasClass('align-left');}/**
     * Adds event listeners to elements within the menu
     * @private
     * @function
     */},{key:'_events',value:function _events(){var _this=this,hasTouch='ontouchstart'in window||typeof window.ontouchstart!=='undefined',parClass='is-dropdown-submenu-parent';// used for onClick and in the keyboard handlers
var handleClickFn=function handleClickFn(e){var $elem=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul','.'+parClass),hasSub=$elem.hasClass(parClass),hasClicked=$elem.attr('data-is-click')==='true',$sub=$elem.children('.is-dropdown-submenu');if(hasSub){if(hasClicked){if(!_this.options.closeOnClick||!_this.options.clickOpen&&!hasTouch||_this.options.forceFollow&&hasTouch){return;}else{e.stopImmediatePropagation();e.preventDefault();_this._hide($elem);}}else{e.preventDefault();e.stopImmediatePropagation();_this._show($sub);$elem.add($elem.parentsUntil(_this.$element,'.'+parClass)).attr('data-is-click',true);}}};if(this.options.clickOpen||hasTouch){this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu',handleClickFn);}// Handle Leaf element Clicks
if(_this.options.closeOnClickInside){this.$menuItems.on('click.zf.dropdownmenu',function(e){var $elem=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),hasSub=$elem.hasClass(parClass);if(!hasSub){_this._hide();}});}if(!this.options.disableHover){this.$menuItems.on('mouseenter.zf.dropdownmenu',function(e){var $elem=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),hasSub=$elem.hasClass(parClass);if(hasSub){clearTimeout($elem.data('_delay'));$elem.data('_delay',setTimeout(function(){_this._show($elem.children('.is-dropdown-submenu'));},_this.options.hoverDelay));}}).on('mouseleave.zf.dropdownmenu',function(e){var $elem=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),hasSub=$elem.hasClass(parClass);if(hasSub&&_this.options.autoclose){if($elem.attr('data-is-click')==='true'&&_this.options.clickOpen){return false;}clearTimeout($elem.data('_delay'));$elem.data('_delay',setTimeout(function(){_this._hide($elem);},_this.options.closingTime));}});}this.$menuItems.on('keydown.zf.dropdownmenu',function(e){var $element=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul','[role="menuitem"]'),isTab=_this.$tabs.index($element)>-1,$elements=isTab?_this.$tabs:$element.siblings('li').add($element),$prevElement,$nextElement;$elements.each(function(i){if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)){$prevElement=$elements.eq(i-1);$nextElement=$elements.eq(i+1);return;}});var nextSibling=function nextSibling(){$nextElement.children('a:first').focus();e.preventDefault();},prevSibling=function prevSibling(){$prevElement.children('a:first').focus();e.preventDefault();},openSub=function openSub(){var $sub=$element.children('ul.is-dropdown-submenu');if($sub.length){_this._show($sub);$element.find('li > a:first').focus();e.preventDefault();}else{return;}},closeSub=function closeSub(){//if ($element.is(':first-child')) {
var close=$element.parent('ul').parent('li');close.children('a:first').focus();_this._hide(close);e.preventDefault();//}
};var functions={open:openSub,close:function close(){_this._hide(_this.$element);_this.$menuItems.eq(0).children('a').focus();// focus to first element
e.preventDefault();},handled:function handled(){e.stopImmediatePropagation();}};if(isTab){if(_this._isVertical()){// vertical menu
if(_this._isRtl()){// right aligned
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions,{down:nextSibling,up:prevSibling,next:closeSub,previous:openSub});}else{// left aligned
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions,{down:nextSibling,up:prevSibling,next:openSub,previous:closeSub});}}else{// horizontal menu
if(_this._isRtl()){// right aligned
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions,{next:prevSibling,previous:nextSibling,down:openSub,up:closeSub});}else{// left aligned
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions,{next:nextSibling,previous:prevSibling,down:openSub,up:closeSub});}}}else{// not tabs -> one sub
if(_this._isRtl()){// right aligned
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions,{next:closeSub,previous:openSub,down:nextSibling,up:prevSibling});}else{// left aligned
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions,{next:openSub,previous:closeSub,down:nextSibling,up:prevSibling});}}__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e,'DropdownMenu',functions);});}/**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */},{key:'_addBodyHandler',value:function _addBodyHandler(){var $body=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body),_this=this;$body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu',function(e){var $link=_this.$element.find(e.target);if($link.length){return;}_this._hide();$body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');});}/**
     * Opens a dropdown pane, and checks for collisions first.
     * @param {jQuery} $sub - ul element that is a submenu to show
     * @function
     * @private
     * @fires DropdownMenu#show
     */},{key:'_show',value:function _show($sub){var idx=this.$tabs.index(this.$tabs.filter(function(i,el){return __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).find($sub).length>0;}));var $sibs=$sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');this._hide($sibs,idx);$sub.css('visibility','hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');var clear=__WEBPACK_IMPORTED_MODULE_3__foundation_util_box__["Box"].ImNotTouchingYou($sub,null,true);if(!clear){var oldClass=this.options.alignment==='left'?'-right':'-left',$parentLi=$sub.parent('.is-dropdown-submenu-parent');$parentLi.removeClass('opens'+oldClass).addClass('opens-'+this.options.alignment);clear=__WEBPACK_IMPORTED_MODULE_3__foundation_util_box__["Box"].ImNotTouchingYou($sub,null,true);if(!clear){$parentLi.removeClass('opens-'+this.options.alignment).addClass('opens-inner');}this.changed=true;}$sub.css('visibility','');if(this.options.closeOnClick){this._addBodyHandler();}/**
       * Fires when the new dropdown pane is visible.
       * @event DropdownMenu#show
       */this.$element.trigger('show.zf.dropdownmenu',[$sub]);}/**
     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
     * @function
     * @param {jQuery} $elem - element with a submenu to hide
     * @param {Number} idx - index of the $tabs collection to hide
     * @private
     */},{key:'_hide',value:function _hide($elem,idx){var $toClose;if($elem&&$elem.length){$toClose=$elem;}else if(idx!==undefined){$toClose=this.$tabs.not(function(i,el){return i===idx;});}else{$toClose=this.$element;}var somethingToClose=$toClose.hasClass('is-active')||$toClose.find('.is-active').length>0;if(somethingToClose){$toClose.find('li.is-active').add($toClose).attr({'data-is-click':false}).removeClass('is-active');$toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');if(this.changed||$toClose.find('opens-inner').length){var oldClass=this.options.alignment==='left'?'right':'left';$toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-'+this.options.alignment).addClass('opens-'+oldClass);this.changed=false;}/**
         * Fires when the open menus are closed.
         * @event DropdownMenu#hide
         */this.$element.trigger('hide.zf.dropdownmenu',[$toClose]);}}/**
     * Destroys the plugin.
     * @function
     */},{key:'_destroy',value:function _destroy(){this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).off('.zf.dropdownmenu');__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Burn(this.$element,'dropdown');}}]);return DropdownMenu;}(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__["Plugin"]);/**
 * Default settings for plugin
 */DropdownMenu.defaults={/**
   * Disallows hover events from opening submenus
   * @option
   * @type {boolean}
   * @default false
   */disableHover:false,/**
   * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
   * @option
   * @type {boolean}
   * @default true
   */autoclose:true,/**
   * Amount of time to delay opening a submenu on hover event.
   * @option
   * @type {number}
   * @default 50
   */hoverDelay:50,/**
   * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
   * @option
   * @type {boolean}
   * @default false
   */clickOpen:false,/**
   * Amount of time to delay closing a submenu on a mouseleave event.
   * @option
   * @type {number}
   * @default 500
   */closingTime:500,/**
   * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'auto'`, `'left'` or `'right'`.
   * @option
   * @type {string}
   * @default 'auto'
   */alignment:'auto',/**
   * Allow clicks on the body to close any open submenus.
   * @option
   * @type {boolean}
   * @default true
   */closeOnClick:true,/**
   * Allow clicks on leaf anchor links to close any open submenus.
   * @option
   * @type {boolean}
   * @default true
   */closeOnClickInside:true,/**
   * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
   * @option
   * @type {string}
   * @default 'vertical'
   */verticalClass:'vertical',/**
   * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
   * @option
   * @type {string}
   * @default 'align-right'
   */rightClass:'align-right',/**
   * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
   * @option
   * @type {boolean}
   * @default true
   */forceFollow:true};/***/},/***/5:/***/function _(module,exports){module.exports={Keyboard:window.Foundation.Keyboard};/***/},/***/8:/***/function _(module,exports){module.exports={Box:window.Foundation.Box};/***/},/***/84:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(18);/***/},/***/9:/***/function _(module,exports){module.exports={Nest:window.Foundation.Nest};/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=85);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/10:/***/function _(module,exports){module.exports={onImagesLoaded:window.Foundation.onImagesLoaded};/***/},/***/19:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_equalizer__=__webpack_require__(49);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_equalizer__["a"/* Equalizer */],'Equalizer');/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/49:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Equalizer;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Equalizer module.
 * @module foundation.equalizer
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.imageLoader if equalizer contains images
 */var Equalizer=function(_Plugin){_inherits(Equalizer,_Plugin);function Equalizer(){_classCallCheck(this,Equalizer);return _possibleConstructorReturn(this,(Equalizer.__proto__||Object.getPrototypeOf(Equalizer)).apply(this,arguments));}_createClass(Equalizer,[{key:'_setup',/**
     * Creates a new instance of Equalizer.
     * @class
     * @name Equalizer
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Equalizer.defaults,this.$element.data(),options);this.className='Equalizer';// ie9 back compat
this._init();}/**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */},{key:'_init',value:function _init(){var eqId=this.$element.attr('data-equalizer')||'';var $watched=this.$element.find('[data-equalizer-watch="'+eqId+'"]');__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();this.$watched=$watched.length?$watched:this.$element.find('[data-equalizer-watch]');this.$element.attr('data-resize',eqId||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6,'eq'));this.$element.attr('data-mutate',eqId||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6,'eq'));this.hasNested=this.$element.find('[data-equalizer]').length>0;this.isNested=this.$element.parentsUntil(document.body,'[data-equalizer]').length>0;this.isOn=false;this._bindHandler={onResizeMeBound:this._onResizeMe.bind(this),onPostEqualizedBound:this._onPostEqualized.bind(this)};var imgs=this.$element.find('img');var tooSmall;if(this.options.equalizeOn){tooSmall=this._checkMQ();__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery',this._checkMQ.bind(this));}else{this._events();}if(tooSmall!==undefined&&tooSmall===false||tooSmall===undefined){if(imgs.length){__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__["onImagesLoaded"])(imgs,this._reflow.bind(this));}else{this._reflow();}}}/**
     * Removes event listeners if the breakpoint is too small.
     * @private
     */},{key:'_pauseEvents',value:function _pauseEvents(){this.isOn=false;this.$element.off({'.zf.equalizer':this._bindHandler.onPostEqualizedBound,'resizeme.zf.trigger':this._bindHandler.onResizeMeBound,'mutateme.zf.trigger':this._bindHandler.onResizeMeBound});}/**
     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
     * @private
     */},{key:'_onResizeMe',value:function _onResizeMe(e){this._reflow();}/**
     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
     * @private
     */},{key:'_onPostEqualized',value:function _onPostEqualized(e){if(e.target!==this.$element[0]){this._reflow();}}/**
     * Initializes events for Equalizer.
     * @private
     */},{key:'_events',value:function _events(){var _this=this;this._pauseEvents();if(this.hasNested){this.$element.on('postequalized.zf.equalizer',this._bindHandler.onPostEqualizedBound);}else{this.$element.on('resizeme.zf.trigger',this._bindHandler.onResizeMeBound);this.$element.on('mutateme.zf.trigger',this._bindHandler.onResizeMeBound);}this.isOn=true;}/**
     * Checks the current breakpoint to the minimum required size.
     * @private
     */},{key:'_checkMQ',value:function _checkMQ(){var tooSmall=!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].is(this.options.equalizeOn);if(tooSmall){if(this.isOn){this._pauseEvents();this.$watched.css('height','auto');}}else{if(!this.isOn){this._events();}}return tooSmall;}/**
     * A noop version for the plugin
     * @private
     */},{key:'_killswitch',value:function _killswitch(){return;}/**
     * Calls necessary functions to update Equalizer upon DOM change
     * @private
     */},{key:'_reflow',value:function _reflow(){if(!this.options.equalizeOnStack){if(this._isStacked()){this.$watched.css('height','auto');return false;}}if(this.options.equalizeByRow){this.getHeightsByRow(this.applyHeightByRow.bind(this));}else{this.getHeights(this.applyHeight.bind(this));}}/**
     * Manually determines if the first 2 elements are *NOT* stacked.
     * @private
     */},{key:'_isStacked',value:function _isStacked(){if(!this.$watched[0]||!this.$watched[1]){return true;}return this.$watched[0].getBoundingClientRect().top!==this.$watched[1].getBoundingClientRect().top;}/**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} heights - An array of heights of children within Equalizer container
     */},{key:'getHeights',value:function getHeights(cb){var heights=[];for(var i=0,len=this.$watched.length;i<len;i++){this.$watched[i].style.height='auto';heights.push(this.$watched[i].offsetHeight);}cb(heights);}/**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     */},{key:'getHeightsByRow',value:function getHeightsByRow(cb){var lastElTopOffset=this.$watched.length?this.$watched.first().offset().top:0,groups=[],group=0;//group by Row
groups[group]=[];for(var i=0,len=this.$watched.length;i<len;i++){this.$watched[i].style.height='auto';//maybe could use this.$watched[i].offsetTop
var elOffsetTop=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$watched[i]).offset().top;if(elOffsetTop!=lastElTopOffset){group++;groups[group]=[];lastElTopOffset=elOffsetTop;}groups[group].push([this.$watched[i],this.$watched[i].offsetHeight]);}for(var j=0,ln=groups.length;j<ln;j++){var heights=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[j]).map(function(){return this[1];}).get();var max=Math.max.apply(null,heights);groups[j].push(max);}cb(groups);}/**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest
     * @param {array} heights - An array of heights of children within Equalizer container
     * @fires Equalizer#preequalized
     * @fires Equalizer#postequalized
     */},{key:'applyHeight',value:function applyHeight(heights){var max=Math.max.apply(null,heights);/**
       * Fires before the heights are applied
       * @event Equalizer#preequalized
       */this.$element.trigger('preequalized.zf.equalizer');this.$watched.css('height',max);/**
       * Fires when the heights have been applied
       * @event Equalizer#postequalized
       */this.$element.trigger('postequalized.zf.equalizer');}/**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     * @fires Equalizer#preequalized
     * @fires Equalizer#preequalizedrow
     * @fires Equalizer#postequalizedrow
     * @fires Equalizer#postequalized
     */},{key:'applyHeightByRow',value:function applyHeightByRow(groups){/**
       * Fires before the heights are applied
       */this.$element.trigger('preequalized.zf.equalizer');for(var i=0,len=groups.length;i<len;i++){var groupsILength=groups[i].length,max=groups[i][groupsILength-1];if(groupsILength<=2){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[i][0][0]).css({'height':'auto'});continue;}/**
          * Fires before the heights per row are applied
          * @event Equalizer#preequalizedrow
          */this.$element.trigger('preequalizedrow.zf.equalizer');for(var j=0,lenJ=groupsILength-1;j<lenJ;j++){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[i][j][0]).css({'height':max});}/**
          * Fires when the heights per row have been applied
          * @event Equalizer#postequalizedrow
          */this.$element.trigger('postequalizedrow.zf.equalizer');}/**
       * Fires when the heights have been applied
       */this.$element.trigger('postequalized.zf.equalizer');}/**
     * Destroys an instance of Equalizer.
     * @function
     */},{key:'_destroy',value:function _destroy(){this._pauseEvents();this.$watched.css('height','auto');}}]);return Equalizer;}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);/**
 * Default settings for plugin
 */Equalizer.defaults={/**
   * Enable height equalization when stacked on smaller screens.
   * @option
   * @type {boolean}
   * @default false
   */equalizeOnStack:false,/**
   * Enable height equalization row by row.
   * @option
   * @type {boolean}
   * @default false
   */equalizeByRow:false,/**
   * String representing the minimum breakpoint size the plugin should equalize heights on.
   * @option
   * @type {string}
   * @default ''
   */equalizeOn:''};/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/85:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(19);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=86);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/20:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_interchange__=__webpack_require__(50);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_interchange__["a"/* Interchange */],'Interchange');/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/50:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Interchange;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Interchange module.
 * @module foundation.interchange
 * @requires foundation.util.mediaQuery
 */var Interchange=function(_Plugin){_inherits(Interchange,_Plugin);function Interchange(){_classCallCheck(this,Interchange);return _possibleConstructorReturn(this,(Interchange.__proto__||Object.getPrototypeOf(Interchange)).apply(this,arguments));}_createClass(Interchange,[{key:'_setup',/**
     * Creates a new instance of Interchange.
     * @class
     * @name Interchange
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Interchange.defaults,options);this.rules=[];this.currentPath='';this.className='Interchange';// ie9 back compat
this._init();this._events();}/**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();var id=this.$element[0].id||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6,'interchange');this.$element.attr({'data-resize':id,'id':id});this._addBreakpoints();this._generateRules();this._reflow();}/**
     * Initializes events for Interchange.
     * @function
     * @private
     */},{key:'_events',value:function _events(){var _this3=this;this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger',function(){return _this3._reflow();});}/**
     * Calls necessary functions to update Interchange upon DOM change
     * @function
     * @private
     */},{key:'_reflow',value:function _reflow(){var match;// Iterate through each rule, but only save the last match
for(var i in this.rules){if(this.rules.hasOwnProperty(i)){var rule=this.rules[i];if(window.matchMedia(rule.query).matches){match=rule;}}}if(match){this.replace(match.path);}}/**
     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
     * @function
     * @private
     */},{key:'_addBreakpoints',value:function _addBreakpoints(){for(var i in __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].queries){if(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].queries.hasOwnProperty(i)){var query=__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].queries[i];Interchange.SPECIAL_QUERIES[query.name]=query.value;}}}/**
     * Checks the Interchange element for the provided media query + content pairings
     * @function
     * @private
     * @param {Object} element - jQuery object that is an Interchange instance
     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
     */},{key:'_generateRules',value:function _generateRules(element){var rulesList=[];var rules;if(this.options.rules){rules=this.options.rules;}else{rules=this.$element.data('interchange');}rules=typeof rules==='string'?rules.match(/\[.*?\]/g):rules;for(var i in rules){if(rules.hasOwnProperty(i)){var rule=rules[i].slice(1,-1).split(', ');var path=rule.slice(0,-1).join('');var query=rule[rule.length-1];if(Interchange.SPECIAL_QUERIES[query]){query=Interchange.SPECIAL_QUERIES[query];}rulesList.push({path:path,query:query});}}this.rules=rulesList;}/**
     * Update the `src` property of an image, or change the HTML of a container, to the specified path.
     * @function
     * @param {String} path - Path to the image or HTML partial.
     * @fires Interchange#replaced
     */},{key:'replace',value:function replace(path){if(this.currentPath===path)return;var _this=this,trigger='replaced.zf.interchange';// Replacing images
if(this.$element[0].nodeName==='IMG'){this.$element.attr('src',path).on('load',function(){_this.currentPath=path;}).trigger(trigger);}// Replacing background images
else if(path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)){path=path.replace(/\(/g,'%28').replace(/\)/g,'%29');this.$element.css({'background-image':'url('+path+')'}).trigger(trigger);}// Replacing HTML
else{__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.get(path,function(response){_this.$element.html(response).trigger(trigger);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(response).foundation();_this.currentPath=path;});}/**
       * Fires when content in an Interchange element is done being loaded.
       * @event Interchange#replaced
       */// this.$element.trigger('replaced.zf.interchange');
}/**
     * Destroys an instance of interchange.
     * @function
     */},{key:'_destroy',value:function _destroy(){this.$element.off('resizeme.zf.trigger');}}]);return Interchange;}(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["Plugin"]);/**
 * Default settings for plugin
 */Interchange.defaults={/**
   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
   * @option
   * @type {?array}
   * @default null
   */rules:null};Interchange.SPECIAL_QUERIES={'landscape':'screen and (orientation: landscape)','portrait':'screen and (orientation: portrait)','retina':'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'};/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/86:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(20);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=87);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/21:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_magellan__=__webpack_require__(51);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_magellan__["a"/* Magellan */],'Magellan');/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/51:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Magellan;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__=__webpack_require__(76);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Magellan module.
 * @module foundation.magellan
 * @requires foundation.smoothScroll
 */var Magellan=function(_Plugin){_inherits(Magellan,_Plugin);function Magellan(){_classCallCheck(this,Magellan);return _possibleConstructorReturn(this,(Magellan.__proto__||Object.getPrototypeOf(Magellan)).apply(this,arguments));}_createClass(Magellan,[{key:'_setup',/**
     * Creates a new instance of Magellan.
     * @class
     * @name Magellan
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Magellan.defaults,this.$element.data(),options);this.className='Magellan';// ie9 back compat
this._init();this.calcPoints();}/**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */},{key:'_init',value:function _init(){var id=this.$element[0].id||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["GetYoDigits"])(6,'magellan');var _this=this;this.$targets=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-magellan-target]');this.$links=this.$element.find('a');this.$element.attr({'data-resize':id,'data-scroll':id,'id':id});this.$active=__WEBPACK_IMPORTED_MODULE_0_jquery___default()();this.scrollPos=parseInt(window.pageYOffset,10);this._events();}/**
     * Calculates an array of pixel values that are the demarcation lines between locations on the page.
     * Can be invoked if new elements are added or the size of a location changes.
     * @function
     */},{key:'calcPoints',value:function calcPoints(){var _this=this,body=document.body,html=document.documentElement;this.points=[];this.winHeight=Math.round(Math.max(window.innerHeight,html.clientHeight));this.docHeight=Math.round(Math.max(body.scrollHeight,body.offsetHeight,html.clientHeight,html.scrollHeight,html.offsetHeight));this.$targets.each(function(){var $tar=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),pt=Math.round($tar.offset().top-_this.options.threshold);$tar.targetPoint=pt;_this.points.push(pt);});}/**
     * Initializes events for Magellan.
     * @private
     */},{key:'_events',value:function _events(){var _this=this,$body=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body'),opts={duration:_this.options.animationDuration,easing:_this.options.animationEasing};__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load',function(){if(_this.options.deepLinking){if(location.hash){_this.scrollToLoc(location.hash);}}_this.calcPoints();_this._updateActive();});this.$element.on({'resizeme.zf.trigger':this.reflow.bind(this),'scrollme.zf.trigger':this._updateActive.bind(this)}).on('click.zf.magellan','a[href^="#"]',function(e){e.preventDefault();var arrival=this.getAttribute('href');_this.scrollToLoc(arrival);});this._deepLinkScroll=function(e){if(_this.options.deepLinking){_this.scrollToLoc(window.location.hash);}};__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate',this._deepLinkScroll);}/**
     * Function to scroll to a given location on the page.
     * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
     * @function
     */},{key:'scrollToLoc',value:function scrollToLoc(loc){this._inTransition=true;var _this=this;var options={animationEasing:this.options.animationEasing,animationDuration:this.options.animationDuration,threshold:this.options.threshold,offset:this.options.offset};__WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__["SmoothScroll"].scrollToLoc(loc,options,function(){_this._inTransition=false;_this._updateActive();});}/**
     * Calls necessary functions to update Magellan upon DOM change
     * @function
     */},{key:'reflow',value:function reflow(){this.calcPoints();this._updateActive();}/**
     * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
     * @private
     * @function
     * @fires Magellan#update
     */},{key:'_updateActive',value:function _updateActive()/*evt, elem, scrollPos*/{if(this._inTransition){return;}var winPos=/*scrollPos ||*/parseInt(window.pageYOffset,10),curIdx;if(winPos+this.winHeight===this.docHeight){curIdx=this.points.length-1;}else if(winPos<this.points[0]){curIdx=undefined;}else{var isDown=this.scrollPos<winPos,_this=this,curVisible=this.points.filter(function(p,i){return isDown?p-_this.options.offset<=winPos:p-_this.options.offset-_this.options.threshold<=winPos;});curIdx=curVisible.length?curVisible.length-1:0;}this.$active.removeClass(this.options.activeClass);this.$active=this.$links.filter('[href="#'+this.$targets.eq(curIdx).data('magellan-target')+'"]').addClass(this.options.activeClass);if(this.options.deepLinking){var hash="";if(curIdx!=undefined){hash=this.$active[0].getAttribute('href');}if(hash!==window.location.hash){if(window.history.pushState){window.history.pushState(null,null,hash);}else{window.location.hash=hash;}}}this.scrollPos=winPos;/**
       * Fires when magellan is finished updating to the new active element.
       * @event Magellan#update
       */this.$element.trigger('update.zf.magellan',[this.$active]);}/**
     * Destroys an instance of Magellan and resets the url of the window.
     * @function
     */},{key:'_destroy',value:function _destroy(){this.$element.off('.zf.trigger .zf.magellan').find('.'+this.options.activeClass).removeClass(this.options.activeClass);if(this.options.deepLinking){var hash=this.$active[0].getAttribute('href');window.location.hash.replace(hash,'');}__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate',this._deepLinkScroll);}}]);return Magellan;}(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["Plugin"]);/**
 * Default settings for plugin
 */Magellan.defaults={/**
   * Amount of time, in ms, the animated scrolling should take between locations.
   * @option
   * @type {number}
   * @default 500
   */animationDuration:500,/**
   * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
   * @option
   * @type {string}
   * @default 'linear'
   * @see {@link https://api.jquery.com/animate|Jquery animate}
   */animationEasing:'linear',/**
   * Number of pixels to use as a marker for location changes.
   * @option
   * @type {number}
   * @default 50
   */threshold:50,/**
   * Class applied to the active locations link on the magellan container.
   * @option
   * @type {string}
   * @default 'is-active'
   */activeClass:'is-active',/**
   * Allows the script to manipulate the url of the current page, and if supported, alter the history.
   * @option
   * @type {boolean}
   * @default false
   */deepLinking:false,/**
   * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
   * @option
   * @type {number}
   * @default 0
   */offset:0};/***/},/***/76:/***/function _(module,exports){module.exports={SmoothScroll:window.Foundation.SmoothScroll};/***/},/***/87:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(21);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=88);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/22:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_offcanvas__=__webpack_require__(52);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_offcanvas__["a"/* OffCanvas */],'OffCanvas');/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/4:/***/function _(module,exports){module.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};/***/},/***/5:/***/function _(module,exports){module.exports={Keyboard:window.Foundation.Keyboard};/***/},/***/52:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return OffCanvas;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__=__webpack_require__(7);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * OffCanvas module.
 * @module foundation.offcanvas
 * @requires foundation.util.keyboard
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.triggers
 */var OffCanvas=function(_Plugin){_inherits(OffCanvas,_Plugin);function OffCanvas(){_classCallCheck(this,OffCanvas);return _possibleConstructorReturn(this,(OffCanvas.__proto__||Object.getPrototypeOf(OffCanvas)).apply(this,arguments));}_createClass(OffCanvas,[{key:'_setup',/**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @name OffCanvas
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){var _this3=this;this.className='OffCanvas';// ie9 back compat
this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},OffCanvas.defaults,this.$element.data(),options);this.contentClasses={base:[],reveal:[]};this.$lastTrigger=__WEBPACK_IMPORTED_MODULE_0_jquery___default()();this.$triggers=__WEBPACK_IMPORTED_MODULE_0_jquery___default()();this.position='left';this.$content=__WEBPACK_IMPORTED_MODULE_0_jquery___default()();this.nested=!!this.options.nested;// Defines the CSS transition/position classes of the off-canvas content container.
__WEBPACK_IMPORTED_MODULE_0_jquery___default()(['push','overlap']).each(function(index,val){_this3.contentClasses.base.push('has-transition-'+val);});__WEBPACK_IMPORTED_MODULE_0_jquery___default()(['left','right','top','bottom']).each(function(index,val){_this3.contentClasses.base.push('has-position-'+val);_this3.contentClasses.reveal.push('has-reveal-'+val);});// Triggers init is idempotent, just need to make sure it is initialized
__WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__["a"/* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"]._init();this._init();this._events();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('OffCanvas',{'ESCAPE':'close'});}/**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */},{key:'_init',value:function _init(){var id=this.$element.attr('id');this.$element.attr('aria-hidden','true');// Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)
if(this.options.contentId){this.$content=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+this.options.contentId);}else if(this.$element.siblings('[data-off-canvas-content]').length){this.$content=this.$element.siblings('[data-off-canvas-content]').first();}else{this.$content=this.$element.closest('[data-off-canvas-content]').first();}if(!this.options.contentId){// Assume that the off-canvas element is nested if it isn't a sibling of the content
this.nested=this.$element.siblings('[data-off-canvas-content]').length===0;}else if(this.options.contentId&&this.options.nested===null){// Warning if using content ID without setting the nested option
// Once the element is nested it is required to work properly in this case
console.warn('Remember to use the nested option if using the content ID option!');}if(this.nested===true){// Force transition overlap if nested
this.options.transition='overlap';// Remove appropriate classes if already assigned in markup
this.$element.removeClass('is-transition-push');}this.$element.addClass('is-transition-'+this.options.transition+' is-closed');// Find triggers that affect this element and add aria-expanded to them
this.$triggers=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document).find('[data-open="'+id+'"], [data-close="'+id+'"], [data-toggle="'+id+'"]').attr('aria-expanded','false').attr('aria-controls',id);// Get position by checking for related CSS class
this.position=this.$element.is('.position-left, .position-top, .position-right, .position-bottom')?this.$element.attr('class').match(/position\-(left|top|right|bottom)/)[1]:this.position;// Add an overlay over the content if necessary
if(this.options.contentOverlay===true){var overlay=document.createElement('div');var overlayPosition=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$element).css("position")==='fixed'?'is-overlay-fixed':'is-overlay-absolute';overlay.setAttribute('class','js-off-canvas-overlay '+overlayPosition);this.$overlay=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(overlay);if(overlayPosition==='is-overlay-fixed'){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$overlay).insertAfter(this.$element);}else{this.$content.append(this.$overlay);}}this.options.isRevealed=this.options.isRevealed||new RegExp(this.options.revealClass,'g').test(this.$element[0].className);if(this.options.isRevealed===true){this.options.revealOn=this.options.revealOn||this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];this._setMQChecker();}if(this.options.transitionTime){this.$element.css('transition-duration',this.options.transitionTime);}// Initally remove all transition/position CSS classes from off-canvas content container.
this._removeContentClasses();}/**
     * Adds event handlers to the off-canvas wrapper and the exit overlay.
     * @function
     * @private
     */},{key:'_events',value:function _events(){this.$element.off('.zf.trigger .zf.offcanvas').on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':this.close.bind(this),'toggle.zf.trigger':this.toggle.bind(this),'keydown.zf.offcanvas':this._handleKeyboard.bind(this)});if(this.options.closeOnClick===true){var $target=this.options.contentOverlay?this.$overlay:this.$content;$target.on({'click.zf.offcanvas':this.close.bind(this)});}}/**
     * Applies event listener for elements that will reveal at certain breakpoints.
     * @private
     */},{key:'_setMQChecker',value:function _setMQChecker(){var _this=this;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery',function(){if(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].atLeast(_this.options.revealOn)){_this.reveal(true);}else{_this.reveal(false);}}).one('load.zf.offcanvas',function(){if(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].atLeast(_this.options.revealOn)){_this.reveal(true);}});}/**
     * Removes the CSS transition/position classes of the off-canvas content container.
     * Removing the classes is important when another off-canvas gets opened that uses the same content container.
     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
     * @private
     */},{key:'_removeContentClasses',value:function _removeContentClasses(hasReveal){if(typeof hasReveal!=='boolean'){this.$content.removeClass(this.contentClasses.base.join(' '));}else if(hasReveal===false){this.$content.removeClass('has-reveal-'+this.position);}}/**
     * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.
     * Beforehand any transition/position class gets removed.
     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
     * @private
     */},{key:'_addContentClasses',value:function _addContentClasses(hasReveal){this._removeContentClasses(hasReveal);if(typeof hasReveal!=='boolean'){this.$content.addClass('has-transition-'+this.options.transition+' has-position-'+this.position);}else if(hasReveal===true){this.$content.addClass('has-reveal-'+this.position);}}/**
     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
     * @param {Boolean} isRevealed - true if element should be revealed.
     * @function
     */},{key:'reveal',value:function reveal(isRevealed){if(isRevealed){this.close();this.isRevealed=true;this.$element.attr('aria-hidden','false');this.$element.off('open.zf.trigger toggle.zf.trigger');this.$element.removeClass('is-closed');}else{this.isRevealed=false;this.$element.attr('aria-hidden','true');this.$element.off('open.zf.trigger toggle.zf.trigger').on({'open.zf.trigger':this.open.bind(this),'toggle.zf.trigger':this.toggle.bind(this)});this.$element.addClass('is-closed');}this._addContentClasses(isRevealed);}/**
     * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.
     * @private
     */},{key:'_stopScrolling',value:function _stopScrolling(event){return false;}// Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios
// Only really works for y, not sure how to extend to x or if we need to.
},{key:'_recordScrollable',value:function _recordScrollable(event){var elem=this;// called from event handler context with this as elem
// If the element is scrollable (content overflows), then...
if(elem.scrollHeight!==elem.clientHeight){// If we're at the top, scroll down one pixel to allow scrolling up
if(elem.scrollTop===0){elem.scrollTop=1;}// If we're at the bottom, scroll up one pixel to allow scrolling down
if(elem.scrollTop===elem.scrollHeight-elem.clientHeight){elem.scrollTop=elem.scrollHeight-elem.clientHeight-1;}}elem.allowUp=elem.scrollTop>0;elem.allowDown=elem.scrollTop<elem.scrollHeight-elem.clientHeight;elem.lastY=event.originalEvent.pageY;}},{key:'_stopScrollPropagation',value:function _stopScrollPropagation(event){var elem=this;// called from event handler context with this as elem
var up=event.pageY<elem.lastY;var down=!up;elem.lastY=event.pageY;if(up&&elem.allowUp||down&&elem.allowDown){event.stopPropagation();}else{event.preventDefault();}}/**
     * Opens the off-canvas menu.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     * @fires OffCanvas#opened
     */},{key:'open',value:function open(event,trigger){if(this.$element.hasClass('is-open')||this.isRevealed){return;}var _this=this;if(trigger){this.$lastTrigger=trigger;}if(this.options.forceTo==='top'){window.scrollTo(0,0);}else if(this.options.forceTo==='bottom'){window.scrollTo(0,document.body.scrollHeight);}if(this.options.transitionTime&&this.options.transition!=='overlap'){this.$element.siblings('[data-off-canvas-content]').css('transition-duration',this.options.transitionTime);}else{this.$element.siblings('[data-off-canvas-content]').css('transition-duration','');}/**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#opened
       */this.$element.addClass('is-open').removeClass('is-closed');this.$triggers.attr('aria-expanded','true');this.$element.attr('aria-hidden','false').trigger('opened.zf.offcanvas');this.$content.addClass('is-open-'+this.position);// If `contentScroll` is set to false, add class and disable scrolling on touch devices.
if(this.options.contentScroll===false){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').addClass('is-off-canvas-open').on('touchmove',this._stopScrolling);this.$element.on('touchstart',this._recordScrollable);this.$element.on('touchmove',this._stopScrollPropagation);}if(this.options.contentOverlay===true){this.$overlay.addClass('is-visible');}if(this.options.closeOnClick===true&&this.options.contentOverlay===true){this.$overlay.addClass('is-closable');}if(this.options.autoFocus===true){this.$element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])(this.$element),function(){if(!_this.$element.hasClass('is-open')){return;// exit if prematurely closed
}var canvasFocus=_this.$element.find('[data-autofocus]');if(canvasFocus.length){canvasFocus.eq(0).focus();}else{_this.$element.find('a, button').eq(0).focus();}});}if(this.options.trapFocus===true){this.$content.attr('tabindex','-1');__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].trapFocus(this.$element);}this._addContentClasses();}/**
     * Closes the off-canvas menu.
     * @function
     * @param {Function} cb - optional cb to fire after closure.
     * @fires OffCanvas#closed
     */},{key:'close',value:function close(cb){if(!this.$element.hasClass('is-open')||this.isRevealed){return;}var _this=this;this.$element.removeClass('is-open');this.$element.attr('aria-hidden','true')/**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#closed
       */.trigger('closed.zf.offcanvas');this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom');// If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.
if(this.options.contentScroll===false){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').removeClass('is-off-canvas-open').off('touchmove',this._stopScrolling);this.$element.off('touchstart',this._recordScrollable);this.$element.off('touchmove',this._stopScrollPropagation);}if(this.options.contentOverlay===true){this.$overlay.removeClass('is-visible');}if(this.options.closeOnClick===true&&this.options.contentOverlay===true){this.$overlay.removeClass('is-closable');}this.$triggers.attr('aria-expanded','false');if(this.options.trapFocus===true){this.$content.removeAttr('tabindex');__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].releaseFocus(this.$element);}// Listen to transitionEnd and add class when done.
this.$element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])(this.$element),function(e){_this.$element.addClass('is-closed');_this._removeContentClasses();});}/**
     * Toggles the off-canvas menu open or closed.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     */},{key:'toggle',value:function toggle(event,trigger){if(this.$element.hasClass('is-open')){this.close(event,trigger);}else{this.open(event,trigger);}}/**
     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
     * @function
     * @private
     */},{key:'_handleKeyboard',value:function _handleKeyboard(e){var _this4=this;__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e,'OffCanvas',{close:function close(){_this4.close();_this4.$lastTrigger.focus();return true;},handled:function handled(){e.stopPropagation();e.preventDefault();}});}/**
     * Destroys the offcanvas plugin.
     * @function
     */},{key:'_destroy',value:function _destroy(){this.close();this.$element.off('.zf.trigger .zf.offcanvas');this.$overlay.off('.zf.offcanvas');}}]);return OffCanvas;}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);OffCanvas.defaults={/**
   * Allow the user to click outside of the menu to close it.
   * @option
   * @type {boolean}
   * @default true
   */closeOnClick:true,/**
   * Adds an overlay on top of `[data-off-canvas-content]`.
   * @option
   * @type {boolean}
   * @default true
   */contentOverlay:true,/**
   * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.
   * @option
   * @type {?string}
   * @default null
   */contentId:null,/**
   * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.
   * @option
   * @type {boolean}
   * @default null
   */nested:null,/**
   * Enable/disable scrolling of the main content when an off canvas panel is open.
   * @option
   * @type {boolean}
   * @default true
   */contentScroll:true,/**
   * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
   * @option
   * @type {number}
   * @default null
   */transitionTime:null,/**
   * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.
   * @option
   * @type {string}
   * @default push
   */transition:'push',/**
   * Force the page to scroll to top or bottom on open.
   * @option
   * @type {?string}
   * @default null
   */forceTo:null,/**
   * Allow the offcanvas to remain open for certain breakpoints.
   * @option
   * @type {boolean}
   * @default false
   */isRevealed:false,/**
   * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
   * @option
   * @type {?string}
   * @default null
   */revealOn:null,/**
   * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.
   * @option
   * @type {boolean}
   * @default true
   */autoFocus:true,/**
   * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
   * @option
   * @type {string}
   * @default reveal-for-
   * @todo improve the regex testing for this.
   */revealClass:'reveal-for-',/**
   * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
   * @option
   * @type {boolean}
   * @default false
   */trapFocus:false};/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/7:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Triggers;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};var Triggers={Listeners:{Basic:{},Global:{}},Initializers:{}};Triggers.Listeners.Basic={openListener:function openListener(){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'open');},closeListener:function closeListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'close');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');}},toggleListener:function toggleListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'toggle');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');}},closeableListener:function closeableListener(e){e.stopPropagation();var animation=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');if(animation!==''){__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),animation,function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');});}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');}},toggleFocusListener:function toggleFocusListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id).triggerHandler('toggle.zf.trigger',[__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);}};// Elements with [data-open] will reveal a plugin that supports it when clicked.
Triggers.Initializers.addOpenListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.openListener);$elem.on('click.zf.trigger','[data-open]',Triggers.Listeners.Basic.openListener);};// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
Triggers.Initializers.addCloseListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.closeListener);$elem.on('click.zf.trigger','[data-close]',Triggers.Listeners.Basic.closeListener);};// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
Triggers.Initializers.addToggleListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.toggleListener);$elem.on('click.zf.trigger','[data-toggle]',Triggers.Listeners.Basic.toggleListener);};// Elements with [data-closable] will respond to close.zf.trigger events.
Triggers.Initializers.addCloseableListener=function($elem){$elem.off('close.zf.trigger',Triggers.Listeners.Basic.closeableListener);$elem.on('close.zf.trigger','[data-closeable], [data-closable]',Triggers.Listeners.Basic.closeableListener);};// Elements with [data-toggle-focus] will respond to coming in and out of focus
Triggers.Initializers.addToggleFocusListener=function($elem){$elem.off('focus.zf.trigger blur.zf.trigger',Triggers.Listeners.Basic.toggleFocusListener);$elem.on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',Triggers.Listeners.Basic.toggleFocusListener);};// More Global/complex listeners and triggers
Triggers.Listeners.Global={resizeListener:function resizeListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event
$nodes.attr('data-events',"resize");},scrollListener:function scrollListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event
$nodes.attr('data-events',"scroll");},closeMeListener:function closeMeListener(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-'+plugin+']').not('[data-yeti-box="'+pluginId+'"]');plugins.each(function(){var _this=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);_this.triggerHandler('close.zf.trigger',[_this]);});}// Global, parses whole document.
};Triggers.Initializers.addClosemeListener=function(pluginName){var yetiBoxes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners,Triggers.Listeners.Global.closeMeListener);}};function debounceGlobalListener(debounce,trigger,listener){var timer=void 0,args=Array.prototype.slice.call(arguments,3);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger,function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){listener.apply(null,args);},debounce||10);//default time to emit scroll event
});}Triggers.Initializers.addResizeListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');if($nodes.length){debounceGlobalListener(debounce,'resize.zf.trigger',Triggers.Listeners.Global.resizeListener,$nodes);}};Triggers.Initializers.addScrollListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');if($nodes.length){debounceGlobalListener(debounce,'scroll.zf.trigger',Triggers.Listeners.Global.scrollListener,$nodes);}};Triggers.Initializers.addMutationEventsListener=function($elem){if(!MutationObserver){return false;}var $nodes=$elem.find('[data-resize], [data-scroll], [data-mutate]');//element callback
var listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);//trigger the event handler for the element depending on type
switch(mutationRecordsList[0].type){case"attributes":if($target.attr("data-events")==="scroll"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);}if($target.attr("data-events")==="resize"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('resizeme.zf.trigger',[$target]);}if(mutationRecordsList[0].attributeName==="style"){$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);}break;case"childList":$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);break;default:return false;//nothing
}};if($nodes.length){//for each element that needs to listen for resizing, scrolling, or mutation add a single observer
for(var i=0;i<=$nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe($nodes[i],{attributes:true,childList:true,characterData:false,subtree:true,attributeFilter:["data-events","style"]});}}};Triggers.Initializers.addSimpleListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addOpenListener($document);Triggers.Initializers.addCloseListener($document);Triggers.Initializers.addToggleListener($document);Triggers.Initializers.addCloseableListener($document);Triggers.Initializers.addToggleFocusListener($document);};Triggers.Initializers.addGlobalListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addMutationEventsListener($document);Triggers.Initializers.addResizeListener();Triggers.Initializers.addScrollListener();Triggers.Initializers.addClosemeListener();};Triggers.init=function($,Foundation){if(typeof $.triggersInitialized==='undefined'){var $document=$(document);if(document.readyState==="complete"){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();}else{$(window).on('load',function(){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();});}$.triggersInitialized=true;}if(Foundation){Foundation.Triggers=Triggers;// Legacy included to be backwards compatible for now.
Foundation.IHearYou=Triggers.Initializers.addGlobalListeners;}};/***/},/***/88:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(22);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=91);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/25:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_responsiveMenu__=__webpack_require__(55);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_responsiveMenu__["a"/* ResponsiveMenu */],'ResponsiveMenu');/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/55:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return ResponsiveMenu;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__=__webpack_require__(75);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__=__webpack_require__(74);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__=__webpack_require__(73);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var MenuPlugins={dropdown:{cssClass:'dropdown',plugin:__WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__["DropdownMenu"]},drilldown:{cssClass:'drilldown',plugin:__WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__["Drilldown"]},accordion:{cssClass:'accordion-menu',plugin:__WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__["AccordionMenu"]}};// import "foundation.util.triggers.js";
/**
 * ResponsiveMenu module.
 * @module foundation.responsiveMenu
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 */var ResponsiveMenu=function(_Plugin){_inherits(ResponsiveMenu,_Plugin);function ResponsiveMenu(){_classCallCheck(this,ResponsiveMenu);return _possibleConstructorReturn(this,(ResponsiveMenu.__proto__||Object.getPrototypeOf(ResponsiveMenu)).apply(this,arguments));}_createClass(ResponsiveMenu,[{key:'_setup',/**
     * Creates a new instance of a responsive menu.
     * @class
     * @name ResponsiveMenu
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);this.rules=this.$element.data('responsive-menu');this.currentMq=null;this.currentPlugin=null;this.className='ResponsiveMenu';// ie9 back compat
this._init();this._events();}/**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();// The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
if(typeof this.rules==='string'){var rulesTree={};// Parse rules from "classes" pulled from data attribute
var rules=this.rules.split(' ');// Iterate through every rule found
for(var i=0;i<rules.length;i++){var rule=rules[i].split('-');var ruleSize=rule.length>1?rule[0]:'small';var rulePlugin=rule.length>1?rule[1]:rule[0];if(MenuPlugins[rulePlugin]!==null){rulesTree[ruleSize]=MenuPlugins[rulePlugin];}}this.rules=rulesTree;}if(!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.isEmptyObject(this.rules)){this._checkMediaQueries();}// Add data-mutate since children may need it.
this.$element.attr('data-mutate',this.$element.attr('data-mutate')||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6,'responsive-menu'));}/**
     * Initializes events for the Menu.
     * @function
     * @private
     */},{key:'_events',value:function _events(){var _this=this;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery',function(){_this._checkMediaQueries();});// $(window).on('resize.zf.ResponsiveMenu', function() {
//   _this._checkMediaQueries();
// });
}/**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */},{key:'_checkMediaQueries',value:function _checkMediaQueries(){var matchedMq,_this=this;// Iterate through each rule and find the last matching rule
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(this.rules,function(key){if(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].atLeast(key)){matchedMq=key;}});// No match? No dice
if(!matchedMq)return;// Plugin already initialized? We good
if(this.currentPlugin instanceof this.rules[matchedMq].plugin)return;// Remove existing plugin-specific CSS classes
__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(MenuPlugins,function(key,value){_this.$element.removeClass(value.cssClass);});// Add the CSS class for the new plugin
this.$element.addClass(this.rules[matchedMq].cssClass);// Create an instance of the new plugin
if(this.currentPlugin)this.currentPlugin.destroy();this.currentPlugin=new this.rules[matchedMq].plugin(this.$element,{});}/**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */},{key:'_destroy',value:function _destroy(){this.currentPlugin.destroy();__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.ResponsiveMenu');}}]);return ResponsiveMenu;}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);ResponsiveMenu.defaults={};/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/73:/***/function _(module,exports){module.exports={AccordionMenu:window.Foundation.AccordionMenu};/***/},/***/74:/***/function _(module,exports){module.exports={Drilldown:window.Foundation.Drilldown};/***/},/***/75:/***/function _(module,exports){module.exports={DropdownMenu:window.Foundation.DropdownMenu};/***/},/***/91:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(25);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=92);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/26:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_responsiveToggle__=__webpack_require__(56);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_responsiveToggle__["a"/* ResponsiveToggle */],'ResponsiveToggle');/***/},/***/4:/***/function _(module,exports){module.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};/***/},/***/56:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return ResponsiveToggle;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * ResponsiveToggle module.
 * @module foundation.responsiveToggle
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.motion
 */var ResponsiveToggle=function(_Plugin){_inherits(ResponsiveToggle,_Plugin);function ResponsiveToggle(){_classCallCheck(this,ResponsiveToggle);return _possibleConstructorReturn(this,(ResponsiveToggle.__proto__||Object.getPrototypeOf(ResponsiveToggle)).apply(this,arguments));}_createClass(ResponsiveToggle,[{key:'_setup',/**
     * Creates a new instance of Tab Bar.
     * @class
     * @name ResponsiveToggle
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},ResponsiveToggle.defaults,this.$element.data(),options);this.className='ResponsiveToggle';// ie9 back compat
this._init();this._events();}/**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();var targetID=this.$element.data('responsive-toggle');if(!targetID){console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');}this.$targetMenu=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+targetID);this.$toggler=this.$element.find('[data-toggle]').filter(function(){var target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');return target===targetID||target==="";});this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},this.options,this.$targetMenu.data());// If they were set, parse the animation classes
if(this.options.animate){var input=this.options.animate.split(' ');this.animationIn=input[0];this.animationOut=input[1]||null;}this._update();}/**
     * Adds necessary event handlers for the tab bar to work.
     * @function
     * @private
     */},{key:'_events',value:function _events(){var _this=this;this._updateMqHandler=this._update.bind(this);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery',this._updateMqHandler);this.$toggler.on('click.zf.responsiveToggle',this.toggleMenu.bind(this));}/**
     * Checks the current media query to determine if the tab bar should be visible or hidden.
     * @function
     * @private
     */},{key:'_update',value:function _update(){// Mobile
if(!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].atLeast(this.options.hideFor)){this.$element.show();this.$targetMenu.hide();}// Desktop
else{this.$element.hide();this.$targetMenu.show();}}/**
     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
     * @function
     * @fires ResponsiveToggle#toggled
     */},{key:'toggleMenu',value:function toggleMenu(){var _this3=this;if(!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].atLeast(this.options.hideFor)){/**
         * Fires when the element attached to the tab bar toggles.
         * @event ResponsiveToggle#toggled
         */if(this.options.animate){if(this.$targetMenu.is(':hidden')){__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["Motion"].animateIn(this.$targetMenu,this.animationIn,function(){_this3.$element.trigger('toggled.zf.responsiveToggle');_this3.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');});}else{__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["Motion"].animateOut(this.$targetMenu,this.animationOut,function(){_this3.$element.trigger('toggled.zf.responsiveToggle');});}}else{this.$targetMenu.toggle(0);this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');this.$element.trigger('toggled.zf.responsiveToggle');}}}},{key:'_destroy',value:function _destroy(){this.$element.off('.zf.responsiveToggle');this.$toggler.off('.zf.responsiveToggle');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('changed.zf.mediaquery',this._updateMqHandler);}}]);return ResponsiveToggle;}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);ResponsiveToggle.defaults={/**
   * The breakpoint after which the menu is always shown, and the tab bar is hidden.
   * @option
   * @type {string}
   * @default 'medium'
   */hideFor:'medium',/**
   * To decide if the toggle should be animated or not.
   * @option
   * @type {boolean}
   * @default false
   */animate:false};/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/92:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(26);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=93);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/27:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_reveal__=__webpack_require__(57);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_reveal__["a"/* Reveal */],'Reveal');/***/},/***/4:/***/function _(module,exports){module.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};/***/},/***/5:/***/function _(module,exports){module.exports={Keyboard:window.Foundation.Keyboard};/***/},/***/57:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Reveal;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__=__webpack_require__(7);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Reveal module.
 * @module foundation.reveal
 * @requires foundation.util.keyboard
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.motion if using animations
 */var Reveal=function(_Plugin){_inherits(Reveal,_Plugin);function Reveal(){_classCallCheck(this,Reveal);return _possibleConstructorReturn(this,(Reveal.__proto__||Object.getPrototypeOf(Reveal)).apply(this,arguments));}_createClass(Reveal,[{key:'_setup',/**
     * Creates a new instance of Reveal.
     * @class
     * @name Reveal
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Reveal.defaults,this.$element.data(),options);this.className='Reveal';// ie9 back compat
this._init();// Triggers init is idempotent, just need to make sure it is initialized
__WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__["a"/* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Reveal',{'ESCAPE':'close'});}/**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"]._init();this.id=this.$element.attr('id');this.isActive=false;this.cached={mq:__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].current};this.isMobile=mobileSniff();this.$anchor=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="'+this.id+'"]').length?__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="'+this.id+'"]'):__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="'+this.id+'"]');this.$anchor.attr({'aria-controls':this.id,'aria-haspopup':true,'tabindex':0});if(this.options.fullScreen||this.$element.hasClass('full')){this.options.fullScreen=true;this.options.overlay=false;}if(this.options.overlay&&!this.$overlay){this.$overlay=this._makeOverlay(this.id);}this.$element.attr({'role':'dialog','aria-hidden':true,'data-yeti-box':this.id,'data-resize':this.id});if(this.$overlay){this.$element.detach().appendTo(this.$overlay);}else{this.$element.detach().appendTo(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.appendTo));this.$element.addClass('without-overlay');}this._events();if(this.options.deepLink&&window.location.hash==='#'+this.id){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load.zf.reveal',this.open.bind(this));}}/**
     * Creates an overlay div to display behind the modal.
     * @private
     */},{key:'_makeOverlay',value:function _makeOverlay(){var additionalOverlayClasses='';if(this.options.additionalOverlayClasses){additionalOverlayClasses=' '+this.options.additionalOverlayClasses;}return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div></div>').addClass('reveal-overlay'+additionalOverlayClasses).appendTo(this.options.appendTo);}/**
     * Updates position of modal
     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
     * @private
     */},{key:'_updatePosition',value:function _updatePosition(){var width=this.$element.outerWidth();var outerWidth=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).width();var height=this.$element.outerHeight();var outerHeight=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).height();var left,top;if(this.options.hOffset==='auto'){left=parseInt((outerWidth-width)/2,10);}else{left=parseInt(this.options.hOffset,10);}if(this.options.vOffset==='auto'){if(height>outerHeight){top=parseInt(Math.min(100,outerHeight/10),10);}else{top=parseInt((outerHeight-height)/4,10);}}else{top=parseInt(this.options.vOffset,10);}this.$element.css({top:top+'px'});// only worry about left if we don't have an overlay or we havea  horizontal offset,
// otherwise we're perfectly in the middle
if(!this.$overlay||this.options.hOffset!=='auto'){this.$element.css({left:left+'px'});this.$element.css({margin:'0px'});}}/**
     * Adds event handlers for the modal.
     * @private
     */},{key:'_events',value:function _events(){var _this3=this;var _this=this;this.$element.on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':function closeZfTrigger(event,$element){if(event.target===_this.$element[0]||__WEBPACK_IMPORTED_MODULE_0_jquery___default()(event.target).parents('[data-closable]')[0]===$element){// only close reveal when it's explicitly called
return _this3.close.apply(_this3);}},'toggle.zf.trigger':this.toggle.bind(this),'resizeme.zf.trigger':function resizemeZfTrigger(){_this._updatePosition();}});if(this.options.closeOnClick&&this.options.overlay){this.$overlay.off('.zf.reveal').on('click.zf.reveal',function(e){if(e.target===_this.$element[0]||__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0],e.target)||!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(document,e.target)){return;}_this.close();});}if(this.options.deepLink){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate.zf.reveal:'+this.id,this._handleState.bind(this));}}/**
     * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
     * @private
     */},{key:'_handleState',value:function _handleState(e){if(window.location.hash==='#'+this.id&&!this.isActive){this.open();}else{this.close();}}/**
     * Opens the modal controlled by `this.$anchor`, and closes all others by default.
     * @function
     * @fires Reveal#closeme
     * @fires Reveal#open
     */},{key:'open',value:function open(){var _this4=this;// either update or replace browser history
if(this.options.deepLink){var hash='#'+this.id;if(window.history.pushState){if(this.options.updateHistory){window.history.pushState({},'',hash);}else{window.history.replaceState({},'',hash);}}else{window.location.hash=hash;}}this.isActive=true;// Make elements invisible, but remove display: none so we can get size and positioning
this.$element.css({'visibility':'hidden'}).show().scrollTop(0);if(this.options.overlay){this.$overlay.css({'visibility':'hidden'}).show();}this._updatePosition();this.$element.hide().css({'visibility':''});if(this.$overlay){this.$overlay.css({'visibility':''}).hide();if(this.$element.hasClass('fast')){this.$overlay.addClass('fast');}else if(this.$element.hasClass('slow')){this.$overlay.addClass('slow');}}if(!this.options.multipleOpened){/**
         * Fires immediately before the modal opens.
         * Closes any other modals that are currently open
         * @event Reveal#closeme
         */this.$element.trigger('closeme.zf.reveal',this.id);}var _this=this;function addRevealOpenClasses(){if(_this.isMobile){if(!_this.originalScrollPos){_this.originalScrollPos=window.pageYOffset;}__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').addClass('is-reveal-open');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').addClass('is-reveal-open');}}// Motion UI method of reveal
if(this.options.animationIn){var afterAnimation=function afterAnimation(){_this.$element.attr({'aria-hidden':false,'tabindex':-1}).focus();addRevealOpenClasses();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].trapFocus(_this.$element);};if(this.options.overlay){__WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["Motion"].animateIn(this.$overlay,'fade-in');}__WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["Motion"].animateIn(this.$element,this.options.animationIn,function(){if(_this4.$element){// protect against object having been removed
_this4.focusableElements=__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].findFocusable(_this4.$element);afterAnimation();}});}// jQuery method of reveal
else{if(this.options.overlay){this.$overlay.show(0);}this.$element.show(this.options.showDelay);}// handle accessibility
this.$element.attr({'aria-hidden':false,'tabindex':-1}).focus();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].trapFocus(this.$element);addRevealOpenClasses();this._extraHandlers();/**
       * Fires when the modal has successfully opened.
       * @event Reveal#open
       */this.$element.trigger('open.zf.reveal');}/**
     * Adds extra event handlers for the body and window if necessary.
     * @private
     */},{key:'_extraHandlers',value:function _extraHandlers(){var _this=this;if(!this.$element){return;}// If we're in the middle of cleanup, don't freak out
this.focusableElements=__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].findFocusable(this.$element);if(!this.options.overlay&&this.options.closeOnClick&&!this.options.fullScreen){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').on('click.zf.reveal',function(e){if(e.target===_this.$element[0]||__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0],e.target)||!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(document,e.target)){return;}_this.close();});}if(this.options.closeOnEsc){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('keydown.zf.reveal',function(e){__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e,'Reveal',{close:function close(){if(_this.options.closeOnEsc){_this.close();}}});});}}/**
     * Closes the modal.
     * @function
     * @fires Reveal#closed
     */},{key:'close',value:function close(){if(!this.isActive||!this.$element.is(':visible')){return false;}var _this=this;// Motion UI method of hiding
if(this.options.animationOut){if(this.options.overlay){__WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["Motion"].animateOut(this.$overlay,'fade-out');}__WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["Motion"].animateOut(this.$element,this.options.animationOut,finishUp);}// jQuery method of hiding
else{this.$element.hide(this.options.hideDelay);if(this.options.overlay){this.$overlay.hide(0,finishUp);}else{finishUp();}}// Conditionals to remove extra event listeners added on open
if(this.options.closeOnEsc){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('keydown.zf.reveal');}if(!this.options.overlay&&this.options.closeOnClick){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').off('click.zf.reveal');}this.$element.off('keydown.zf.reveal');function finishUp(){if(_this.isMobile){if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.reveal:visible').length===0){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').removeClass('is-reveal-open');}if(_this.originalScrollPos){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').scrollTop(_this.originalScrollPos);_this.originalScrollPos=null;}}else{if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.reveal:visible').length===0){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').removeClass('is-reveal-open');}}__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].releaseFocus(_this.$element);_this.$element.attr('aria-hidden',true);/**
        * Fires when the modal is done closing.
        * @event Reveal#closed
        */_this.$element.trigger('closed.zf.reveal');}/**
      * Resets the modal content
      * This prevents a running video to keep going in the background
      */if(this.options.resetOnClose){this.$element.html(this.$element.html());}this.isActive=false;if(_this.options.deepLink){if(window.history.replaceState){window.history.replaceState('',document.title,window.location.href.replace('#'+this.id,''));}else{window.location.hash='';}}this.$anchor.focus();}/**
     * Toggles the open/closed state of a modal.
     * @function
     */},{key:'toggle',value:function toggle(){if(this.isActive){this.close();}else{this.open();}}},{key:'_destroy',/**
     * Destroys an instance of a modal.
     * @function
     */value:function _destroy(){if(this.options.overlay){this.$element.appendTo(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.appendTo));// move $element outside of $overlay to prevent error unregisterPlugin()
this.$overlay.hide().off().remove();}this.$element.hide().off();this.$anchor.off('.zf');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.reveal:'+this.id);}}]);return Reveal;}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);Reveal.defaults={/**
   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
   * @option
   * @type {string}
   * @default ''
   */animationIn:'',/**
   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
   * @option
   * @type {string}
   * @default ''
   */animationOut:'',/**
   * Time, in ms, to delay the opening of a modal after a click if no animation used.
   * @option
   * @type {number}
   * @default 0
   */showDelay:0,/**
   * Time, in ms, to delay the closing of a modal after a click if no animation used.
   * @option
   * @type {number}
   * @default 0
   */hideDelay:0,/**
   * Allows a click on the body/overlay to close the modal.
   * @option
   * @type {boolean}
   * @default true
   */closeOnClick:true,/**
   * Allows the modal to close if the user presses the `ESCAPE` key.
   * @option
   * @type {boolean}
   * @default true
   */closeOnEsc:true,/**
   * If true, allows multiple modals to be displayed at once.
   * @option
   * @type {boolean}
   * @default false
   */multipleOpened:false,/**
   * Distance, in pixels, the modal should push down from the top of the screen.
   * @option
   * @type {number|string}
   * @default auto
   */vOffset:'auto',/**
   * Distance, in pixels, the modal should push in from the side of the screen.
   * @option
   * @type {number|string}
   * @default auto
   */hOffset:'auto',/**
   * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
   * @option
   * @type {boolean}
   * @default false
   */fullScreen:false,/**
   * Percentage of screen height the modal should push up from the bottom of the view.
   * @option
   * @type {number}
   * @default 10
   */btmOffsetPct:10,/**
   * Allows the modal to generate an overlay div, which will cover the view when modal opens.
   * @option
   * @type {boolean}
   * @default true
   */overlay:true,/**
   * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
   * @option
   * @type {boolean}
   * @default false
   */resetOnClose:false,/**
   * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
   * @option
   * @type {boolean}
   * @default false
   */deepLink:false,/**
   * Update the browser history with the open modal
   * @option
   * @default false
   */updateHistory:false,/**
  * Allows the modal to append to custom div.
  * @option
  * @type {string}
  * @default "body"
  */appendTo:"body",/**
   * Allows adding additional class names to the reveal overlay.
   * @option
   * @type {string}
   * @default ''
   */additionalOverlayClasses:''};function iPhoneSniff(){return /iP(ad|hone|od).*OS/.test(window.navigator.userAgent);}function androidSniff(){return /Android/.test(window.navigator.userAgent);}function mobileSniff(){return iPhoneSniff()||androidSniff();}/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/7:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Triggers;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};var Triggers={Listeners:{Basic:{},Global:{}},Initializers:{}};Triggers.Listeners.Basic={openListener:function openListener(){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'open');},closeListener:function closeListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'close');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');}},toggleListener:function toggleListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'toggle');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');}},closeableListener:function closeableListener(e){e.stopPropagation();var animation=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');if(animation!==''){__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),animation,function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');});}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');}},toggleFocusListener:function toggleFocusListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id).triggerHandler('toggle.zf.trigger',[__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);}};// Elements with [data-open] will reveal a plugin that supports it when clicked.
Triggers.Initializers.addOpenListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.openListener);$elem.on('click.zf.trigger','[data-open]',Triggers.Listeners.Basic.openListener);};// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
Triggers.Initializers.addCloseListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.closeListener);$elem.on('click.zf.trigger','[data-close]',Triggers.Listeners.Basic.closeListener);};// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
Triggers.Initializers.addToggleListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.toggleListener);$elem.on('click.zf.trigger','[data-toggle]',Triggers.Listeners.Basic.toggleListener);};// Elements with [data-closable] will respond to close.zf.trigger events.
Triggers.Initializers.addCloseableListener=function($elem){$elem.off('close.zf.trigger',Triggers.Listeners.Basic.closeableListener);$elem.on('close.zf.trigger','[data-closeable], [data-closable]',Triggers.Listeners.Basic.closeableListener);};// Elements with [data-toggle-focus] will respond to coming in and out of focus
Triggers.Initializers.addToggleFocusListener=function($elem){$elem.off('focus.zf.trigger blur.zf.trigger',Triggers.Listeners.Basic.toggleFocusListener);$elem.on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',Triggers.Listeners.Basic.toggleFocusListener);};// More Global/complex listeners and triggers
Triggers.Listeners.Global={resizeListener:function resizeListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event
$nodes.attr('data-events',"resize");},scrollListener:function scrollListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event
$nodes.attr('data-events',"scroll");},closeMeListener:function closeMeListener(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-'+plugin+']').not('[data-yeti-box="'+pluginId+'"]');plugins.each(function(){var _this=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);_this.triggerHandler('close.zf.trigger',[_this]);});}// Global, parses whole document.
};Triggers.Initializers.addClosemeListener=function(pluginName){var yetiBoxes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners,Triggers.Listeners.Global.closeMeListener);}};function debounceGlobalListener(debounce,trigger,listener){var timer=void 0,args=Array.prototype.slice.call(arguments,3);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger,function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){listener.apply(null,args);},debounce||10);//default time to emit scroll event
});}Triggers.Initializers.addResizeListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');if($nodes.length){debounceGlobalListener(debounce,'resize.zf.trigger',Triggers.Listeners.Global.resizeListener,$nodes);}};Triggers.Initializers.addScrollListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');if($nodes.length){debounceGlobalListener(debounce,'scroll.zf.trigger',Triggers.Listeners.Global.scrollListener,$nodes);}};Triggers.Initializers.addMutationEventsListener=function($elem){if(!MutationObserver){return false;}var $nodes=$elem.find('[data-resize], [data-scroll], [data-mutate]');//element callback
var listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);//trigger the event handler for the element depending on type
switch(mutationRecordsList[0].type){case"attributes":if($target.attr("data-events")==="scroll"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);}if($target.attr("data-events")==="resize"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('resizeme.zf.trigger',[$target]);}if(mutationRecordsList[0].attributeName==="style"){$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);}break;case"childList":$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);break;default:return false;//nothing
}};if($nodes.length){//for each element that needs to listen for resizing, scrolling, or mutation add a single observer
for(var i=0;i<=$nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe($nodes[i],{attributes:true,childList:true,characterData:false,subtree:true,attributeFilter:["data-events","style"]});}}};Triggers.Initializers.addSimpleListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addOpenListener($document);Triggers.Initializers.addCloseListener($document);Triggers.Initializers.addToggleListener($document);Triggers.Initializers.addCloseableListener($document);Triggers.Initializers.addToggleFocusListener($document);};Triggers.Initializers.addGlobalListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addMutationEventsListener($document);Triggers.Initializers.addResizeListener();Triggers.Initializers.addScrollListener();Triggers.Initializers.addClosemeListener();};Triggers.init=function($,Foundation){if(typeof $.triggersInitialized==='undefined'){var $document=$(document);if(document.readyState==="complete"){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();}else{$(window).on('load',function(){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();});}$.triggersInitialized=true;}if(Foundation){Foundation.Triggers=Triggers;// Legacy included to be backwards compatible for now.
Foundation.IHearYou=Triggers.Initializers.addGlobalListeners;}};/***/},/***/93:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(27);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=96);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/30:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_sticky__=__webpack_require__(60);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_sticky__["a"/* Sticky */],'Sticky');/***/},/***/4:/***/function _(module,exports){module.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/60:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Sticky;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__=__webpack_require__(7);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Sticky module.
 * @module foundation.sticky
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 */var Sticky=function(_Plugin){_inherits(Sticky,_Plugin);function Sticky(){_classCallCheck(this,Sticky);return _possibleConstructorReturn(this,(Sticky.__proto__||Object.getPrototypeOf(Sticky)).apply(this,arguments));}_createClass(Sticky,[{key:'_setup',/**
     * Creates a new instance of a sticky thing.
     * @class
     * @name Sticky
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Sticky.defaults,this.$element.data(),options);this.className='Sticky';// ie9 back compat
// Triggers init is idempotent, just need to make sure it is initialized
__WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__["a"/* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);this._init();}/**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"]._init();var $parent=this.$element.parent('[data-sticky-container]'),id=this.$element[0].id||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["GetYoDigits"])(6,'sticky'),_this=this;if($parent.length){this.$container=$parent;}else{this.wasWrapped=true;this.$element.wrap(this.options.container);this.$container=this.$element.parent();}this.$container.addClass(this.options.containerClass);this.$element.addClass(this.options.stickyClass).attr({'data-resize':id,'data-mutate':id});if(this.options.anchor!==''){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+_this.options.anchor).attr({'data-mutate':id});}this.scrollCount=this.options.checkEvery;this.isStuck=false;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load.zf.sticky',function(){//We calculate the container height to have correct values for anchor points offset calculation.
_this.containerHeight=_this.$element.css("display")=="none"?0:_this.$element[0].getBoundingClientRect().height;_this.$container.css('height',_this.containerHeight);_this.elemHeight=_this.containerHeight;if(_this.options.anchor!==''){_this.$anchor=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+_this.options.anchor);}else{_this._parsePoints();}_this._setSizes(function(){var scroll=window.pageYOffset;_this._calc(false,scroll);//Unstick the element will ensure that proper classes are set.
if(!_this.isStuck){_this._removeSticky(scroll>=_this.topPoint?false:true);}});_this._events(id.split('-').reverse().join('-'));});}/**
     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
     * @function
     * @private
     */},{key:'_parsePoints',value:function _parsePoints(){var top=this.options.topAnchor==""?1:this.options.topAnchor,btm=this.options.btmAnchor==""?document.documentElement.scrollHeight:this.options.btmAnchor,pts=[top,btm],breaks={};for(var i=0,len=pts.length;i<len&&pts[i];i++){var pt;if(typeof pts[i]==='number'){pt=pts[i];}else{var place=pts[i].split(':'),anchor=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+place[0]);pt=anchor.offset().top;if(place[1]&&place[1].toLowerCase()==='bottom'){pt+=anchor[0].getBoundingClientRect().height;}}breaks[i]=pt;}this.points=breaks;return;}/**
     * Adds event handlers for the scrolling element.
     * @private
     * @param {String} id - pseudo-random id for unique scroll event listener.
     */},{key:'_events',value:function _events(id){var _this=this,scrollListener=this.scrollListener='scroll.zf.'+id;if(this.isOn){return;}if(this.canStick){this.isOn=true;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(scrollListener).on(scrollListener,function(e){if(_this.scrollCount===0){_this.scrollCount=_this.options.checkEvery;_this._setSizes(function(){_this._calc(false,window.pageYOffset);});}else{_this.scrollCount--;_this._calc(false,window.pageYOffset);}});}this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger',function(e,el){_this._eventsHandler(id);});this.$element.on('mutateme.zf.trigger',function(e,el){_this._eventsHandler(id);});if(this.$anchor){this.$anchor.on('mutateme.zf.trigger',function(e,el){_this._eventsHandler(id);});}}/**
     * Handler for events.
     * @private
     * @param {String} id - pseudo-random id for unique scroll event listener.
     */},{key:'_eventsHandler',value:function _eventsHandler(id){var _this=this,scrollListener=this.scrollListener='scroll.zf.'+id;_this._setSizes(function(){_this._calc(false);if(_this.canStick){if(!_this.isOn){_this._events(id);}}else if(_this.isOn){_this._pauseListeners(scrollListener);}});}/**
     * Removes event handlers for scroll and change events on anchor.
     * @fires Sticky#pause
     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
     */},{key:'_pauseListeners',value:function _pauseListeners(scrollListener){this.isOn=false;__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(scrollListener);/**
       * Fires when the plugin is paused due to resize event shrinking the view.
       * @event Sticky#pause
       * @private
       */this.$element.trigger('pause.zf.sticky');}/**
     * Called on every `scroll` event and on `_init`
     * fires functions based on booleans and cached values
     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
     */},{key:'_calc',value:function _calc(checkSizes,scroll){if(checkSizes){this._setSizes();}if(!this.canStick){if(this.isStuck){this._removeSticky(true);}return false;}if(!scroll){scroll=window.pageYOffset;}if(scroll>=this.topPoint){if(scroll<=this.bottomPoint){if(!this.isStuck){this._setSticky();}}else{if(this.isStuck){this._removeSticky(false);}}}else{if(this.isStuck){this._removeSticky(true);}}}/**
     * Causes the $element to become stuck.
     * Adds `position: fixed;`, and helper classes.
     * @fires Sticky#stuckto
     * @function
     * @private
     */},{key:'_setSticky',value:function _setSticky(){var _this=this,stickTo=this.options.stickTo,mrgn=stickTo==='top'?'marginTop':'marginBottom',notStuckTo=stickTo==='top'?'bottom':'top',css={};css[mrgn]=this.options[mrgn]+'em';css[stickTo]=0;css[notStuckTo]='auto';this.isStuck=true;this.$element.removeClass('is-anchored is-at-'+notStuckTo).addClass('is-stuck is-at-'+stickTo).css(css)/**
       * Fires when the $element has become `position: fixed;`
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
       * @event Sticky#stuckto
       */.trigger('sticky.zf.stuckto:'+stickTo);this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",function(){_this._setSizes();});}/**
     * Causes the $element to become unstuck.
     * Removes `position: fixed;`, and helper classes.
     * Adds other helper classes.
     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
     * @fires Sticky#unstuckfrom
     * @private
     */},{key:'_removeSticky',value:function _removeSticky(isTop){var stickTo=this.options.stickTo,stickToTop=stickTo==='top',css={},anchorPt=(this.points?this.points[1]-this.points[0]:this.anchorHeight)-this.elemHeight,mrgn=stickToTop?'marginTop':'marginBottom',notStuckTo=stickToTop?'bottom':'top',topOrBottom=isTop?'top':'bottom';css[mrgn]=0;css['bottom']='auto';if(isTop){css['top']=0;}else{css['top']=anchorPt;}this.isStuck=false;this.$element.removeClass('is-stuck is-at-'+stickTo).addClass('is-anchored is-at-'+topOrBottom).css(css)/**
       * Fires when the $element has become anchored.
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
       * @event Sticky#unstuckfrom
       */.trigger('sticky.zf.unstuckfrom:'+topOrBottom);}/**
     * Sets the $element and $container sizes for plugin.
     * Calls `_setBreakPoints`.
     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
     * @private
     */},{key:'_setSizes',value:function _setSizes(cb){this.canStick=__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].is(this.options.stickyOn);if(!this.canStick){if(cb&&typeof cb==='function'){cb();}}var _this=this,newElemWidth=this.$container[0].getBoundingClientRect().width,comp=window.getComputedStyle(this.$container[0]),pdngl=parseInt(comp['padding-left'],10),pdngr=parseInt(comp['padding-right'],10);if(this.$anchor&&this.$anchor.length){this.anchorHeight=this.$anchor[0].getBoundingClientRect().height;}else{this._parsePoints();}this.$element.css({'max-width':newElemWidth-pdngl-pdngr+'px'});var newContainerHeight=this.$element[0].getBoundingClientRect().height||this.containerHeight;if(this.$element.css("display")=="none"){newContainerHeight=0;}this.containerHeight=newContainerHeight;this.$container.css({height:newContainerHeight});this.elemHeight=newContainerHeight;if(!this.isStuck){if(this.$element.hasClass('is-at-bottom')){var anchorPt=(this.points?this.points[1]-this.$container.offset().top:this.anchorHeight)-this.elemHeight;this.$element.css('top',anchorPt);}}this._setBreakPoints(newContainerHeight,function(){if(cb&&typeof cb==='function'){cb();}});}/**
     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
     * @param {Function} cb - optional callback function to be called on completion.
     * @private
     */},{key:'_setBreakPoints',value:function _setBreakPoints(elemHeight,cb){if(!this.canStick){if(cb&&typeof cb==='function'){cb();}else{return false;}}var mTop=emCalc(this.options.marginTop),mBtm=emCalc(this.options.marginBottom),topPoint=this.points?this.points[0]:this.$anchor.offset().top,bottomPoint=this.points?this.points[1]:topPoint+this.anchorHeight,// topPoint = this.$anchor.offset().top || this.points[0],
// bottomPoint = topPoint + this.anchorHeight || this.points[1],
winHeight=window.innerHeight;if(this.options.stickTo==='top'){topPoint-=mTop;bottomPoint-=elemHeight+mTop;}else if(this.options.stickTo==='bottom'){topPoint-=winHeight-(elemHeight+mBtm);bottomPoint-=winHeight-mBtm;}else{//this would be the stickTo: both option... tricky
}this.topPoint=topPoint;this.bottomPoint=bottomPoint;if(cb&&typeof cb==='function'){cb();}}/**
     * Destroys the current sticky element.
     * Resets the element to the top position first.
     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
     * @function
     */},{key:'_destroy',value:function _destroy(){this._removeSticky(true);this.$element.removeClass(this.options.stickyClass+' is-anchored is-at-top').css({height:'',top:'',bottom:'','max-width':''}).off('resizeme.zf.trigger').off('mutateme.zf.trigger');if(this.$anchor&&this.$anchor.length){this.$anchor.off('change.zf.sticky');}__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(this.scrollListener);if(this.wasWrapped){this.$element.unwrap();}else{this.$container.removeClass(this.options.containerClass).css({height:''});}}}]);return Sticky;}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);Sticky.defaults={/**
   * Customizable container template. Add your own classes for styling and sizing.
   * @option
   * @type {string}
   * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'
   */container:'<div data-sticky-container></div>',/**
   * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.
   * @option
   * @type {string}
   * @default 'top'
   */stickTo:'top',/**
   * If anchored to a single element, the id of that element.
   * @option
   * @type {string}
   * @default ''
   */anchor:'',/**
   * If using more than one element as anchor points, the id of the top anchor.
   * @option
   * @type {string}
   * @default ''
   */topAnchor:'',/**
   * If using more than one element as anchor points, the id of the bottom anchor.
   * @option
   * @type {string}
   * @default ''
   */btmAnchor:'',/**
   * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
   * @option
   * @type {number}
   * @default 1
   */marginTop:1,/**
   * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
   * @option
   * @type {number}
   * @default 1
   */marginBottom:1,/**
   * Breakpoint string that is the minimum screen size an element should become sticky.
   * @option
   * @type {string}
   * @default 'medium'
   */stickyOn:'medium',/**
   * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
   * @option
   * @type {string}
   * @default 'sticky'
   */stickyClass:'sticky',/**
   * Class applied to sticky container. Foundation defaults to `sticky-container`.
   * @option
   * @type {string}
   * @default 'sticky-container'
   */containerClass:'sticky-container',/**
   * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
   * @option
   * @type {number}
   * @default -1
   */checkEvery:-1};/**
 * Helper function to calculate em values
 * @param Number {em} - number of em's to calculate into pixels
 */function emCalc(em){return parseInt(window.getComputedStyle(document.body,null).fontSize,10)*em;}/***/},/***/7:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Triggers;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};var Triggers={Listeners:{Basic:{},Global:{}},Initializers:{}};Triggers.Listeners.Basic={openListener:function openListener(){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'open');},closeListener:function closeListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'close');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');}},toggleListener:function toggleListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'toggle');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');}},closeableListener:function closeableListener(e){e.stopPropagation();var animation=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');if(animation!==''){__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),animation,function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');});}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');}},toggleFocusListener:function toggleFocusListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id).triggerHandler('toggle.zf.trigger',[__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);}};// Elements with [data-open] will reveal a plugin that supports it when clicked.
Triggers.Initializers.addOpenListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.openListener);$elem.on('click.zf.trigger','[data-open]',Triggers.Listeners.Basic.openListener);};// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
Triggers.Initializers.addCloseListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.closeListener);$elem.on('click.zf.trigger','[data-close]',Triggers.Listeners.Basic.closeListener);};// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
Triggers.Initializers.addToggleListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.toggleListener);$elem.on('click.zf.trigger','[data-toggle]',Triggers.Listeners.Basic.toggleListener);};// Elements with [data-closable] will respond to close.zf.trigger events.
Triggers.Initializers.addCloseableListener=function($elem){$elem.off('close.zf.trigger',Triggers.Listeners.Basic.closeableListener);$elem.on('close.zf.trigger','[data-closeable], [data-closable]',Triggers.Listeners.Basic.closeableListener);};// Elements with [data-toggle-focus] will respond to coming in and out of focus
Triggers.Initializers.addToggleFocusListener=function($elem){$elem.off('focus.zf.trigger blur.zf.trigger',Triggers.Listeners.Basic.toggleFocusListener);$elem.on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',Triggers.Listeners.Basic.toggleFocusListener);};// More Global/complex listeners and triggers
Triggers.Listeners.Global={resizeListener:function resizeListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event
$nodes.attr('data-events',"resize");},scrollListener:function scrollListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event
$nodes.attr('data-events',"scroll");},closeMeListener:function closeMeListener(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-'+plugin+']').not('[data-yeti-box="'+pluginId+'"]');plugins.each(function(){var _this=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);_this.triggerHandler('close.zf.trigger',[_this]);});}// Global, parses whole document.
};Triggers.Initializers.addClosemeListener=function(pluginName){var yetiBoxes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners,Triggers.Listeners.Global.closeMeListener);}};function debounceGlobalListener(debounce,trigger,listener){var timer=void 0,args=Array.prototype.slice.call(arguments,3);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger,function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){listener.apply(null,args);},debounce||10);//default time to emit scroll event
});}Triggers.Initializers.addResizeListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');if($nodes.length){debounceGlobalListener(debounce,'resize.zf.trigger',Triggers.Listeners.Global.resizeListener,$nodes);}};Triggers.Initializers.addScrollListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');if($nodes.length){debounceGlobalListener(debounce,'scroll.zf.trigger',Triggers.Listeners.Global.scrollListener,$nodes);}};Triggers.Initializers.addMutationEventsListener=function($elem){if(!MutationObserver){return false;}var $nodes=$elem.find('[data-resize], [data-scroll], [data-mutate]');//element callback
var listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);//trigger the event handler for the element depending on type
switch(mutationRecordsList[0].type){case"attributes":if($target.attr("data-events")==="scroll"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);}if($target.attr("data-events")==="resize"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('resizeme.zf.trigger',[$target]);}if(mutationRecordsList[0].attributeName==="style"){$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);}break;case"childList":$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);break;default:return false;//nothing
}};if($nodes.length){//for each element that needs to listen for resizing, scrolling, or mutation add a single observer
for(var i=0;i<=$nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe($nodes[i],{attributes:true,childList:true,characterData:false,subtree:true,attributeFilter:["data-events","style"]});}}};Triggers.Initializers.addSimpleListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addOpenListener($document);Triggers.Initializers.addCloseListener($document);Triggers.Initializers.addToggleListener($document);Triggers.Initializers.addCloseableListener($document);Triggers.Initializers.addToggleFocusListener($document);};Triggers.Initializers.addGlobalListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addMutationEventsListener($document);Triggers.Initializers.addResizeListener();Triggers.Initializers.addScrollListener();Triggers.Initializers.addClosemeListener();};Triggers.init=function($,Foundation){if(typeof $.triggersInitialized==='undefined'){var $document=$(document);if(document.readyState==="complete"){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();}else{$(window).on('load',function(){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();});}$.triggersInitialized=true;}if(Foundation){Foundation.Triggers=Triggers;// Legacy included to be backwards compatible for now.
Foundation.IHearYou=Triggers.Initializers.addGlobalListeners;}};/***/},/***/96:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(30);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=97);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/10:/***/function _(module,exports){module.exports={onImagesLoaded:window.Foundation.onImagesLoaded};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/31:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_tabs__=__webpack_require__(61);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_tabs__["a"/* Tabs */],'Tabs');/***/},/***/5:/***/function _(module,exports){module.exports={Keyboard:window.Foundation.Keyboard};/***/},/***/61:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Tabs;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Tabs module.
 * @module foundation.tabs
 * @requires foundation.util.keyboard
 * @requires foundation.util.imageLoader if tabs contain images
 */var Tabs=function(_Plugin){_inherits(Tabs,_Plugin);function Tabs(){_classCallCheck(this,Tabs);return _possibleConstructorReturn(this,(Tabs.__proto__||Object.getPrototypeOf(Tabs)).apply(this,arguments));}_createClass(Tabs,[{key:'_setup',/**
     * Creates a new instance of tabs.
     * @class
     * @name Tabs
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Tabs.defaults,this.$element.data(),options);this.className='Tabs';// ie9 back compat
this._init();__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Tabs',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'previous','ARROW_DOWN':'next','ARROW_LEFT':'previous'// 'TAB': 'next',
// 'SHIFT_TAB': 'previous'
});}/**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */},{key:'_init',value:function _init(){var _this3=this;var _this=this;this.$element.attr({'role':'tablist'});this.$tabTitles=this.$element.find('.'+this.options.linkClass);this.$tabContent=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content="'+this.$element[0].id+'"]');this.$tabTitles.each(function(){var $elem=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),$link=$elem.find('a'),isActive=$elem.hasClass(''+_this.options.linkActiveClass),hash=$link.attr('data-tabs-target')||$link[0].hash.slice(1),linkId=$link[0].id?$link[0].id:hash+'-label',$tabContent=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+hash);$elem.attr({'role':'presentation'});$link.attr({'role':'tab','aria-controls':hash,'aria-selected':isActive,'id':linkId,'tabindex':isActive?'0':'-1'});$tabContent.attr({'role':'tabpanel','aria-labelledby':linkId});if(!isActive){$tabContent.attr('aria-hidden','true');}if(isActive&&_this.options.autoFocus){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).load(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({scrollTop:$elem.offset().top},_this.options.deepLinkSmudgeDelay,function(){$link.focus();});});}});if(this.options.matchHeight){var $images=this.$tabContent.find('img');if($images.length){__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__["onImagesLoaded"])($images,this._setHeight.bind(this));}else{this._setHeight();}}//current context-bound function to open tabs on page load or history popstate
this._checkDeepLink=function(){var anchor=window.location.hash;//need a hash and a relevant anchor in this tabset
if(anchor.length){var $link=_this3.$element.find('[href$="'+anchor+'"]');if($link.length){_this3.selectTab(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor),true);//roll up a little to show the titles
if(_this3.options.deepLinkSmudge){var offset=_this3.$element.offset();__WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({scrollTop:offset.top},_this3.options.deepLinkSmudgeDelay);}/**
              * Fires when the zplugin has deeplinked at pageload
              * @event Tabs#deeplink
              */_this3.$element.trigger('deeplink.zf.tabs',[$link,__WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor)]);}}};//use browser to open a tab, if it exists in this tabset
if(this.options.deepLink){this._checkDeepLink();}this._events();}/**
     * Adds event handlers for items within the tabs.
     * @private
     */},{key:'_events',value:function _events(){this._addKeyHandler();this._addClickHandler();this._setHeightMqHandler=null;if(this.options.matchHeight){this._setHeightMqHandler=this._setHeight.bind(this);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery',this._setHeightMqHandler);}if(this.options.deepLink){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate',this._checkDeepLink);}}/**
     * Adds click handlers for items within the tabs.
     * @private
     */},{key:'_addClickHandler',value:function _addClickHandler(){var _this=this;this.$element.off('click.zf.tabs').on('click.zf.tabs','.'+this.options.linkClass,function(e){e.preventDefault();e.stopPropagation();_this._handleTabChange(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));});}/**
     * Adds keyboard event handlers for items within the tabs.
     * @private
     */},{key:'_addKeyHandler',value:function _addKeyHandler(){var _this=this;this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs',function(e){if(e.which===9)return;var $element=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),$elements=$element.parent('ul').children('li'),$prevElement,$nextElement;$elements.each(function(i){if(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)){if(_this.options.wrapOnKeys){$prevElement=i===0?$elements.last():$elements.eq(i-1);$nextElement=i===$elements.length-1?$elements.first():$elements.eq(i+1);}else{$prevElement=$elements.eq(Math.max(0,i-1));$nextElement=$elements.eq(Math.min(i+1,$elements.length-1));}return;}});// handle keyboard event with keyboard util
__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e,'Tabs',{open:function open(){$element.find('[role="tab"]').focus();_this._handleTabChange($element);},previous:function previous(){$prevElement.find('[role="tab"]').focus();_this._handleTabChange($prevElement);},next:function next(){$nextElement.find('[role="tab"]').focus();_this._handleTabChange($nextElement);},handled:function handled(){e.stopPropagation();e.preventDefault();}});});}/**
     * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.
     * @param {jQuery} $target - Tab to open.
     * @param {boolean} historyHandled - browser has already handled a history update
     * @fires Tabs#change
     * @function
     */},{key:'_handleTabChange',value:function _handleTabChange($target,historyHandled){/**
       * Check for active class on target. Collapse if exists.
       */if($target.hasClass(''+this.options.linkActiveClass)){if(this.options.activeCollapse){this._collapseTab($target);/**
           * Fires when the zplugin has successfully collapsed tabs.
           * @event Tabs#collapse
           */this.$element.trigger('collapse.zf.tabs',[$target]);}return;}var $oldTab=this.$element.find('.'+this.options.linkClass+'.'+this.options.linkActiveClass),$tabLink=$target.find('[role="tab"]'),hash=$tabLink.attr('data-tabs-target')||$tabLink[0].hash.slice(1),$targetContent=this.$tabContent.find('#'+hash);//close old tab
this._collapseTab($oldTab);//open new tab
this._openTab($target);//either replace or update browser history
if(this.options.deepLink&&!historyHandled){var anchor=$target.find('a').attr('href');if(this.options.updateHistory){history.pushState({},'',anchor);}else{history.replaceState({},'',anchor);}}/**
       * Fires when the plugin has successfully changed tabs.
       * @event Tabs#change
       */this.$element.trigger('change.zf.tabs',[$target,$targetContent]);//fire to children a mutation event
$targetContent.find("[data-mutate]").trigger("mutateme.zf.trigger");}/**
     * Opens the tab `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to Open.
     * @function
     */},{key:'_openTab',value:function _openTab($target){var $tabLink=$target.find('[role="tab"]'),hash=$tabLink.attr('data-tabs-target')||$tabLink[0].hash.slice(1),$targetContent=this.$tabContent.find('#'+hash);$target.addClass(''+this.options.linkActiveClass);$tabLink.attr({'aria-selected':'true','tabindex':'0'});$targetContent.addClass(''+this.options.panelActiveClass).removeAttr('aria-hidden');}/**
     * Collapses `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to Open.
     * @function
     */},{key:'_collapseTab',value:function _collapseTab($target){var $target_anchor=$target.removeClass(''+this.options.linkActiveClass).find('[role="tab"]').attr({'aria-selected':'false','tabindex':-1});__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+$target_anchor.attr('aria-controls')).removeClass(''+this.options.panelActiveClass).attr({'aria-hidden':'true'});}/**
     * Public method for selecting a content pane to display.
     * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
     * @param {boolean} historyHandled - browser has already handled a history update
     * @function
     */},{key:'selectTab',value:function selectTab(elem,historyHandled){var idStr;if((typeof elem==='undefined'?'undefined':_typeof(elem))==='object'){idStr=elem[0].id;}else{idStr=elem;}if(idStr.indexOf('#')<0){idStr='#'+idStr;}var $target=this.$tabTitles.find('[href$="'+idStr+'"]').parent('.'+this.options.linkClass);this._handleTabChange($target,historyHandled);}},{key:'_setHeight',/**
     * Sets the height of each panel to the height of the tallest panel.
     * If enabled in options, gets called on media query change.
     * If loading content via external source, can be called directly or with _reflow.
     * If enabled with `data-match-height="true"`, tabs sets to equal height
     * @function
     * @private
     */value:function _setHeight(){var max=0,_this=this;// Lock down the `this` value for the root tabs object
this.$tabContent.find('.'+this.options.panelClass).css('height','').each(function(){var panel=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),isActive=panel.hasClass(''+_this.options.panelActiveClass);// get the options from the parent instead of trying to get them from the child
if(!isActive){panel.css({'visibility':'hidden','display':'block'});}var temp=this.getBoundingClientRect().height;if(!isActive){panel.css({'visibility':'','display':''});}max=temp>max?temp:max;}).css('height',max+'px');}/**
     * Destroys an instance of an tabs.
     * @fires Tabs#destroyed
     */},{key:'_destroy',value:function _destroy(){this.$element.find('.'+this.options.linkClass).off('.zf.tabs').hide().end().find('.'+this.options.panelClass).hide();if(this.options.matchHeight){if(this._setHeightMqHandler!=null){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('changed.zf.mediaquery',this._setHeightMqHandler);}}if(this.options.deepLink){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate',this._checkDeepLink);}}}]);return Tabs;}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);Tabs.defaults={/**
   * Allows the window to scroll to content of pane specified by hash anchor
   * @option
   * @type {boolean}
   * @default false
   */deepLink:false,/**
   * Adjust the deep link scroll to make sure the top of the tab panel is visible
   * @option
   * @type {boolean}
   * @default false
   */deepLinkSmudge:false,/**
   * Animation time (ms) for the deep link adjustment
   * @option
   * @type {number}
   * @default 300
   */deepLinkSmudgeDelay:300,/**
   * Update the browser history with the open tab
   * @option
   * @type {boolean}
   * @default false
   */updateHistory:false,/**
   * Allows the window to scroll to content of active pane on load if set to true.
   * Not recommended if more than one tab panel per page.
   * @option
   * @type {boolean}
   * @default false
   */autoFocus:false,/**
   * Allows keyboard input to 'wrap' around the tab links.
   * @option
   * @type {boolean}
   * @default true
   */wrapOnKeys:true,/**
   * Allows the tab content panes to match heights if set to true.
   * @option
   * @type {boolean}
   * @default false
   */matchHeight:false,/**
   * Allows active tabs to collapse when clicked.
   * @option
   * @type {boolean}
   * @default false
   */activeCollapse:false,/**
   * Class applied to `li`'s in tab link list.
   * @option
   * @type {string}
   * @default 'tabs-title'
   */linkClass:'tabs-title',/**
   * Class applied to the active `li` in tab link list.
   * @option
   * @type {string}
   * @default 'is-active'
   */linkActiveClass:'is-active',/**
   * Class applied to the content containers.
   * @option
   * @type {string}
   * @default 'tabs-panel'
   */panelClass:'tabs-panel',/**
   * Class applied to the active content container.
   * @option
   * @type {string}
   * @default 'is-active'
   */panelActiveClass:'is-active'};/***/},/***/97:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(31);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=98);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/32:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_toggler__=__webpack_require__(62);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_toggler__["a"/* Toggler */],'Toggler');/***/},/***/4:/***/function _(module,exports){module.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};/***/},/***/62:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Toggler;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__=__webpack_require__(7);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Toggler module.
 * @module foundation.toggler
 * @requires foundation.util.motion
 * @requires foundation.util.triggers
 */var Toggler=function(_Plugin){_inherits(Toggler,_Plugin);function Toggler(){_classCallCheck(this,Toggler);return _possibleConstructorReturn(this,(Toggler.__proto__||Object.getPrototypeOf(Toggler)).apply(this,arguments));}_createClass(Toggler,[{key:'_setup',/**
     * Creates a new instance of Toggler.
     * @class
     * @name Toggler
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Toggler.defaults,element.data(),options);this.className='';this.className='Toggler';// ie9 back compat
// Triggers init is idempotent, just need to make sure it is initialized
__WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__["a"/* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);this._init();this._events();}/**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */},{key:'_init',value:function _init(){var input;// Parse animation classes if they were set
if(this.options.animate){input=this.options.animate.split(' ');this.animationIn=input[0];this.animationOut=input[1]||null;}// Otherwise, parse toggle class
else{input=this.$element.data('toggler');// Allow for a . at the beginning of the string
this.className=input[0]==='.'?input.slice(1):input;}// Add ARIA attributes to triggers
var id=this.$element[0].id;__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="'+id+'"], [data-close="'+id+'"], [data-toggle="'+id+'"]').attr('aria-controls',id);// If the target is hidden, add aria-hidden
this.$element.attr('aria-expanded',this.$element.is(':hidden')?false:true);}/**
     * Initializes events for the toggle trigger.
     * @function
     * @private
     */},{key:'_events',value:function _events(){this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger',this.toggle.bind(this));}/**
     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
     * @function
     * @fires Toggler#on
     * @fires Toggler#off
     */},{key:'toggle',value:function toggle(){this[this.options.animate?'_toggleAnimate':'_toggleClass']();}},{key:'_toggleClass',value:function _toggleClass(){this.$element.toggleClass(this.className);var isOn=this.$element.hasClass(this.className);if(isOn){/**
         * Fires if the target element has the class after a toggle.
         * @event Toggler#on
         */this.$element.trigger('on.zf.toggler');}else{/**
         * Fires if the target element does not have the class after a toggle.
         * @event Toggler#off
         */this.$element.trigger('off.zf.toggler');}this._updateARIA(isOn);this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');}},{key:'_toggleAnimate',value:function _toggleAnimate(){var _this=this;if(this.$element.is(':hidden')){__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateIn(this.$element,this.animationIn,function(){_this._updateARIA(true);this.trigger('on.zf.toggler');this.find('[data-mutate]').trigger('mutateme.zf.trigger');});}else{__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(this.$element,this.animationOut,function(){_this._updateARIA(false);this.trigger('off.zf.toggler');this.find('[data-mutate]').trigger('mutateme.zf.trigger');});}}},{key:'_updateARIA',value:function _updateARIA(isOn){this.$element.attr('aria-expanded',isOn?true:false);}/**
     * Destroys the instance of Toggler on the element.
     * @function
     */},{key:'_destroy',value:function _destroy(){this.$element.off('.zf.toggler');}}]);return Toggler;}(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["Plugin"]);Toggler.defaults={/**
   * Tells the plugin if the element should animated when toggled.
   * @option
   * @type {boolean}
   * @default false
   */animate:false};/***/},/***/7:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Triggers;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};var Triggers={Listeners:{Basic:{},Global:{}},Initializers:{}};Triggers.Listeners.Basic={openListener:function openListener(){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'open');},closeListener:function closeListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'close');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');}},toggleListener:function toggleListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'toggle');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');}},closeableListener:function closeableListener(e){e.stopPropagation();var animation=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');if(animation!==''){__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),animation,function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');});}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');}},toggleFocusListener:function toggleFocusListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id).triggerHandler('toggle.zf.trigger',[__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);}};// Elements with [data-open] will reveal a plugin that supports it when clicked.
Triggers.Initializers.addOpenListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.openListener);$elem.on('click.zf.trigger','[data-open]',Triggers.Listeners.Basic.openListener);};// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
Triggers.Initializers.addCloseListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.closeListener);$elem.on('click.zf.trigger','[data-close]',Triggers.Listeners.Basic.closeListener);};// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
Triggers.Initializers.addToggleListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.toggleListener);$elem.on('click.zf.trigger','[data-toggle]',Triggers.Listeners.Basic.toggleListener);};// Elements with [data-closable] will respond to close.zf.trigger events.
Triggers.Initializers.addCloseableListener=function($elem){$elem.off('close.zf.trigger',Triggers.Listeners.Basic.closeableListener);$elem.on('close.zf.trigger','[data-closeable], [data-closable]',Triggers.Listeners.Basic.closeableListener);};// Elements with [data-toggle-focus] will respond to coming in and out of focus
Triggers.Initializers.addToggleFocusListener=function($elem){$elem.off('focus.zf.trigger blur.zf.trigger',Triggers.Listeners.Basic.toggleFocusListener);$elem.on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',Triggers.Listeners.Basic.toggleFocusListener);};// More Global/complex listeners and triggers
Triggers.Listeners.Global={resizeListener:function resizeListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event
$nodes.attr('data-events',"resize");},scrollListener:function scrollListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event
$nodes.attr('data-events',"scroll");},closeMeListener:function closeMeListener(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-'+plugin+']').not('[data-yeti-box="'+pluginId+'"]');plugins.each(function(){var _this=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);_this.triggerHandler('close.zf.trigger',[_this]);});}// Global, parses whole document.
};Triggers.Initializers.addClosemeListener=function(pluginName){var yetiBoxes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners,Triggers.Listeners.Global.closeMeListener);}};function debounceGlobalListener(debounce,trigger,listener){var timer=void 0,args=Array.prototype.slice.call(arguments,3);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger,function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){listener.apply(null,args);},debounce||10);//default time to emit scroll event
});}Triggers.Initializers.addResizeListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');if($nodes.length){debounceGlobalListener(debounce,'resize.zf.trigger',Triggers.Listeners.Global.resizeListener,$nodes);}};Triggers.Initializers.addScrollListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');if($nodes.length){debounceGlobalListener(debounce,'scroll.zf.trigger',Triggers.Listeners.Global.scrollListener,$nodes);}};Triggers.Initializers.addMutationEventsListener=function($elem){if(!MutationObserver){return false;}var $nodes=$elem.find('[data-resize], [data-scroll], [data-mutate]');//element callback
var listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);//trigger the event handler for the element depending on type
switch(mutationRecordsList[0].type){case"attributes":if($target.attr("data-events")==="scroll"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);}if($target.attr("data-events")==="resize"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('resizeme.zf.trigger',[$target]);}if(mutationRecordsList[0].attributeName==="style"){$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);}break;case"childList":$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);break;default:return false;//nothing
}};if($nodes.length){//for each element that needs to listen for resizing, scrolling, or mutation add a single observer
for(var i=0;i<=$nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe($nodes[i],{attributes:true,childList:true,characterData:false,subtree:true,attributeFilter:["data-events","style"]});}}};Triggers.Initializers.addSimpleListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addOpenListener($document);Triggers.Initializers.addCloseListener($document);Triggers.Initializers.addToggleListener($document);Triggers.Initializers.addCloseableListener($document);Triggers.Initializers.addToggleFocusListener($document);};Triggers.Initializers.addGlobalListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addMutationEventsListener($document);Triggers.Initializers.addResizeListener();Triggers.Initializers.addScrollListener();Triggers.Initializers.addClosemeListener();};Triggers.init=function($,Foundation){if(typeof $.triggersInitialized==='undefined'){var $document=$(document);if(document.readyState==="complete"){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();}else{$(window).on('load',function(){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();});}$.triggersInitialized=true;}if(Foundation){Foundation.Triggers=Triggers;// Legacy included to be backwards compatible for now.
Foundation.IHearYou=Triggers.Initializers.addGlobalListeners;}};/***/},/***/98:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(32);/***/}/******/});
;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/******/(function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// identity function for calling harmony imports with the correct context
/******/__webpack_require__.i=function(value){return value;};/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=99);/******/})(/************************************************************************//******/{/***/0:/***/function _(module,exports){module.exports=jQuery;/***/},/***/1:/***/function _(module,exports){module.exports={Foundation:window.Foundation};/***/},/***/11:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Positionable;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__=__webpack_require__(8);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var POSITIONS=['left','right','top','bottom'];var VERTICAL_ALIGNMENTS=['top','bottom','center'];var HORIZONTAL_ALIGNMENTS=['left','right','center'];var ALIGNMENTS={'left':VERTICAL_ALIGNMENTS,'right':VERTICAL_ALIGNMENTS,'top':HORIZONTAL_ALIGNMENTS,'bottom':HORIZONTAL_ALIGNMENTS};function nextItem(item,array){var currentIdx=array.indexOf(item);if(currentIdx===array.length-1){return array[0];}else{return array[currentIdx+1];}}var Positionable=function(_Plugin){_inherits(Positionable,_Plugin);function Positionable(){_classCallCheck(this,Positionable);return _possibleConstructorReturn(this,(Positionable.__proto__||Object.getPrototypeOf(Positionable)).apply(this,arguments));}_createClass(Positionable,[{key:'_init',/**
     * Abstract class encapsulating the tether-like explicit positioning logic
     * including repositioning based on overlap.
     * Expects classes to define defaults for vOffset, hOffset, position,
     * alignment, allowOverlap, and allowBottomOverlap. They can do this by
     * extending the defaults, or (for now recommended due to the way docs are
     * generated) by explicitly declaring them.
     *
     **/value:function _init(){this.triedPositions={};this.position=this.options.position==='auto'?this._getDefaultPosition():this.options.position;this.alignment=this.options.alignment==='auto'?this._getDefaultAlignment():this.options.alignment;}},{key:'_getDefaultPosition',value:function _getDefaultPosition(){return'bottom';}},{key:'_getDefaultAlignment',value:function _getDefaultAlignment(){switch(this.position){case'bottom':case'top':return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["rtl"])()?'right':'left';case'left':case'right':return'bottom';}}/**
     * Adjusts the positionable possible positions by iterating through alignments
     * and positions.
     * @function
     * @private
     */},{key:'_reposition',value:function _reposition(){if(this._alignmentsExhausted(this.position)){this.position=nextItem(this.position,POSITIONS);this.alignment=ALIGNMENTS[this.position][0];}else{this._realign();}}/**
     * Adjusts the dropdown pane possible positions by iterating through alignments
     * on the current position.
     * @function
     * @private
     */},{key:'_realign',value:function _realign(){this._addTriedPosition(this.position,this.alignment);this.alignment=nextItem(this.alignment,ALIGNMENTS[this.position]);}},{key:'_addTriedPosition',value:function _addTriedPosition(position,alignment){this.triedPositions[position]=this.triedPositions[position]||[];this.triedPositions[position].push(alignment);}},{key:'_positionsExhausted',value:function _positionsExhausted(){var isExhausted=true;for(var i=0;i<POSITIONS.length;i++){isExhausted=isExhausted&&this._alignmentsExhausted(POSITIONS[i]);}return isExhausted;}},{key:'_alignmentsExhausted',value:function _alignmentsExhausted(position){return this.triedPositions[position]&&this.triedPositions[position].length==ALIGNMENTS[position].length;}// When we're trying to center, we don't want to apply offset that's going to
// take us just off center, so wrap around to return 0 for the appropriate
// offset in those alignments.  TODO: Figure out if we want to make this
// configurable behavior... it feels more intuitive, especially for tooltips, but
// it's possible someone might actually want to start from center and then nudge
// slightly off.
},{key:'_getVOffset',value:function _getVOffset(){return this.options.vOffset;}},{key:'_getHOffset',value:function _getHOffset(){return this.options.hOffset;}},{key:'_setPosition',value:function _setPosition($anchor,$element,$parent){if($anchor.attr('aria-expanded')==='false'){return false;}var $eleDims=__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetDimensions($element),$anchorDims=__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetDimensions($anchor);$element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element,$anchor,this.position,this.alignment,this._getVOffset(),this._getHOffset()));if(!this.options.allowOverlap){var overlaps={};var minOverlap=100000000;// default coordinates to how we start, in case we can't figure out better
var minCoordinates={position:this.position,alignment:this.alignment};while(!this._positionsExhausted()){var overlap=__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].OverlapArea($element,$parent,false,false,this.options.allowBottomOverlap);if(overlap===0){return;}if(overlap<minOverlap){minOverlap=overlap;minCoordinates={position:this.position,alignment:this.alignment};}this._reposition();$element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element,$anchor,this.position,this.alignment,this._getVOffset(),this._getHOffset()));}// If we get through the entire loop, there was no non-overlapping
// position available. Pick the version with least overlap.
this.position=minCoordinates.position;this.alignment=minCoordinates.alignment;$element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element,$anchor,this.position,this.alignment,this._getVOffset(),this._getHOffset()));}}}]);return Positionable;}(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__["Plugin"]);Positionable.defaults={/**
   * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */position:'auto',/**
   * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */alignment:'auto',/**
   * Allow overlap of container/window. If false, dropdown positionable first
   * try to position as defined by data-position and data-alignment, but
   * reposition if it would cause an overflow.
   * @option
   * @type {boolean}
   * @default false
   */allowOverlap:false,/**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * @option
   * @type {boolean}
   * @default true
   */allowBottomOverlap:true,/**
   * Number of pixels the positionable should be separated vertically from anchor
   * @option
   * @type {number}
   * @default 0
   */vOffset:0,/**
   * Number of pixels the positionable should be separated horizontally from anchor
   * @option
   * @type {number}
   * @default 0
   */hOffset:0};/***/},/***/2:/***/function _(module,exports){module.exports={Plugin:window.Foundation.Plugin};/***/},/***/3:/***/function _(module,exports){module.exports={rtl:window.Foundation.rtl,GetYoDigits:window.Foundation.GetYoDigits,transitionend:window.Foundation.transitionend};/***/},/***/33:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_tooltip__=__webpack_require__(63);__WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_tooltip__["a"/* Tooltip */],'Tooltip');/***/},/***/4:/***/function _(module,exports){module.exports={Motion:window.Foundation.Motion,Move:window.Foundation.Move};/***/},/***/6:/***/function _(module,exports){module.exports={MediaQuery:window.Foundation.MediaQuery};/***/},/***/63:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Tooltip;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_positionable__=__webpack_require__(11);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
 * Tooltip module.
 * @module foundation.tooltip
 * @requires foundation.util.box
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.triggers
 */var Tooltip=function(_Positionable){_inherits(Tooltip,_Positionable);function Tooltip(){_classCallCheck(this,Tooltip);return _possibleConstructorReturn(this,(Tooltip.__proto__||Object.getPrototypeOf(Tooltip)).apply(this,arguments));}_createClass(Tooltip,[{key:'_setup',/**
     * Creates a new instance of a Tooltip.
     * @class
     * @name Tooltip
     * @fires Tooltip#init
     * @param {jQuery} element - jQuery object to attach a tooltip to.
     * @param {Object} options - object to extend the default configuration.
     */value:function _setup(element,options){this.$element=element;this.options=__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({},Tooltip.defaults,this.$element.data(),options);this.className='Tooltip';// ie9 back compat
this.isActive=false;this.isClick=false;// Triggers init is idempotent, just need to make sure it is initialized
__WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__["a"/* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);this._init();}/**
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private
     */},{key:'_init',value:function _init(){__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"]._init();var elemId=this.$element.attr('aria-describedby')||__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["GetYoDigits"])(6,'tooltip');this.options.tipText=this.options.tipText||this.$element.attr('title');this.template=this.options.template?__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.template):this._buildTemplate(elemId);if(this.options.allowHtml){this.template.appendTo(document.body).html(this.options.tipText).hide();}else{this.template.appendTo(document.body).text(this.options.tipText).hide();}this.$element.attr({'title':'','aria-describedby':elemId,'data-yeti-box':elemId,'data-toggle':elemId,'data-resize':elemId}).addClass(this.options.triggerClass);_get(Tooltip.prototype.__proto__||Object.getPrototypeOf(Tooltip.prototype),'_init',this).call(this);this._events();}},{key:'_getDefaultPosition',value:function _getDefaultPosition(){// handle legacy classnames
var position=this.$element[0].className.match(/\b(top|left|right|bottom)\b/g);return position?position[0]:'top';}},{key:'_getDefaultAlignment',value:function _getDefaultAlignment(){return'center';}},{key:'_getHOffset',value:function _getHOffset(){if(this.position==='left'||this.position==='right'){return this.options.hOffset+this.options.tooltipWidth;}else{return this.options.hOffset;}}},{key:'_getVOffset',value:function _getVOffset(){if(this.position==='top'||this.position==='bottom'){return this.options.vOffset+this.options.tooltipHeight;}else{return this.options.vOffset;}}/**
     * builds the tooltip element, adds attributes, and returns the template.
     * @private
     */},{key:'_buildTemplate',value:function _buildTemplate(id){var templateClasses=(this.options.tooltipClass+' '+this.options.positionClass+' '+this.options.templateClasses).trim();var $template=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div></div>').addClass(templateClasses).attr({'role':'tooltip','aria-hidden':true,'data-is-active':false,'data-is-focus':false,'id':id});return $template;}/**
     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
     * if the tooltip is larger than the screen width, default to full width - any user selected margin
     * @private
     */},{key:'_setPosition',value:function _setPosition(){_get(Tooltip.prototype.__proto__||Object.getPrototypeOf(Tooltip.prototype),'_setPosition',this).call(this,this.$element,this.template);}/**
     * reveals the tooltip, and fires an event to close any other open tooltips on the page
     * @fires Tooltip#closeme
     * @fires Tooltip#show
     * @function
     */},{key:'show',value:function show(){if(this.options.showOn!=='all'&&!__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].is(this.options.showOn)){// console.error('The screen is too small to display this tooltip');
return false;}var _this=this;this.template.css('visibility','hidden').show();this._setPosition();this.template.removeClass('top bottom left right').addClass(this.position);this.template.removeClass('align-top align-bottom align-left align-right align-center').addClass('align-'+this.alignment);/**
       * Fires to close all other open tooltips on the page
       * @event Closeme#tooltip
       */this.$element.trigger('closeme.zf.tooltip',this.template.attr('id'));this.template.attr({'data-is-active':true,'aria-hidden':false});_this.isActive=true;// console.log(this.template);
this.template.stop().hide().css('visibility','').fadeIn(this.options.fadeInDuration,function(){//maybe do stuff?
});/**
       * Fires when the tooltip is shown
       * @event Tooltip#show
       */this.$element.trigger('show.zf.tooltip');}/**
     * Hides the current tooltip, and resets the positioning class if it was changed due to collision
     * @fires Tooltip#hide
     * @function
     */},{key:'hide',value:function hide(){// console.log('hiding', this.$element.data('yeti-box'));
var _this=this;this.template.stop().attr({'aria-hidden':true,'data-is-active':false}).fadeOut(this.options.fadeOutDuration,function(){_this.isActive=false;_this.isClick=false;});/**
       * fires when the tooltip is hidden
       * @event Tooltip#hide
       */this.$element.trigger('hide.zf.tooltip');}/**
     * adds event listeners for the tooltip and its anchor
     * TODO combine some of the listeners like focus and mouseenter, etc.
     * @private
     */},{key:'_events',value:function _events(){var _this=this;var $template=this.template;var isFocus=false;if(!this.options.disableHover){this.$element.on('mouseenter.zf.tooltip',function(e){if(!_this.isActive){_this.timeout=setTimeout(function(){_this.show();},_this.options.hoverDelay);}}).on('mouseleave.zf.tooltip',function(e){clearTimeout(_this.timeout);if(!isFocus||_this.isClick&&!_this.options.clickOpen){_this.hide();}});}if(this.options.clickOpen){this.$element.on('mousedown.zf.tooltip',function(e){e.stopImmediatePropagation();if(_this.isClick){//_this.hide();
// _this.isClick = false;
}else{_this.isClick=true;if((_this.options.disableHover||!_this.$element.attr('tabindex'))&&!_this.isActive){_this.show();}}});}else{this.$element.on('mousedown.zf.tooltip',function(e){e.stopImmediatePropagation();_this.isClick=true;});}if(!this.options.disableForTouch){this.$element.on('tap.zf.tooltip touchend.zf.tooltip',function(e){_this.isActive?_this.hide():_this.show();});}this.$element.on({// 'toggle.zf.trigger': this.toggle.bind(this),
// 'close.zf.trigger': this.hide.bind(this)
'close.zf.trigger':this.hide.bind(this)});this.$element.on('focus.zf.tooltip',function(e){isFocus=true;if(_this.isClick){// If we're not showing open on clicks, we need to pretend a click-launched focus isn't
// a real focus, otherwise on hover and come back we get bad behavior
if(!_this.options.clickOpen){isFocus=false;}return false;}else{_this.show();}}).on('focusout.zf.tooltip',function(e){isFocus=false;_this.isClick=false;_this.hide();}).on('resizeme.zf.trigger',function(){if(_this.isActive){_this._setPosition();}});}/**
     * adds a toggle method, in addition to the static show() & hide() functions
     * @function
     */},{key:'toggle',value:function toggle(){if(this.isActive){this.hide();}else{this.show();}}/**
     * Destroys an instance of tooltip, removes template element from the view.
     * @function
     */},{key:'_destroy',value:function _destroy(){this.$element.attr('title',this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');this.template.remove();}}]);return Tooltip;}(__WEBPACK_IMPORTED_MODULE_4__foundation_positionable__["a"/* Positionable */]);Tooltip.defaults={disableForTouch:false,/**
   * Time, in ms, before a tooltip should open on hover.
   * @option
   * @type {number}
   * @default 200
   */hoverDelay:200,/**
   * Time, in ms, a tooltip should take to fade into view.
   * @option
   * @type {number}
   * @default 150
   */fadeInDuration:150,/**
   * Time, in ms, a tooltip should take to fade out of view.
   * @option
   * @type {number}
   * @default 150
   */fadeOutDuration:150,/**
   * Disables hover events from opening the tooltip if set to true
   * @option
   * @type {boolean}
   * @default false
   */disableHover:false,/**
   * Optional addtional classes to apply to the tooltip template on init.
   * @option
   * @type {string}
   * @default ''
   */templateClasses:'',/**
   * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
   * @option
   * @type {string}
   * @default 'tooltip'
   */tooltipClass:'tooltip',/**
   * Class applied to the tooltip anchor element.
   * @option
   * @type {string}
   * @default 'has-tip'
   */triggerClass:'has-tip',/**
   * Minimum breakpoint size at which to open the tooltip.
   * @option
   * @type {string}
   * @default 'small'
   */showOn:'small',/**
   * Custom template to be used to generate markup for tooltip.
   * @option
   * @type {string}
   * @default ''
   */template:'',/**
   * Text displayed in the tooltip template on open.
   * @option
   * @type {string}
   * @default ''
   */tipText:'',touchCloseText:'Tap to close.',/**
   * Allows the tooltip to remain open if triggered with a click or touch event.
   * @option
   * @type {boolean}
   * @default true
   */clickOpen:true,/**
   * DEPRECATED Additional positioning classes, set by the JS
   * @option
   * @type {string}
   * @default ''
   */positionClass:'',/**
   * Position of tooltip. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */position:'auto',/**
   * Alignment of tooltip relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */alignment:'auto',/**
   * Allow overlap of container/window. If false, tooltip will first try to
   * position as defined by data-position and data-alignment, but reposition if
   * it would cause an overflow.  @option
   * @type {boolean}
   * @default false
   */allowOverlap:false,/**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * Less common for tooltips.
   * @option
   * @type {boolean}
   * @default false
   */allowBottomOverlap:false,/**
   * Distance, in pixels, the template should push away from the anchor on the Y axis.
   * @option
   * @type {number}
   * @default 0
   */vOffset:0,/**
   * Distance, in pixels, the template should push away from the anchor on the X axis
   * @option
   * @type {number}
   * @default 0
   */hOffset:0,/**
   * Distance, in pixels, the template spacing auto-adjust for a vertical tooltip
   * @option
   * @type {number}
   * @default 14
   */tooltipHeight:14,/**
   * Distance, in pixels, the template spacing auto-adjust for a horizontal tooltip
   * @option
   * @type {number}
   * @default 12
   */tooltipWidth:12,/**
  * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,
  * allowing HTML may open yourself up to XSS attacks.
  * @option
  * @type {boolean}
  * @default false
  */allowHtml:false};/**
 * TODO utilize resize event trigger
 *//***/},/***/7:/***/function _(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return Triggers;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};var Triggers={Listeners:{Basic:{},Global:{}},Initializers:{}};Triggers.Listeners.Basic={openListener:function openListener(){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'open');},closeListener:function closeListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'close');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');}},toggleListener:function toggleListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');if(id){triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),'toggle');}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');}},closeableListener:function closeableListener(e){e.stopPropagation();var animation=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');if(animation!==''){__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),animation,function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');});}else{__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');}},toggleFocusListener:function toggleFocusListener(){var id=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');__WEBPACK_IMPORTED_MODULE_0_jquery___default()('#'+id).triggerHandler('toggle.zf.trigger',[__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);}};// Elements with [data-open] will reveal a plugin that supports it when clicked.
Triggers.Initializers.addOpenListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.openListener);$elem.on('click.zf.trigger','[data-open]',Triggers.Listeners.Basic.openListener);};// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
Triggers.Initializers.addCloseListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.closeListener);$elem.on('click.zf.trigger','[data-close]',Triggers.Listeners.Basic.closeListener);};// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
Triggers.Initializers.addToggleListener=function($elem){$elem.off('click.zf.trigger',Triggers.Listeners.Basic.toggleListener);$elem.on('click.zf.trigger','[data-toggle]',Triggers.Listeners.Basic.toggleListener);};// Elements with [data-closable] will respond to close.zf.trigger events.
Triggers.Initializers.addCloseableListener=function($elem){$elem.off('close.zf.trigger',Triggers.Listeners.Basic.closeableListener);$elem.on('close.zf.trigger','[data-closeable], [data-closable]',Triggers.Listeners.Basic.closeableListener);};// Elements with [data-toggle-focus] will respond to coming in and out of focus
Triggers.Initializers.addToggleFocusListener=function($elem){$elem.off('focus.zf.trigger blur.zf.trigger',Triggers.Listeners.Basic.toggleFocusListener);$elem.on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',Triggers.Listeners.Basic.toggleFocusListener);};// More Global/complex listeners and triggers
Triggers.Listeners.Global={resizeListener:function resizeListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event
$nodes.attr('data-events',"resize");},scrollListener:function scrollListener($nodes){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event
$nodes.attr('data-events',"scroll");},closeMeListener:function closeMeListener(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-'+plugin+']').not('[data-yeti-box="'+pluginId+'"]');plugins.each(function(){var _this=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);_this.triggerHandler('close.zf.trigger',[_this]);});}// Global, parses whole document.
};Triggers.Initializers.addClosemeListener=function(pluginName){var yetiBoxes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners,Triggers.Listeners.Global.closeMeListener);}};function debounceGlobalListener(debounce,trigger,listener){var timer=void 0,args=Array.prototype.slice.call(arguments,3);__WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger,function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){listener.apply(null,args);},debounce||10);//default time to emit scroll event
});}Triggers.Initializers.addResizeListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');if($nodes.length){debounceGlobalListener(debounce,'resize.zf.trigger',Triggers.Listeners.Global.resizeListener,$nodes);}};Triggers.Initializers.addScrollListener=function(debounce){var $nodes=__WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');if($nodes.length){debounceGlobalListener(debounce,'scroll.zf.trigger',Triggers.Listeners.Global.scrollListener,$nodes);}};Triggers.Initializers.addMutationEventsListener=function($elem){if(!MutationObserver){return false;}var $nodes=$elem.find('[data-resize], [data-scroll], [data-mutate]');//element callback
var listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);//trigger the event handler for the element depending on type
switch(mutationRecordsList[0].type){case"attributes":if($target.attr("data-events")==="scroll"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);}if($target.attr("data-events")==="resize"&&mutationRecordsList[0].attributeName==="data-events"){$target.triggerHandler('resizeme.zf.trigger',[$target]);}if(mutationRecordsList[0].attributeName==="style"){$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);}break;case"childList":$target.closest("[data-mutate]").attr("data-events","mutate");$target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger',[$target.closest("[data-mutate]")]);break;default:return false;//nothing
}};if($nodes.length){//for each element that needs to listen for resizing, scrolling, or mutation add a single observer
for(var i=0;i<=$nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe($nodes[i],{attributes:true,childList:true,characterData:false,subtree:true,attributeFilter:["data-events","style"]});}}};Triggers.Initializers.addSimpleListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addOpenListener($document);Triggers.Initializers.addCloseListener($document);Triggers.Initializers.addToggleListener($document);Triggers.Initializers.addCloseableListener($document);Triggers.Initializers.addToggleFocusListener($document);};Triggers.Initializers.addGlobalListeners=function(){var $document=__WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);Triggers.Initializers.addMutationEventsListener($document);Triggers.Initializers.addResizeListener();Triggers.Initializers.addScrollListener();Triggers.Initializers.addClosemeListener();};Triggers.init=function($,Foundation){if(typeof $.triggersInitialized==='undefined'){var $document=$(document);if(document.readyState==="complete"){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();}else{$(window).on('load',function(){Triggers.Initializers.addSimpleListeners();Triggers.Initializers.addGlobalListeners();});}$.triggersInitialized=true;}if(Foundation){Foundation.Triggers=Triggers;// Legacy included to be backwards compatible for now.
Foundation.IHearYou=Triggers.Initializers.addGlobalListeners;}};/***/},/***/8:/***/function _(module,exports){module.exports={Box:window.Foundation.Box};/***/},/***/99:/***/function _(module,exports,__webpack_require__){module.exports=__webpack_require__(33);/***/}/******/});
;'use strict';/*! Swipebox v1.4.4 | Constantin Saguin csag.co | MIT License | github.com/brutaldesign/swipebox */;(function(window,document,$,undefined){$.swipebox=function(elem,options){// Default options
var ui,defaults={useCSS:true,useSVG:true,initialIndexOnArray:0,removeBarsOnMobile:true,hideCloseButtonOnMobile:false,hideBarsDelay:3000,videoMaxWidth:1140,vimeoColor:'cccccc',beforeOpen:null,afterOpen:null,afterClose:null,afterMedia:null,nextSlide:null,prevSlide:null,loopAtEnd:false,autoplayVideos:false,queryStringData:{},toggleClassOnLoad:''},plugin=this,elements=[],// slides array [ { href:'...', title:'...' }, ...],
$elem,selector=elem.selector,isMobile=navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(Android)|(PlayBook)|(BB10)|(BlackBerry)|(Opera Mini)|(IEMobile)|(webOS)|(MeeGo)/i),isTouch=isMobile!==null||document.createTouch!==undefined||'ontouchstart'in window||'onmsgesturechange'in window||navigator.msMaxTouchPoints,supportSVG=!!document.createElementNS&&!!document.createElementNS('http://www.w3.org/2000/svg','svg').createSVGRect,winWidth=window.innerWidth?window.innerWidth:$(window).width(),winHeight=window.innerHeight?window.innerHeight:$(window).height(),currentX=0,/* jshint multistr: true */html='<div id="swipebox-overlay">\
					<div id="swipebox-container">\
						<div id="swipebox-slider"></div>\
						<div id="swipebox-top-bar">\
							<div id="swipebox-title"></div>\
						</div>\
						<div id="swipebox-bottom-bar">\
							<div id="swipebox-arrows">\
								<a id="swipebox-prev"></a>\
								<a id="swipebox-next"></a>\
							</div>\
						</div>\
						<a id="swipebox-close"></a>\
					</div>\
			</div>';plugin.settings={};$.swipebox.close=function(){ui.closeSlide();};$.swipebox.destroy=function(){$(document).off('click.swipebox');};$.swipebox.extend=function(){return ui;};plugin.init=function(){plugin.settings=$.extend({},defaults,options);selector=plugin.settings.selector;if($.isArray(elem)){elements=elem;ui.target=$(window);ui.init(plugin.settings.initialIndexOnArray);}else{$(document).on('click.swipebox',selector,function(event){// console.log( isTouch );
if(event.target.parentNode.className==='slide current'){return false;}if(!$.isArray(elem)){ui.destroy();$elem=$(selector);ui.actions();}elements=[];var index,relType,relVal;// Allow for HTML5 compliant attribute before legacy use of rel
if(!relVal){relType='data-rel';relVal=$(this).attr(relType);}if(!relVal){relType='rel';relVal=$(this).attr(relType);}if(relVal&&relVal!==''&&relVal!=='nofollow'){$elem=$(selector).filter('['+relType+'="'+relVal+'"]');}else{$elem=$(selector);}$elem.each(function(){var title=null,href=null;if($(this).attr('title')){title=$(this).attr('title');}if($(this).attr('href')){href=$(this).attr('href');}elements.push({href:href,title:title});});index=$elem.index($(this));event.preventDefault();event.stopPropagation();ui.target=$(event.target);ui.init(index);});}};ui={/**
			 * Initiate Swipebox
			 */init:function init(index){if(plugin.settings.beforeOpen){plugin.settings.beforeOpen();}this.target.trigger('swipebox-start');$.swipebox.isOpen=true;this.build();this.openSlide(index);this.openMedia(index);this.preloadMedia(index+1);this.preloadMedia(index-1);if(plugin.settings.afterOpen){plugin.settings.afterOpen(index);}},/**
			 * Built HTML containers and fire main functions
			 */build:function build(){var $this=this,bg;$('body').append(html);if(supportSVG&&plugin.settings.useSVG===true){bg=$('#swipebox-close').css('background-image');bg=bg.replace('png','svg');$('#swipebox-prev, #swipebox-next, #swipebox-close').css({'background-image':bg});}if(isMobile&&plugin.settings.removeBarsOnMobile){$('#swipebox-bottom-bar, #swipebox-top-bar').remove();}$.each(elements,function(){$('#swipebox-slider').append('<div class="slide"></div>');});$this.setDim();$this.actions();if(isTouch){$this.gesture();}// Devices can have both touch and keyboard input so always allow key events
$this.keyboard();$this.animBars();$this.resize();},/**
			 * Set dimensions depending on windows width and height
			 */setDim:function setDim(){var width,height,sliderCss={};// Reset dimensions on mobile orientation change
if('onorientationchange'in window){window.addEventListener('orientationchange',function(){if(window.orientation===0){width=winWidth;height=winHeight;}else if(window.orientation===90||window.orientation===-90){width=winHeight;height=winWidth;}},false);}else{width=window.innerWidth?window.innerWidth:$(window).width();height=window.innerHeight?window.innerHeight:$(window).height();}sliderCss={width:width,height:height};$('#swipebox-overlay').css(sliderCss);},/**
			 * Reset dimensions on window resize envent
			 */resize:function resize(){var $this=this;$(window).resize(function(){$this.setDim();}).resize();},/**
			 * Check if device supports CSS transitions
			 */supportTransition:function supportTransition(){var prefixes='transition WebkitTransition MozTransition OTransition msTransition KhtmlTransition'.split(' '),i;for(i=0;i<prefixes.length;i++){if(document.createElement('div').style[prefixes[i]]!==undefined){return prefixes[i];}}return false;},/**
			 * Check if CSS transitions are allowed (options + devicesupport)
			 */doCssTrans:function doCssTrans(){if(plugin.settings.useCSS&&this.supportTransition()){return true;}},/**
			 * Touch navigation
			 */gesture:function gesture(){var $this=this,index,hDistance,vDistance,hDistanceLast,vDistanceLast,hDistancePercent,vSwipe=false,hSwipe=false,hSwipMinDistance=10,vSwipMinDistance=50,startCoords={},endCoords={},bars=$('#swipebox-top-bar, #swipebox-bottom-bar'),slider=$('#swipebox-slider');bars.addClass('visible-bars');$this.setTimeout();$('body').bind('touchstart',function(event){$(this).addClass('touching');index=$('#swipebox-slider .slide').index($('#swipebox-slider .slide.current'));endCoords=event.originalEvent.targetTouches[0];startCoords.pageX=event.originalEvent.targetTouches[0].pageX;startCoords.pageY=event.originalEvent.targetTouches[0].pageY;$('#swipebox-slider').css({'-webkit-transform':'translate3d('+currentX+'%, 0, 0)','transform':'translate3d('+currentX+'%, 0, 0)'});$('.touching').bind('touchmove',function(event){event.preventDefault();event.stopPropagation();endCoords=event.originalEvent.targetTouches[0];if(!hSwipe){vDistanceLast=vDistance;vDistance=endCoords.pageY-startCoords.pageY;if(Math.abs(vDistance)>=vSwipMinDistance||vSwipe){var opacity=0.75-Math.abs(vDistance)/slider.height();slider.css({'top':vDistance+'px'});slider.css({'opacity':opacity});vSwipe=true;}}hDistanceLast=hDistance;hDistance=endCoords.pageX-startCoords.pageX;hDistancePercent=hDistance*100/winWidth;if(!hSwipe&&!vSwipe&&Math.abs(hDistance)>=hSwipMinDistance){$('#swipebox-slider').css({'-webkit-transition':'','transition':''});hSwipe=true;}if(hSwipe){// swipe left
if(0<hDistance){// first slide
if(0===index){// console.log( 'first' );
$('#swipebox-overlay').addClass('leftSpringTouch');}else{// Follow gesture
$('#swipebox-overlay').removeClass('leftSpringTouch').removeClass('rightSpringTouch');$('#swipebox-slider').css({'-webkit-transform':'translate3d('+(currentX+hDistancePercent)+'%, 0, 0)','transform':'translate3d('+(currentX+hDistancePercent)+'%, 0, 0)'});}// swipe rught
}else if(0>hDistance){// last Slide
if(elements.length===index+1){// console.log( 'last' );
$('#swipebox-overlay').addClass('rightSpringTouch');}else{$('#swipebox-overlay').removeClass('leftSpringTouch').removeClass('rightSpringTouch');$('#swipebox-slider').css({'-webkit-transform':'translate3d('+(currentX+hDistancePercent)+'%, 0, 0)','transform':'translate3d('+(currentX+hDistancePercent)+'%, 0, 0)'});}}}});return false;}).bind('touchend',function(event){event.preventDefault();event.stopPropagation();$('#swipebox-slider').css({'-webkit-transition':'-webkit-transform 0.4s ease','transition':'transform 0.4s ease'});vDistance=endCoords.pageY-startCoords.pageY;hDistance=endCoords.pageX-startCoords.pageX;hDistancePercent=hDistance*100/winWidth;// Swipe to bottom to close
if(vSwipe){vSwipe=false;if(Math.abs(vDistance)>=2*vSwipMinDistance&&Math.abs(vDistance)>Math.abs(vDistanceLast)){var vOffset=vDistance>0?slider.height():-slider.height();slider.animate({top:vOffset+'px','opacity':0},300,function(){$this.closeSlide();});}else{slider.animate({top:0,'opacity':1},300);}}else if(hSwipe){hSwipe=false;// swipeLeft
if(hDistance>=hSwipMinDistance&&hDistance>=hDistanceLast){$this.getPrev();// swipeRight
}else if(hDistance<=-hSwipMinDistance&&hDistance<=hDistanceLast){$this.getNext();}}else{// Top and bottom bars have been removed on touchable devices
// tap
if(!bars.hasClass('visible-bars')){$this.showBars();$this.setTimeout();}else{$this.clearTimeout();$this.hideBars();}}$('#swipebox-slider').css({'-webkit-transform':'translate3d('+currentX+'%, 0, 0)','transform':'translate3d('+currentX+'%, 0, 0)'});$('#swipebox-overlay').removeClass('leftSpringTouch').removeClass('rightSpringTouch');$('.touching').off('touchmove').removeClass('touching');});},/**
			 * Set timer to hide the action bars
			 */setTimeout:function setTimeout(){if(plugin.settings.hideBarsDelay>0){var $this=this;$this.clearTimeout();$this.timeout=window.setTimeout(function(){$this.hideBars();},plugin.settings.hideBarsDelay);}},/**
			 * Clear timer
			 */clearTimeout:function clearTimeout(){window.clearTimeout(this.timeout);this.timeout=null;},/**
			 * Show navigation and title bars
			 */showBars:function showBars(){var bars=$('#swipebox-top-bar, #swipebox-bottom-bar');if(this.doCssTrans()){bars.addClass('visible-bars');}else{$('#swipebox-top-bar').animate({top:0},500);$('#swipebox-bottom-bar').animate({bottom:0},500);setTimeout(function(){bars.addClass('visible-bars');},1000);}},/**
			 * Hide navigation and title bars
			 */hideBars:function hideBars(){var bars=$('#swipebox-top-bar, #swipebox-bottom-bar');if(this.doCssTrans()){bars.removeClass('visible-bars');}else{$('#swipebox-top-bar').animate({top:'-50px'},500);$('#swipebox-bottom-bar').animate({bottom:'-50px'},500);setTimeout(function(){bars.removeClass('visible-bars');},1000);}},/**
			 * Animate navigation and top bars
			 */animBars:function animBars(){var $this=this,bars=$('#swipebox-top-bar, #swipebox-bottom-bar');bars.addClass('visible-bars');$this.setTimeout();$('#swipebox-slider').click(function(){if(!bars.hasClass('visible-bars')){$this.showBars();$this.setTimeout();}});$('#swipebox-bottom-bar').hover(function(){$this.showBars();bars.addClass('visible-bars');$this.clearTimeout();},function(){if(plugin.settings.hideBarsDelay>0){bars.removeClass('visible-bars');$this.setTimeout();}});},/**
			 * Keyboard navigation
			 */keyboard:function keyboard(){var $this=this;$(window).bind('keyup',function(event){event.preventDefault();event.stopPropagation();if(event.keyCode===37){$this.getPrev();}else if(event.keyCode===39){$this.getNext();}else if(event.keyCode===27){$this.closeSlide();}});},/**
			 * Navigation events : go to next slide, go to prevous slide and close
			 */actions:function actions(){var $this=this,action='touchend click';// Just detect for both event types to allow for multi-input
if(elements.length<2){$('#swipebox-bottom-bar').hide();if(undefined===elements[1]){$('#swipebox-top-bar').hide();}}else{$('#swipebox-prev').bind(action,function(event){event.preventDefault();event.stopPropagation();$this.getPrev();$this.setTimeout();});$('#swipebox-next').bind(action,function(event){event.preventDefault();event.stopPropagation();$this.getNext();$this.setTimeout();});}$('#swipebox-close').bind(action,function(){$this.closeSlide();});},/**
			 * Set current slide
			 */setSlide:function setSlide(index,isFirst){isFirst=isFirst||false;var slider=$('#swipebox-slider');currentX=-index*100;if(this.doCssTrans()){slider.css({'-webkit-transform':'translate3d('+-index*100+'%, 0, 0)','transform':'translate3d('+-index*100+'%, 0, 0)'});}else{slider.animate({left:-index*100+'%'});}$('#swipebox-slider .slide').removeClass('current');$('#swipebox-slider .slide').eq(index).addClass('current');this.setTitle(index);if(isFirst){slider.fadeIn();}$('#swipebox-prev, #swipebox-next').removeClass('disabled');if(index===0){$('#swipebox-prev').addClass('disabled');}else if(index===elements.length-1&&plugin.settings.loopAtEnd!==true){$('#swipebox-next').addClass('disabled');}},/**
			 * Open slide
			 */openSlide:function openSlide(index){$('html').addClass('swipebox-html');if(isTouch){$('html').addClass('swipebox-touch');if(plugin.settings.hideCloseButtonOnMobile){$('html').addClass('swipebox-no-close-button');}}else{$('html').addClass('swipebox-no-touch');}$(window).trigger('resize');// fix scroll bar visibility on desktop
this.setSlide(index,true);},/**
			 * Set a time out if the media is a video
			 */preloadMedia:function preloadMedia(index){var $this=this,src=null;if(elements[index]!==undefined){src=elements[index].href;}if(!$this.isVideo(src)){setTimeout(function(){$this.openMedia(index);},1000);}else{$this.openMedia(index);}},/**
			 * Open
			 */openMedia:function openMedia(index){var $this=this,src,slide;if(elements[index]!==undefined){src=elements[index].href;}if(index<0||index>=elements.length){return false;}slide=$('#swipebox-slider .slide').eq(index);if(!$this.isVideo(src)){slide.addClass('slide-loading');$this.loadMedia(src,function(){slide.removeClass('slide-loading');slide.html(this);if(plugin.settings.afterMedia){plugin.settings.afterMedia(index);}});}else{slide.html($this.getVideo(src));if(plugin.settings.afterMedia){plugin.settings.afterMedia(index);}}},/**
			 * Set link title attribute as caption
			 */setTitle:function setTitle(index){var title=null;$('#swipebox-title').empty();if(elements[index]!==undefined){title=elements[index].title;}if(title){$('#swipebox-top-bar').show();$('#swipebox-title').append(title);}else{$('#swipebox-top-bar').hide();}},/**
			 * Check if the URL is a video
			 */isVideo:function isVideo(src){if(src){if(src.match(/(youtube\.com|youtube-nocookie\.com)\/watch\?v=([a-zA-Z0-9\-_]+)/)||src.match(/vimeo\.com\/([0-9]*)/)||src.match(/youtu\.be\/([a-zA-Z0-9\-_]+)/)){return true;}if(src.toLowerCase().indexOf('swipeboxvideo=1')>=0){return true;}}},/**
			 * Parse URI querystring and:
			 * - overrides value provided via dictionary
			 * - rebuild it again returning a string
			 */parseUri:function parseUri(uri,customData){var a=document.createElement('a'),qs={};// Decode the URI
a.href=decodeURIComponent(uri);// QueryString to Object
if(a.search){qs=JSON.parse('{"'+a.search.toLowerCase().replace('?','').replace(/&/g,'","').replace(/=/g,'":"')+'"}');}// Extend with custom data
if($.isPlainObject(customData)){qs=$.extend(qs,customData,plugin.settings.queryStringData);// The dev has always the final word
}// Return querystring as a string
return $.map(qs,function(val,key){if(val&&val>''){return encodeURIComponent(key)+'='+encodeURIComponent(val);}}).join('&');},/**
			 * Get video iframe code from URL
			 */getVideo:function getVideo(url){var iframe='',youtubeUrl=url.match(/((?:www\.)?youtube\.com|(?:www\.)?youtube-nocookie\.com)\/watch\?v=([a-zA-Z0-9\-_]+)/),youtubeShortUrl=url.match(/(?:www\.)?youtu\.be\/([a-zA-Z0-9\-_]+)/),vimeoUrl=url.match(/(?:www\.)?vimeo\.com\/([0-9]*)/),qs='';if(youtubeUrl||youtubeShortUrl){if(youtubeShortUrl){youtubeUrl=youtubeShortUrl;}qs=ui.parseUri(url,{'autoplay':plugin.settings.autoplayVideos?'1':'0','v':''});iframe='<iframe width="560" height="315" src="//'+youtubeUrl[1]+'/embed/'+youtubeUrl[2]+'?'+qs+'" frameborder="0" allowfullscreen></iframe>';}else if(vimeoUrl){qs=ui.parseUri(url,{'autoplay':plugin.settings.autoplayVideos?'1':'0','byline':'0','portrait':'0','color':plugin.settings.vimeoColor});iframe='<iframe width="560" height="315"  src="//player.vimeo.com/video/'+vimeoUrl[1]+'?'+qs+'" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';}else{iframe='<iframe width="560" height="315" src="'+url+'" frameborder="0" allowfullscreen></iframe>';}return'<div class="swipebox-video-container" style="max-width:'+plugin.settings.videoMaxWidth+'px"><div class="swipebox-video">'+iframe+'</div></div>';},/**
			 * Load image
			 */loadMedia:function loadMedia(src,callback){// Inline content
if(src.trim().indexOf('#')===0){callback.call($('<div>',{'class':'swipebox-inline-container'}).append($(src).clone().toggleClass(plugin.settings.toggleClassOnLoad)));}// Everything else
else{if(!this.isVideo(src)){var img=$('<img>').on('load',function(){callback.call(img);});img.attr('src',src);}}},/**
			 * Get next slide
			 */getNext:function getNext(){var $this=this,src,index=$('#swipebox-slider .slide').index($('#swipebox-slider .slide.current'));if(index+1<elements.length){src=$('#swipebox-slider .slide').eq(index).contents().find('iframe').attr('src');$('#swipebox-slider .slide').eq(index).contents().find('iframe').attr('src',src);index++;$this.setSlide(index);$this.preloadMedia(index+1);if(plugin.settings.nextSlide){plugin.settings.nextSlide(index);}}else{if(plugin.settings.loopAtEnd===true){src=$('#swipebox-slider .slide').eq(index).contents().find('iframe').attr('src');$('#swipebox-slider .slide').eq(index).contents().find('iframe').attr('src',src);index=0;$this.preloadMedia(index);$this.setSlide(index);$this.preloadMedia(index+1);if(plugin.settings.nextSlide){plugin.settings.nextSlide(index);}}else{$('#swipebox-overlay').addClass('rightSpring');setTimeout(function(){$('#swipebox-overlay').removeClass('rightSpring');},500);}}},/**
			 * Get previous slide
			 */getPrev:function getPrev(){var index=$('#swipebox-slider .slide').index($('#swipebox-slider .slide.current')),src;if(index>0){src=$('#swipebox-slider .slide').eq(index).contents().find('iframe').attr('src');$('#swipebox-slider .slide').eq(index).contents().find('iframe').attr('src',src);index--;this.setSlide(index);this.preloadMedia(index-1);if(plugin.settings.prevSlide){plugin.settings.prevSlide(index);}}else{$('#swipebox-overlay').addClass('leftSpring');setTimeout(function(){$('#swipebox-overlay').removeClass('leftSpring');},500);}},/* jshint unused:false */nextSlide:function nextSlide(index){// Callback for next slide
},prevSlide:function prevSlide(index){// Callback for prev slide
},/**
			 * Close
			 */closeSlide:function closeSlide(){$('html').removeClass('swipebox-html');$('html').removeClass('swipebox-touch');$(window).trigger('resize');this.destroy();},/**
			 * Destroy the whole thing
			 */destroy:function destroy(){$(window).unbind('keyup');$('body').unbind('touchstart');$('body').unbind('touchmove');$('body').unbind('touchend');$('#swipebox-slider').unbind();$('#swipebox-overlay').remove();if(!$.isArray(elem)){elem.removeData('_swipebox');}if(this.target){this.target.trigger('swipebox-destroy');}$.swipebox.isOpen=false;if(plugin.settings.afterClose){plugin.settings.afterClose();}}};plugin.init();};$.fn.swipebox=function(options){if(!$.data(this,'_swipebox')){var swipebox=new $.swipebox(this,options);this.data('_swipebox',swipebox);}return this.data('_swipebox');};})(window,document,jQuery);
;"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};!function(i){"use strict";"function"==typeof define&&define.amd?define(["jquery"],i):"undefined"!=typeof exports?module.exports=i(require("jquery")):i(jQuery);}(function(i){"use strict";var e=window.Slick||{};(e=function(){var e=0;return function(t,o){var s,n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:i(t),appendDots:i(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function customPaging(e,t){return i('<button type="button" />').text(t+1);},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},i.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=i(t),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,s=i(t).data("slick")||{},n.options=i.extend({},n.defaults,o,s),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=i.proxy(n.autoPlay,n),n.autoPlayClear=i.proxy(n.autoPlayClear,n),n.autoPlayIterator=i.proxy(n.autoPlayIterator,n),n.changeSlide=i.proxy(n.changeSlide,n),n.clickHandler=i.proxy(n.clickHandler,n),n.selectHandler=i.proxy(n.selectHandler,n),n.setPosition=i.proxy(n.setPosition,n),n.swipeHandler=i.proxy(n.swipeHandler,n),n.dragHandler=i.proxy(n.dragHandler,n),n.keyHandler=i.proxy(n.keyHandler,n),n.instanceUid=e++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0);};}()).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"});},e.prototype.addSlide=e.prototype.slickAdd=function(e,t,o){var s=this;if("boolean"==typeof t)o=t,t=null;else if(t<0||t>=s.slideCount)return!1;s.unload(),"number"==typeof t?0===t&&0===s.$slides.length?i(e).appendTo(s.$slideTrack):o?i(e).insertBefore(s.$slides.eq(t)):i(e).insertAfter(s.$slides.eq(t)):!0===o?i(e).prependTo(s.$slideTrack):i(e).appendTo(s.$slideTrack),s.$slides=s.$slideTrack.children(this.options.slide),s.$slideTrack.children(this.options.slide).detach(),s.$slideTrack.append(s.$slides),s.$slides.each(function(e,t){i(t).attr("data-slick-index",e);}),s.$slidesCache=s.$slides,s.reinit();},e.prototype.animateHeight=function(){var i=this;if(1===i.options.slidesToShow&&!0===i.options.adaptiveHeight&&!1===i.options.vertical){var e=i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.animate({height:e},i.options.speed);}},e.prototype.animateSlide=function(e,t){var o={},s=this;s.animateHeight(),!0===s.options.rtl&&!1===s.options.vertical&&(e=-e),!1===s.transformsEnabled?!1===s.options.vertical?s.$slideTrack.animate({left:e},s.options.speed,s.options.easing,t):s.$slideTrack.animate({top:e},s.options.speed,s.options.easing,t):!1===s.cssTransitions?(!0===s.options.rtl&&(s.currentLeft=-s.currentLeft),i({animStart:s.currentLeft}).animate({animStart:e},{duration:s.options.speed,easing:s.options.easing,step:function step(i){i=Math.ceil(i),!1===s.options.vertical?(o[s.animType]="translate("+i+"px, 0px)",s.$slideTrack.css(o)):(o[s.animType]="translate(0px,"+i+"px)",s.$slideTrack.css(o));},complete:function complete(){t&&t.call();}})):(s.applyTransition(),e=Math.ceil(e),!1===s.options.vertical?o[s.animType]="translate3d("+e+"px, 0px, 0px)":o[s.animType]="translate3d(0px,"+e+"px, 0px)",s.$slideTrack.css(o),t&&setTimeout(function(){s.disableTransition(),t.call();},s.options.speed));},e.prototype.getNavTarget=function(){var e=this,t=e.options.asNavFor;return t&&null!==t&&(t=i(t).not(e.$slider)),t;},e.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"==(typeof t==="undefined"?"undefined":_typeof(t))&&t.each(function(){var t=i(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0);});},e.prototype.applyTransition=function(i){var e=this,t={};!1===e.options.fade?t[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:t[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(t):e.$slides.eq(i).css(t);},e.prototype.autoPlay=function(){var i=this;i.autoPlayClear(),i.slideCount>i.options.slidesToShow&&(i.autoPlayTimer=setInterval(i.autoPlayIterator,i.options.autoplaySpeed));},e.prototype.autoPlayClear=function(){var i=this;i.autoPlayTimer&&clearInterval(i.autoPlayTimer);},e.prototype.autoPlayIterator=function(){var i=this,e=i.currentSlide+i.options.slidesToScroll;i.paused||i.interrupted||i.focussed||(!1===i.options.infinite&&(1===i.direction&&i.currentSlide+1===i.slideCount-1?i.direction=0:0===i.direction&&(e=i.currentSlide-i.options.slidesToScroll,i.currentSlide-1==0&&(i.direction=1))),i.slideHandler(e));},e.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=i(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=i(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}));},e.prototype.buildDots=function(){var e,t,o=this;if(!0===o.options.dots){for(o.$slider.addClass("slick-dotted"),t=i("<ul />").addClass(o.options.dotsClass),e=0;e<=o.getDotCount();e+=1){t.append(i("<li />").append(o.options.customPaging.call(this,o,e)));}o.$dots=t.appendTo(o.options.appendDots),o.$dots.find("li").first().addClass("slick-active");}},e.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){i(t).attr("data-slick-index",e).data("originalStyling",i(t).attr("style")||"");}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?i('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),i("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable");},e.prototype.buildRows=function(){var i,e,t,o,s,n,r,l=this;if(o=document.createDocumentFragment(),n=l.$slider.children(),l.options.rows>1){for(r=l.options.slidesPerRow*l.options.rows,s=Math.ceil(n.length/r),i=0;i<s;i++){var d=document.createElement("div");for(e=0;e<l.options.rows;e++){var a=document.createElement("div");for(t=0;t<l.options.slidesPerRow;t++){var c=i*r+(e*l.options.slidesPerRow+t);n.get(c)&&a.appendChild(n.get(c));}d.appendChild(a);}o.appendChild(d);}l.$slider.empty().append(o),l.$slider.children().children().children().css({width:100/l.options.slidesPerRow+"%",display:"inline-block"});}},e.prototype.checkResponsive=function(e,t){var o,s,n,r=this,l=!1,d=r.$slider.width(),a=window.innerWidth||i(window).width();if("window"===r.respondTo?n=a:"slider"===r.respondTo?n=d:"min"===r.respondTo&&(n=Math.min(a,d)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){s=null;for(o in r.breakpoints){r.breakpoints.hasOwnProperty(o)&&(!1===r.originalSettings.mobileFirst?n<r.breakpoints[o]&&(s=r.breakpoints[o]):n>r.breakpoints[o]&&(s=r.breakpoints[o]));}null!==s?null!==r.activeBreakpoint?(s!==r.activeBreakpoint||t)&&(r.activeBreakpoint=s,"unslick"===r.breakpointSettings[s]?r.unslick(s):(r.options=i.extend({},r.originalSettings,r.breakpointSettings[s]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),l=s):(r.activeBreakpoint=s,"unslick"===r.breakpointSettings[s]?r.unslick(s):(r.options=i.extend({},r.originalSettings,r.breakpointSettings[s]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),l=s):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),l=s),e||!1===l||r.$slider.trigger("breakpoint",[r,l]);}},e.prototype.changeSlide=function(e,t){var o,s,n,r=this,l=i(e.currentTarget);switch(l.is("a")&&e.preventDefault(),l.is("li")||(l=l.closest("li")),n=r.slideCount%r.options.slidesToScroll!=0,o=n?0:(r.slideCount-r.currentSlide)%r.options.slidesToScroll,e.data.message){case"previous":s=0===o?r.options.slidesToScroll:r.options.slidesToShow-o,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide-s,!1,t);break;case"next":s=0===o?r.options.slidesToScroll:o,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide+s,!1,t);break;case"index":var d=0===e.data.index?0:e.data.index||l.index()*r.options.slidesToScroll;r.slideHandler(r.checkNavigable(d),!1,t),l.children().trigger("focus");break;default:return;}},e.prototype.checkNavigable=function(i){var e,t;if(e=this.getNavigableIndexes(),t=0,i>e[e.length-1])i=e[e.length-1];else for(var o in e){if(i<e[o]){i=t;break;}t=e[o];}return i;},e.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(i("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",i.proxy(e.interrupt,e,!0)).off("mouseleave.slick",i.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),i(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&i(e.$slideTrack).children().off("click.slick",e.selectHandler),i(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),i(window).off("resize.slick.slick-"+e.instanceUid,e.resize),i("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),i(window).off("load.slick.slick-"+e.instanceUid,e.setPosition);},e.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",i.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",i.proxy(e.interrupt,e,!1));},e.prototype.cleanUpRows=function(){var i,e=this;e.options.rows>1&&((i=e.$slides.children().children()).removeAttr("style"),e.$slider.empty().append(i));},e.prototype.clickHandler=function(i){!1===this.shouldClick&&(i.stopImmediatePropagation(),i.stopPropagation(),i.preventDefault());},e.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),i(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){i(this).attr("style",i(this).data("originalStyling"));}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t]);},e.prototype.disableTransition=function(i){var e=this,t={};t[e.transitionType]="",!1===e.options.fade?e.$slideTrack.css(t):e.$slides.eq(i).css(t);},e.prototype.fadeSlide=function(i,e){var t=this;!1===t.cssTransitions?(t.$slides.eq(i).css({zIndex:t.options.zIndex}),t.$slides.eq(i).animate({opacity:1},t.options.speed,t.options.easing,e)):(t.applyTransition(i),t.$slides.eq(i).css({opacity:1,zIndex:t.options.zIndex}),e&&setTimeout(function(){t.disableTransition(i),e.call();},t.options.speed));},e.prototype.fadeSlideOut=function(i){var e=this;!1===e.cssTransitions?e.$slides.eq(i).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(i),e.$slides.eq(i).css({opacity:0,zIndex:e.options.zIndex-2}));},e.prototype.filterSlides=e.prototype.slickFilter=function(i){var e=this;null!==i&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(i).appendTo(e.$slideTrack),e.reinit());},e.prototype.focusHandler=function(){var e=this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var o=i(this);setTimeout(function(){e.options.pauseOnFocus&&(e.focussed=o.is(":focus"),e.autoPlay());},0);});},e.prototype.getCurrent=e.prototype.slickCurrentSlide=function(){return this.currentSlide;},e.prototype.getDotCount=function(){var i=this,e=0,t=0,o=0;if(!0===i.options.infinite){if(i.slideCount<=i.options.slidesToShow)++o;else for(;e<i.slideCount;){++o,e=t+i.options.slidesToScroll,t+=i.options.slidesToScroll<=i.options.slidesToShow?i.options.slidesToScroll:i.options.slidesToShow;}}else if(!0===i.options.centerMode)o=i.slideCount;else if(i.options.asNavFor)for(;e<i.slideCount;){++o,e=t+i.options.slidesToScroll,t+=i.options.slidesToScroll<=i.options.slidesToShow?i.options.slidesToScroll:i.options.slidesToShow;}else o=1+Math.ceil((i.slideCount-i.options.slidesToShow)/i.options.slidesToScroll);return o-1;},e.prototype.getLeft=function(i){var e,t,o,s,n=this,r=0;return n.slideOffset=0,t=n.$slides.first().outerHeight(!0),!0===n.options.infinite?(n.slideCount>n.options.slidesToShow&&(n.slideOffset=n.slideWidth*n.options.slidesToShow*-1,s=-1,!0===n.options.vertical&&!0===n.options.centerMode&&(2===n.options.slidesToShow?s=-1.5:1===n.options.slidesToShow&&(s=-2)),r=t*n.options.slidesToShow*s),n.slideCount%n.options.slidesToScroll!=0&&i+n.options.slidesToScroll>n.slideCount&&n.slideCount>n.options.slidesToShow&&(i>n.slideCount?(n.slideOffset=(n.options.slidesToShow-(i-n.slideCount))*n.slideWidth*-1,r=(n.options.slidesToShow-(i-n.slideCount))*t*-1):(n.slideOffset=n.slideCount%n.options.slidesToScroll*n.slideWidth*-1,r=n.slideCount%n.options.slidesToScroll*t*-1))):i+n.options.slidesToShow>n.slideCount&&(n.slideOffset=(i+n.options.slidesToShow-n.slideCount)*n.slideWidth,r=(i+n.options.slidesToShow-n.slideCount)*t),n.slideCount<=n.options.slidesToShow&&(n.slideOffset=0,r=0),!0===n.options.centerMode&&n.slideCount<=n.options.slidesToShow?n.slideOffset=n.slideWidth*Math.floor(n.options.slidesToShow)/2-n.slideWidth*n.slideCount/2:!0===n.options.centerMode&&!0===n.options.infinite?n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)-n.slideWidth:!0===n.options.centerMode&&(n.slideOffset=0,n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)),e=!1===n.options.vertical?i*n.slideWidth*-1+n.slideOffset:i*t*-1+r,!0===n.options.variableWidth&&(o=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(i):n.$slideTrack.children(".slick-slide").eq(i+n.options.slidesToShow),e=!0===n.options.rtl?o[0]?-1*(n.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===n.options.centerMode&&(o=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(i):n.$slideTrack.children(".slick-slide").eq(i+n.options.slidesToShow+1),e=!0===n.options.rtl?o[0]?-1*(n.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,e+=(n.$list.width()-o.outerWidth())/2)),e;},e.prototype.getOption=e.prototype.slickGetOption=function(i){return this.options[i];},e.prototype.getNavigableIndexes=function(){var i,e=this,t=0,o=0,s=[];for(!1===e.options.infinite?i=e.slideCount:(t=-1*e.options.slidesToScroll,o=-1*e.options.slidesToScroll,i=2*e.slideCount);t<i;){s.push(t),t=o+e.options.slidesToScroll,o+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;}return s;},e.prototype.getSlick=function(){return this;},e.prototype.getSlideCount=function(){var e,t,o=this;return t=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(s,n){if(n.offsetLeft-t+i(n).outerWidth()/2>-1*o.swipeLeft)return e=n,!1;}),Math.abs(i(e).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll;},e.prototype.goTo=e.prototype.slickGoTo=function(i,e){this.changeSlide({data:{message:"index",index:parseInt(i)}},e);},e.prototype.init=function(e){var t=this;i(t.$slider).hasClass("slick-initialized")||(i(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay());},e.prototype.initADA=function(){var e=this,t=Math.ceil(e.slideCount/e.options.slidesToShow),o=e.getNavigableIndexes().filter(function(i){return i>=0&&i<e.slideCount;});e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==e.$dots&&(e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function(t){var s=o.indexOf(t);i(this).attr({role:"tabpanel",id:"slick-slide"+e.instanceUid+t,tabindex:-1}),-1!==s&&i(this).attr({"aria-describedby":"slick-slide-control"+e.instanceUid+s});}),e.$dots.attr("role","tablist").find("li").each(function(s){var n=o[s];i(this).attr({role:"presentation"}),i(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+e.instanceUid+s,"aria-controls":"slick-slide"+e.instanceUid+n,"aria-label":s+1+" of "+t,"aria-selected":null,tabindex:"-1"});}).eq(e.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var s=e.currentSlide,n=s+e.options.slidesToShow;s<n;s++){e.$slides.eq(s).attr("tabindex",0);}e.activateADA();},e.prototype.initArrowEvents=function(){var i=this;!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&(i.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},i.changeSlide),i.$nextArrow.off("click.slick").on("click.slick",{message:"next"},i.changeSlide),!0===i.options.accessibility&&(i.$prevArrow.on("keydown.slick",i.keyHandler),i.$nextArrow.on("keydown.slick",i.keyHandler)));},e.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&(i("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&i("li",e.$dots).on("mouseenter.slick",i.proxy(e.interrupt,e,!0)).on("mouseleave.slick",i.proxy(e.interrupt,e,!1));},e.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",i.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",i.proxy(e.interrupt,e,!1)));},e.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),i(document).on(e.visibilityChange,i.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&i(e.$slideTrack).children().on("click.slick",e.selectHandler),i(window).on("orientationchange.slick.slick-"+e.instanceUid,i.proxy(e.orientationChange,e)),i(window).on("resize.slick.slick-"+e.instanceUid,i.proxy(e.resize,e)),i("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),i(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),i(e.setPosition);},e.prototype.initUI=function(){var i=this;!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&(i.$prevArrow.show(),i.$nextArrow.show()),!0===i.options.dots&&i.slideCount>i.options.slidesToShow&&i.$dots.show();},e.prototype.keyHandler=function(i){var e=this;i.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===i.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===i.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}));},e.prototype.lazyLoad=function(){function e(e){i("img[data-lazy]",e).each(function(){var e=i(this),t=i(this).attr("data-lazy"),o=i(this).attr("data-srcset"),s=i(this).attr("data-sizes")||n.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){e.animate({opacity:0},100,function(){o&&(e.attr("srcset",o),s&&e.attr("sizes",s)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");}),n.$slider.trigger("lazyLoaded",[n,e,t]);});},r.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),n.$slider.trigger("lazyLoadError",[n,e,t]);},r.src=t;});}var t,o,s,n=this;if(!0===n.options.centerMode?!0===n.options.infinite?s=(o=n.currentSlide+(n.options.slidesToShow/2+1))+n.options.slidesToShow+2:(o=Math.max(0,n.currentSlide-(n.options.slidesToShow/2+1)),s=n.options.slidesToShow/2+1+2+n.currentSlide):(o=n.options.infinite?n.options.slidesToShow+n.currentSlide:n.currentSlide,s=Math.ceil(o+n.options.slidesToShow),!0===n.options.fade&&(o>0&&o--,s<=n.slideCount&&s++)),t=n.$slider.find(".slick-slide").slice(o,s),"anticipated"===n.options.lazyLoad)for(var r=o-1,l=s,d=n.$slider.find(".slick-slide"),a=0;a<n.options.slidesToScroll;a++){r<0&&(r=n.slideCount-1),t=(t=t.add(d.eq(r))).add(d.eq(l)),r--,l++;}e(t),n.slideCount<=n.options.slidesToShow?e(n.$slider.find(".slick-slide")):n.currentSlide>=n.slideCount-n.options.slidesToShow?e(n.$slider.find(".slick-cloned").slice(0,n.options.slidesToShow)):0===n.currentSlide&&e(n.$slider.find(".slick-cloned").slice(-1*n.options.slidesToShow));},e.prototype.loadSlider=function(){var i=this;i.setPosition(),i.$slideTrack.css({opacity:1}),i.$slider.removeClass("slick-loading"),i.initUI(),"progressive"===i.options.lazyLoad&&i.progressiveLazyLoad();},e.prototype.next=e.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}});},e.prototype.orientationChange=function(){var i=this;i.checkResponsive(),i.setPosition();},e.prototype.pause=e.prototype.slickPause=function(){var i=this;i.autoPlayClear(),i.paused=!0;},e.prototype.play=e.prototype.slickPlay=function(){var i=this;i.autoPlay(),i.options.autoplay=!0,i.paused=!1,i.focussed=!1,i.interrupted=!1;},e.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&i(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()));},e.prototype.prev=e.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}});},e.prototype.preventDefault=function(i){i.preventDefault();},e.prototype.progressiveLazyLoad=function(e){e=e||1;var t,o,s,n,r,l=this,d=i("img[data-lazy]",l.$slider);d.length?(t=d.first(),o=t.attr("data-lazy"),s=t.attr("data-srcset"),n=t.attr("data-sizes")||l.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){s&&(t.attr("srcset",s),n&&t.attr("sizes",n)),t.attr("src",o).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===l.options.adaptiveHeight&&l.setPosition(),l.$slider.trigger("lazyLoaded",[l,t,o]),l.progressiveLazyLoad();},r.onerror=function(){e<3?setTimeout(function(){l.progressiveLazyLoad(e+1);},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),l.$slider.trigger("lazyLoadError",[l,t,o]),l.progressiveLazyLoad());},r.src=o):l.$slider.trigger("allImagesLoaded",[l]);},e.prototype.refresh=function(e){var t,o,s=this;o=s.slideCount-s.options.slidesToShow,!s.options.infinite&&s.currentSlide>o&&(s.currentSlide=o),s.slideCount<=s.options.slidesToShow&&(s.currentSlide=0),t=s.currentSlide,s.destroy(!0),i.extend(s,s.initials,{currentSlide:t}),s.init(),e||s.changeSlide({data:{message:"index",index:t}},!1);},e.prototype.registerBreakpoints=function(){var e,t,o,s=this,n=s.options.responsive||null;if("array"===i.type(n)&&n.length){s.respondTo=s.options.respondTo||"window";for(e in n){if(o=s.breakpoints.length-1,n.hasOwnProperty(e)){for(t=n[e].breakpoint;o>=0;){s.breakpoints[o]&&s.breakpoints[o]===t&&s.breakpoints.splice(o,1),o--;}s.breakpoints.push(t),s.breakpointSettings[t]=n[e].settings;}}s.breakpoints.sort(function(i,e){return s.options.mobileFirst?i-e:e-i;});}},e.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&i(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e]);},e.prototype.resize=function(){var e=this;i(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=i(window).width(),e.checkResponsive(),e.unslicked||e.setPosition();},50));},e.prototype.removeSlide=e.prototype.slickRemove=function(i,e,t){var o=this;if(i="boolean"==typeof i?!0===(e=i)?0:o.slideCount-1:!0===e?--i:i,o.slideCount<1||i<0||i>o.slideCount-1)return!1;o.unload(),!0===t?o.$slideTrack.children().remove():o.$slideTrack.children(this.options.slide).eq(i).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit();},e.prototype.setCSS=function(i){var e,t,o=this,s={};!0===o.options.rtl&&(i=-i),e="left"==o.positionProp?Math.ceil(i)+"px":"0px",t="top"==o.positionProp?Math.ceil(i)+"px":"0px",s[o.positionProp]=i,!1===o.transformsEnabled?o.$slideTrack.css(s):(s={},!1===o.cssTransitions?(s[o.animType]="translate("+e+", "+t+")",o.$slideTrack.css(s)):(s[o.animType]="translate3d("+e+", "+t+", 0px)",o.$slideTrack.css(s)));},e.prototype.setDimensions=function(){var i=this;!1===i.options.vertical?!0===i.options.centerMode&&i.$list.css({padding:"0px "+i.options.centerPadding}):(i.$list.height(i.$slides.first().outerHeight(!0)*i.options.slidesToShow),!0===i.options.centerMode&&i.$list.css({padding:i.options.centerPadding+" 0px"})),i.listWidth=i.$list.width(),i.listHeight=i.$list.height(),!1===i.options.vertical&&!1===i.options.variableWidth?(i.slideWidth=Math.ceil(i.listWidth/i.options.slidesToShow),i.$slideTrack.width(Math.ceil(i.slideWidth*i.$slideTrack.children(".slick-slide").length))):!0===i.options.variableWidth?i.$slideTrack.width(5e3*i.slideCount):(i.slideWidth=Math.ceil(i.listWidth),i.$slideTrack.height(Math.ceil(i.$slides.first().outerHeight(!0)*i.$slideTrack.children(".slick-slide").length)));var e=i.$slides.first().outerWidth(!0)-i.$slides.first().width();!1===i.options.variableWidth&&i.$slideTrack.children(".slick-slide").width(i.slideWidth-e);},e.prototype.setFade=function(){var e,t=this;t.$slides.each(function(o,s){e=t.slideWidth*o*-1,!0===t.options.rtl?i(s).css({position:"relative",right:e,top:0,zIndex:t.options.zIndex-2,opacity:0}):i(s).css({position:"relative",left:e,top:0,zIndex:t.options.zIndex-2,opacity:0});}),t.$slides.eq(t.currentSlide).css({zIndex:t.options.zIndex-1,opacity:1});},e.prototype.setHeight=function(){var i=this;if(1===i.options.slidesToShow&&!0===i.options.adaptiveHeight&&!1===i.options.vertical){var e=i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.css("height",e);}},e.prototype.setOption=e.prototype.slickSetOption=function(){var e,t,o,s,n,r=this,l=!1;if("object"===i.type(arguments[0])?(o=arguments[0],l=arguments[1],n="multiple"):"string"===i.type(arguments[0])&&(o=arguments[0],s=arguments[1],l=arguments[2],"responsive"===arguments[0]&&"array"===i.type(arguments[1])?n="responsive":void 0!==arguments[1]&&(n="single")),"single"===n)r.options[o]=s;else if("multiple"===n)i.each(o,function(i,e){r.options[i]=e;});else if("responsive"===n)for(t in s){if("array"!==i.type(r.options.responsive))r.options.responsive=[s[t]];else{for(e=r.options.responsive.length-1;e>=0;){r.options.responsive[e].breakpoint===s[t].breakpoint&&r.options.responsive.splice(e,1),e--;}r.options.responsive.push(s[t]);}}l&&(r.unload(),r.reinit());},e.prototype.setPosition=function(){var i=this;i.setDimensions(),i.setHeight(),!1===i.options.fade?i.setCSS(i.getLeft(i.currentSlide)):i.setFade(),i.$slider.trigger("setPosition",[i]);},e.prototype.setProps=function(){var i=this,e=document.body.style;i.positionProp=!0===i.options.vertical?"top":"left","top"===i.positionProp?i.$slider.addClass("slick-vertical"):i.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===i.options.useCSS&&(i.cssTransitions=!0),i.options.fade&&("number"==typeof i.options.zIndex?i.options.zIndex<3&&(i.options.zIndex=3):i.options.zIndex=i.defaults.zIndex),void 0!==e.OTransform&&(i.animType="OTransform",i.transformType="-o-transform",i.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(i.animType=!1)),void 0!==e.MozTransform&&(i.animType="MozTransform",i.transformType="-moz-transform",i.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(i.animType=!1)),void 0!==e.webkitTransform&&(i.animType="webkitTransform",i.transformType="-webkit-transform",i.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(i.animType=!1)),void 0!==e.msTransform&&(i.animType="msTransform",i.transformType="-ms-transform",i.transitionType="msTransition",void 0===e.msTransform&&(i.animType=!1)),void 0!==e.transform&&!1!==i.animType&&(i.animType="transform",i.transformType="transform",i.transitionType="transition"),i.transformsEnabled=i.options.useTransform&&null!==i.animType&&!1!==i.animType;},e.prototype.setSlideClasses=function(i){var e,t,o,s,n=this;if(t=n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),n.$slides.eq(i).addClass("slick-current"),!0===n.options.centerMode){var r=n.options.slidesToShow%2==0?1:0;e=Math.floor(n.options.slidesToShow/2),!0===n.options.infinite&&(i>=e&&i<=n.slideCount-1-e?n.$slides.slice(i-e+r,i+e+1).addClass("slick-active").attr("aria-hidden","false"):(o=n.options.slidesToShow+i,t.slice(o-e+1+r,o+e+2).addClass("slick-active").attr("aria-hidden","false")),0===i?t.eq(t.length-1-n.options.slidesToShow).addClass("slick-center"):i===n.slideCount-1&&t.eq(n.options.slidesToShow).addClass("slick-center")),n.$slides.eq(i).addClass("slick-center");}else i>=0&&i<=n.slideCount-n.options.slidesToShow?n.$slides.slice(i,i+n.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):t.length<=n.options.slidesToShow?t.addClass("slick-active").attr("aria-hidden","false"):(s=n.slideCount%n.options.slidesToShow,o=!0===n.options.infinite?n.options.slidesToShow+i:i,n.options.slidesToShow==n.options.slidesToScroll&&n.slideCount-i<n.options.slidesToShow?t.slice(o-(n.options.slidesToShow-s),o+s).addClass("slick-active").attr("aria-hidden","false"):t.slice(o,o+n.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==n.options.lazyLoad&&"anticipated"!==n.options.lazyLoad||n.lazyLoad();},e.prototype.setupInfinite=function(){var e,t,o,s=this;if(!0===s.options.fade&&(s.options.centerMode=!1),!0===s.options.infinite&&!1===s.options.fade&&(t=null,s.slideCount>s.options.slidesToShow)){for(o=!0===s.options.centerMode?s.options.slidesToShow+1:s.options.slidesToShow,e=s.slideCount;e>s.slideCount-o;e-=1){t=e-1,i(s.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");}for(e=0;e<o+s.slideCount;e+=1){t=e,i(s.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");}s.$slideTrack.find(".slick-cloned").find("[id]").each(function(){i(this).attr("id","");});}},e.prototype.interrupt=function(i){var e=this;i||e.autoPlay(),e.interrupted=i;},e.prototype.selectHandler=function(e){var t=this,o=i(e.target).is(".slick-slide")?i(e.target):i(e.target).parents(".slick-slide"),s=parseInt(o.attr("data-slick-index"));s||(s=0),t.slideCount<=t.options.slidesToShow?t.slideHandler(s,!1,!0):t.slideHandler(s);},e.prototype.slideHandler=function(i,e,t){var o,s,n,r,l,d=null,a=this;if(e=e||!1,!(!0===a.animating&&!0===a.options.waitForAnimate||!0===a.options.fade&&a.currentSlide===i))if(!1===e&&a.asNavFor(i),o=i,d=a.getLeft(o),r=a.getLeft(a.currentSlide),a.currentLeft=null===a.swipeLeft?r:a.swipeLeft,!1===a.options.infinite&&!1===a.options.centerMode&&(i<0||i>a.getDotCount()*a.options.slidesToScroll))!1===a.options.fade&&(o=a.currentSlide,!0!==t?a.animateSlide(r,function(){a.postSlide(o);}):a.postSlide(o));else if(!1===a.options.infinite&&!0===a.options.centerMode&&(i<0||i>a.slideCount-a.options.slidesToScroll))!1===a.options.fade&&(o=a.currentSlide,!0!==t?a.animateSlide(r,function(){a.postSlide(o);}):a.postSlide(o));else{if(a.options.autoplay&&clearInterval(a.autoPlayTimer),s=o<0?a.slideCount%a.options.slidesToScroll!=0?a.slideCount-a.slideCount%a.options.slidesToScroll:a.slideCount+o:o>=a.slideCount?a.slideCount%a.options.slidesToScroll!=0?0:o-a.slideCount:o,a.animating=!0,a.$slider.trigger("beforeChange",[a,a.currentSlide,s]),n=a.currentSlide,a.currentSlide=s,a.setSlideClasses(a.currentSlide),a.options.asNavFor&&(l=(l=a.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(a.currentSlide),a.updateDots(),a.updateArrows(),!0===a.options.fade)return!0!==t?(a.fadeSlideOut(n),a.fadeSlide(s,function(){a.postSlide(s);})):a.postSlide(s),void a.animateHeight();!0!==t?a.animateSlide(d,function(){a.postSlide(s);}):a.postSlide(s);}},e.prototype.startLoad=function(){var i=this;!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&(i.$prevArrow.hide(),i.$nextArrow.hide()),!0===i.options.dots&&i.slideCount>i.options.slidesToShow&&i.$dots.hide(),i.$slider.addClass("slick-loading");},e.prototype.swipeDirection=function(){var i,e,t,o,s=this;return i=s.touchObject.startX-s.touchObject.curX,e=s.touchObject.startY-s.touchObject.curY,t=Math.atan2(e,i),(o=Math.round(180*t/Math.PI))<0&&(o=360-Math.abs(o)),o<=45&&o>=0?!1===s.options.rtl?"left":"right":o<=360&&o>=315?!1===s.options.rtl?"left":"right":o>=135&&o<=225?!1===s.options.rtl?"right":"left":!0===s.options.verticalSwiping?o>=35&&o<=135?"down":"up":"vertical";},e.prototype.swipeEnd=function(i){var e,t,o=this;if(o.dragging=!1,o.swiping=!1,o.scrolling)return o.scrolling=!1,!1;if(o.interrupted=!1,o.shouldClick=!(o.touchObject.swipeLength>10),void 0===o.touchObject.curX)return!1;if(!0===o.touchObject.edgeHit&&o.$slider.trigger("edge",[o,o.swipeDirection()]),o.touchObject.swipeLength>=o.touchObject.minSwipe){switch(t=o.swipeDirection()){case"left":case"down":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide+o.getSlideCount()):o.currentSlide+o.getSlideCount(),o.currentDirection=0;break;case"right":case"up":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide-o.getSlideCount()):o.currentSlide-o.getSlideCount(),o.currentDirection=1;}"vertical"!=t&&(o.slideHandler(e),o.touchObject={},o.$slider.trigger("swipe",[o,t]));}else o.touchObject.startX!==o.touchObject.curX&&(o.slideHandler(o.currentSlide),o.touchObject={});},e.prototype.swipeHandler=function(i){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==i.type.indexOf("mouse")))switch(e.touchObject.fingerCount=i.originalEvent&&void 0!==i.originalEvent.touches?i.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),i.data.action){case"start":e.swipeStart(i);break;case"move":e.swipeMove(i);break;case"end":e.swipeEnd(i);}},e.prototype.swipeMove=function(i){var e,t,o,s,n,r,l=this;return n=void 0!==i.originalEvent?i.originalEvent.touches:null,!(!l.dragging||l.scrolling||n&&1!==n.length)&&(e=l.getLeft(l.currentSlide),l.touchObject.curX=void 0!==n?n[0].pageX:i.clientX,l.touchObject.curY=void 0!==n?n[0].pageY:i.clientY,l.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(l.touchObject.curX-l.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(l.touchObject.curY-l.touchObject.startY,2))),!l.options.verticalSwiping&&!l.swiping&&r>4?(l.scrolling=!0,!1):(!0===l.options.verticalSwiping&&(l.touchObject.swipeLength=r),t=l.swipeDirection(),void 0!==i.originalEvent&&l.touchObject.swipeLength>4&&(l.swiping=!0,i.preventDefault()),s=(!1===l.options.rtl?1:-1)*(l.touchObject.curX>l.touchObject.startX?1:-1),!0===l.options.verticalSwiping&&(s=l.touchObject.curY>l.touchObject.startY?1:-1),o=l.touchObject.swipeLength,l.touchObject.edgeHit=!1,!1===l.options.infinite&&(0===l.currentSlide&&"right"===t||l.currentSlide>=l.getDotCount()&&"left"===t)&&(o=l.touchObject.swipeLength*l.options.edgeFriction,l.touchObject.edgeHit=!0),!1===l.options.vertical?l.swipeLeft=e+o*s:l.swipeLeft=e+o*(l.$list.height()/l.listWidth)*s,!0===l.options.verticalSwiping&&(l.swipeLeft=e+o*s),!0!==l.options.fade&&!1!==l.options.touchMove&&(!0===l.animating?(l.swipeLeft=null,!1):void l.setCSS(l.swipeLeft))));},e.prototype.swipeStart=function(i){var e,t=this;if(t.interrupted=!0,1!==t.touchObject.fingerCount||t.slideCount<=t.options.slidesToShow)return t.touchObject={},!1;void 0!==i.originalEvent&&void 0!==i.originalEvent.touches&&(e=i.originalEvent.touches[0]),t.touchObject.startX=t.touchObject.curX=void 0!==e?e.pageX:i.clientX,t.touchObject.startY=t.touchObject.curY=void 0!==e?e.pageY:i.clientY,t.dragging=!0;},e.prototype.unfilterSlides=e.prototype.slickUnfilter=function(){var i=this;null!==i.$slidesCache&&(i.unload(),i.$slideTrack.children(this.options.slide).detach(),i.$slidesCache.appendTo(i.$slideTrack),i.reinit());},e.prototype.unload=function(){var e=this;i(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","");},e.prototype.unslick=function(i){var e=this;e.$slider.trigger("unslick",[e,i]),e.destroy();},e.prototype.updateArrows=function(){var i=this;Math.floor(i.options.slidesToShow/2),!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&!i.options.infinite&&(i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===i.currentSlide?(i.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):i.currentSlide>=i.slideCount-i.options.slidesToShow&&!1===i.options.centerMode?(i.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):i.currentSlide>=i.slideCount-1&&!0===i.options.centerMode&&(i.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")));},e.prototype.updateDots=function(){var i=this;null!==i.$dots&&(i.$dots.find("li").removeClass("slick-active").end(),i.$dots.find("li").eq(Math.floor(i.currentSlide/i.options.slidesToScroll)).addClass("slick-active"));},e.prototype.visibility=function(){var i=this;i.options.autoplay&&(document[i.hidden]?i.interrupted=!0:i.interrupted=!1);},i.fn.slick=function(){var i,t,o=this,s=arguments[0],n=Array.prototype.slice.call(arguments,1),r=o.length;for(i=0;i<r;i++){if("object"==(typeof s==="undefined"?"undefined":_typeof(s))||void 0===s?o[i].slick=new e(o[i],s):t=o[i].slick[s].apply(o[i].slick,n),void 0!==t)return t;}return o;};});
;'use strict';/*
	Focus au clic sur un lien ou un bouton
	Exemple de syntaxe : <a class="" href="#" title="Rechercher" data-click-focus="#search">Recherche</a>
*/jQuery('button[data-click-focus], a[data-click-focus]').each(function(i,j){jQuery(this).click(function(){var focusin=jQuery(j).attr('data-click-focus');setTimeout(function(){jQuery(focusin).focus();},400);});});
;'use strict';// Get IE or Edge browser version
var version=detectIE();if(version===false){// document.getElementById('oldbrowsernotice').innerHTML = '<s>IE/Edge</s>';
}else if(version>=12){// is EDGE
// document.getElementById('oldbrowsernotice').innerHTML = 'Edge ' + version;
}else if(version>=11){// is IE 11
}else{$('#oldbrowsernotice').addClass("is-active");$('body').addClass("is-oldbrowser");document.getElementById('oldbrowsernotice').innerHTML=skp.oldbrowser_msg;}// add details to debug result
// document.getElementById('details').innerHTML = window.navigator.userAgent;
/**
 * detect IE
 * returns version of IE or false, if browser is not Internet Explorer
 */function detectIE(){var ua=window.navigator.userAgent;// Test values; Uncomment to check result …
// IE 10
// ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
// IE 11
// ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
// Edge 12 (Spartan)
// ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
// Edge 13
// ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';
var msie=ua.indexOf('MSIE ');if(msie>0){// IE 10 or older => return version number
return parseInt(ua.substring(msie+5,ua.indexOf('.',msie)),10);}var trident=ua.indexOf('Trident/');if(trident>0){// IE 11 => return version number
var rv=ua.indexOf('rv:');return parseInt(ua.substring(rv+3,ua.indexOf('.',rv)),10);}var edge=ua.indexOf('Edge/');if(edge>0){// Edge (IE 12+) => return version number
return parseInt(ua.substring(edge+5,ua.indexOf('.',edge)),10);}// other browser
return false;}
;'use strict';jQuery('iframe[src*="youtube.com"]').wrap("<div class='responsive-embed widescreen youtube'/>");jQuery('iframe[src*="vimeo.com"]').wrap("<div class='responsive-embed widescreen vimeo'/>");jQuery('iframe[src*="dailymotion.com"]').wrap("<div class='responsive-embed widescreen dailymotion'/>");
;'use strict';/*
	Cacher les numéros par défaut
	Exemple de syntaxe : <a class="" href="tel:+33(0)389607161" title="Nous appeler" data-hidenum="<?php _e('Appelez-nous','skp'); ?>">+33 (0)3 89 60 71 61</a>
	data-hidenum="<?php _e('Appelez-nous','skp'); ?>"
*/jQuery('a[data-hidenum]').each(function(i,j){jQuery(this).addClass('phonelink');jQuery(j).wrapAll('<span class="hidephone"></span>');var hidenumtxt=jQuery(j).attr('data-hidenum');var phonenum=jQuery(j).attr("href");var phoneclass=jQuery(j).attr("class");if(hidenumtxt==""){hidenumtxt="Appelez-nous";}jQuery(this).addClass('hidephone-link');var phoneicon='';if(jQuery(j).find("i").length>0){phoneicon=jQuery(j).find("i").prop('outerHTML');if(!jQuery(j).hasClass('with-ico')){phoneclass=phoneclass+' with-ico';}}var phonetitle;if(jQuery(j).attr("title")){phonetitle=jQuery(j).attr("title");}else{phonetitle="";}jQuery(j).after('<span class="hidephone-txt '+phoneclass+'" data-phone="'+phonenum+'" title="'+phonetitle+'">'+phoneicon+' '+hidenumtxt+'</span>');// if(jQuery(j).hasClass('button')) {
// 	jQuery(j).after('<span class="hidephone-txt button" data-phone="'+ phonenum +'" title="'+ phonetitle +'">'+ hidenumtxt +'</span>');
// } else {
// 	jQuery(j).after('<span class="hidephone-txt link" data-phone="'+ phonenum +'" title="'+ phonetitle +'">'+ hidenumtxt +'</span>');
// }
});jQuery('body').on('click','.hidephone',function(){jQuery(this).addClass('visible');});
;'use strict';/*
	Ajout une class "is-hover" sur le block lorsqu'un des liens présent dans ce même block est survolé
*/jQuery('.linkshover-block').each(function(i,j){jQuery('.linkshover-link',j).each(function(k,l){jQuery(l).hover(function(){jQuery(j).addClass('is-hover');},function(){jQuery(j).removeClass('is-hover');}//function(){ jQuery(j).toggleClass('is-hover') }
);});});
;"use strict";jQuery(document).ready(function(){jQuery(document).foundation();});
;'use strict';jQuery(window).on("scroll load",function(){if(jQuery(window).scrollTop()>40){jQuery('body, .headersite-main').addClass('is-scrolling');//console.log('inscroll');
}else{jQuery('body, .headersite-main').removeClass('is-scrolling');//console.log('remove scroll');
}});
;'use strict';/*jQuery(function() {
	jQuery('ul.sub-menu > li').hover(function() {
		if (jQuery(this).find('ul').length >= 1) {
			if (isOutOfViewport(this))
				jQuery(this).children('ul').css({'left':'auto','right':'100%'});
			else
				jQuery(this).children('ul').css({'left':'100%','right':'auto'});
		}
	});
	jQuery('ul.menu > li').hover(function() {
		if (jQuery(this).find('ul').length >= 1) {
			if (isOutOfViewport(this))
				jQuery(this).children('ul').css({'right':'0'});
			else
				jQuery(this).children('ul').css({'right':'auto'});
		}
	});
});*/// Ajout element parent offcanvas
jQuery(function(){var ocsub=jQuery('#global .off-canvas .is-accordion-submenu');ocsub.each(function(i,j){ocsub_name='';if(jQuery(j).prev('a').attr("data-secondary-name")){ocsub_name=jQuery(j).prev('a').attr("data-secondary-name");}else{ocsub_name=jQuery(j).prev('a').html();}jQuery(j).prepend('<li class="parent-link menu-item menu-item-type-post_type menu-item-object-page is-submenu-item is-accordion-submenu-item"><a href="'+jQuery(j).prev('a').attr('href')+'">'+ocsub_name+'</a></li>');});});jQuery(window).on('load',function(){// Sync Overlay offcanvas-menu - icon menu
jQuery(".js-off-canvas-overlay").click(function(){jQuery("#icoburger").removeClass("is-active");});// Windows Fix
var md=new MobileDetect(window.navigator.userAgent);//console.log(md.version('Trident'),md.version('Edge'));
if(md.version('Trident')||md.version('Edge')){jQuery('#menusite-topbar ul li > a').bind('pointerdown',function(e){if(e.originalEvent.pointerType=='touch'){jQuery(this).trigger('click');}//console.log(e.originalEvent.pointerType, e.originalEvent.type);
});}});// END (window).on('load')
;'use strict';/*********************
 ** SkelPress Tools **
 *********************/// Première lettre en capitale
function capitaliseFirstLetter(string){return string.charAt(0).toUpperCase()+string.substr(1);}// Récupérer la taille réelle du document (incluant la scrollbar)
function documentsize(){var ds=document.documentElement.clientWidth;// Ancienne méthode (incompatible avec scrollDown)
//var ds = jQuery('body').css({'overflow':'hidden'}).width();
//jQuery('body').css({'overflow':''});
return ds;}// Décomposition des URL's pour le traitement
function parseURL(url){var a=document.createElement('a');a.href=url;return{source:url,protocol:a.protocol.replace(':',''),host:a.hostname,port:a.port,query:a.search,params:function(){var ret={},seg=a.search.replace(/^\?/,'').split('&'),len=seg.length,i=0,s;for(;i<len;i++){if(!seg[i]){continue;}s=seg[i].split('=');ret[s[0]]=s[1];}return ret;}(),file:(a.pathname.match(/\/([^\/?#]+)$/i)||['',''])[1],hash:a.hash.replace('#',''),path:a.pathname.replace(/^([^\/])/,'/$1'),relative:(a.href.match(/tps?:\/\/[^\/]+(.+)/)||['',''])[1],segments:a.pathname.replace(/^\//,'').split('/')};}// Page précédente ou page référente
function historyback(refurl){var hreferrer=parseURL(document.referrer);if(window.history.length<=2||hreferrer.host!=window.location.host){window.location=refurl;}else window.history.back();}// Vérifie si l'élément du sous-menu est en dehors de la fenêtre
function isOutOfViewport(elmt){var ds=documentsize();var $elmt=jQuery(elmt).children('ul');var poswx=$elmt.offset().left+$elmt.width()+20;if(poswx>ds){return true;}else{return false;}}/*
 * getStyleObject Plugin for jQuery JavaScript Library
 * From: http://upshots.org/?p=112
 */// Récupération du style complet d'un autre élément (clone)
(function($){$.fn.getStyleObject=function(){var dom=this.get(0);var style;var prop;var returns={};if(window.getComputedStyle){var camelize=function camelize(a,b){return b.toUpperCase();};style=window.getComputedStyle(dom,null);for(var i=0,l=style.length;i<l;i++){prop=style[i];var camel=prop.replace(/\-([a-z])/g,camelize);var val=style.getPropertyValue(prop);returns[camel]=val;}return returns;}style=dom.currentStyle;if(style){for(prop in style){returns[prop]=style[prop];}return returns;}return this.css();};})(jQuery);jQuery(window).on('load',function(){// Sync Overlay offcanvas-menu - icon menu
jQuery(".js-off-canvas-overlay").click(function(){jQuery("#icoburger").removeClass("is-active");});// addition for swipebox, closing img on click on bg
jQuery(function(){jQuery(document.body).on('click touchend','#swipebox-slider .current img',function(e){return false;}).on('click touchend','#swipebox-slider .current',function(e){jQuery('#swipebox-close').trigger('click');});});// Lightbox sur tous les liens qui contiennent des images
jQuery('a.swipebox, a[href$=".gif"], a[href$=".jpg"], a[href$=".png"], a[href$=".jpeg"]').swipebox({selector:'a.swipebox, a[href$=".gif"], a[href$=".jpg"], a[href$=".png"], a[href$=".jpeg"]'});});// END (window).on('load')
jQuery(document).keydown(function(e){// ESCAPE key pressed
if(e.keyCode==27){jQuery('.popup.open, .search-barloom.open, .off-canvas.is-open #icoburger').foundation('toggle');}});jQuery(document).ready(function(){// Ajout focus recherche
jQuery('.btn-focusinput').click(function(){jQuery('.focusinput').focus();});/*console.log('reinit interchange');
	Foundation.reInit(jQuery('[data-interchange]'));*/});/*
jQuery(window).on('resize', function() {
	console.log('reinit qsdqsdqs');
	Foundation.reInit(jQuery('[data-interchange]'));
});
*/
;"use strict";//AOS init
AOS.init();
;'use strict';jQuery(document).ready(function(){jQuery('.imgslider-simple').each(function(i,j){jQuery(j).slick({infinite:true,arrows:true,dots:false,pauseOnHover:false,speed:800,fade:true,autoplay:true,autoplaySpeed:8400,slidesToShow:1,slidesToScroll:1,cssEase:'linear'});});jQuery('.partnerslider').each(function(i,j){jQuery(j).slick({speed:1000,arrows:true,autoplay:true,autoplaySpeed:3000,centerMode:false,slidesToShow:7,slidesToScroll:1,responsive:[{breakpoint:1700,settings:{slidesToShow:7}},{breakpoint:1280,settings:{slidesToShow:5}},{breakpoint:767,settings:{slidesToShow:2}},{breakpoint:550,settings:{slidesToShow:1}}]});});// Slider : Même hauteur pour toutes les slides
jQuery('.slick-equalizer').each(function(i,j){jQuery(j).on('setPosition',function(){jQuery(this).find('.slick-content').height('auto');var slickTrack=jQuery(this).find('.slick-track');var slickTrackHeight=jQuery(slickTrack).height();jQuery(this).find('.slick-content').css('height',slickTrackHeight+'px');});});// Slider chiffres
jQuery('.slider-galerie').each(function(i,j){jQuery(j).slick({infinite:true,arrows:true,dots:false,pauseOnHover:false,speed:500,autoplay:false,autoplaySpeed:4500,slidesToShow:4,slidesToScroll:1,// appendArrows: $('.slider-galerie-control-'+(i+1)),
cssEase:'cubic-bezier(0.7, 0, 0.3, 1)',responsive:[{breakpoint:1024,settings:{slidesToShow:3}},{breakpoint:767,settings:{slidesToShow:2}},{breakpoint:550,settings:{slidesToShow:1}}]});});});
;'use strict';/* Animation retour content page <a href="#"> */jQuery(function(){jQuery('.backbottom').click(function(){jQuery('html,body').animate({scrollTop:jQuery('#main').offset().top-50});});});// Smooth scroll sur les liens "ancre"
jQuery('.wig-content a[href^="#"]').attr('data-smooth-scroll','');
;'use strict';jQuery(window).bind(' load resize orientationChange ',function(){var footer=jQuery(".footersite");var pos=footer.position();var height=jQuery(window).height();height=height-pos.top;height=height-footer.outerHeight();function stickyFooter(){footer.css({'margin-top':height+'px'});}if(height>0){stickyFooter();}});
;'use strict';jQuery('.title-with-deco').each(function(i,j){jQuery(j).append('<span class="titledeco"><span class="titledeco-inner"></span></span>');});jQuery('.wig-content > h2').each(function(i,j){jQuery(j).addClass('title-with-deco');jQuery(j).append('<span class="titledeco"><span class="titledeco-inner"></span></span>');});
;'use strict';jQuery(function(){jQuery('.backtop').click(function(){jQuery('html,body').animate({scrollTop:jQuery('#global').offset().top});});});
;"use strict";var nosplash=false;jQuery(document).ready(function(){jQuery(".splashscreen").addClass("fadeout");jQuery("body").addClass("go");});jQuery("a[href^='tel:'], a[href^='mailto:'], button.single_add_to_cart_button,.nosplash").click(function(){nosplash=true;});jQuery(window).on('beforeunload',function(){if(!nosplash){jQuery(".splashscreen").removeClass("fadeout");jQuery("body").removeClass("go");}});// Fix blocked loader in Safari with back button navigator
jQuery(window).bind("pageshow",function(event){if(event.originalEvent.persisted){window.location.reload();}});
;'use strict';// Récupération du message d'erreur ou de succès
//-------------------------------
document.addEventListener('wpcf7invalid',function(event){setTimeout(function(){var wpcf7_invalidMsg=jQuery(".wpcf7-response-output").text();jQuery('.wpcf7-custom-response-output').text(wpcf7_invalidMsg);},1000);},false);document.addEventListener('wpcf7spam',function(event){setTimeout(function(){var wpcf7_spamMsg=jQuery(".wpcf7-response-output").text();jQuery('.wpcf7-custom-response-output').text(wpcf7_spamMsg);},1000);},false);document.addEventListener('wpcf7mailfailed',function(event){setTimeout(function(){var wpcf7_mailfailedMsg=jQuery(".wpcf7-response-output").text();jQuery('.wpcf7-custom-response-output').text(wpcf7_mailfailedMsg);},1000);},false);document.addEventListener('wpcf7mailsent',function(event){setTimeout(function(){var wpcf7_mailsentMsg=jQuery(".wpcf7-response-output").text();jQuery('.wpcf7-custom-response-output').text(wpcf7_mailsentMsg);// ouvre le panneau d'informations lors de l'inscription à la newsletter
jQuery('#nlmsgok').addClass('visible');},1000);},false);
;'use strict';jQuery(document).ready(function(){jQuery('.feedslider').each(function(i,j){jQuery(j).slick({speed:444,arrows:true,autoplay:true,autoplaySpeed:3200,centerMode:false,slidesToShow:3,slidesToScroll:1,responsive:[{breakpoint:1280,settings:{slidesToShow:3}},{breakpoint:767,settings:{slidesToShow:2}},{breakpoint:550,settings:{slidesToShow:1}}]});});});// END (document).ready
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vdGlvbi11aS5qcyIsImZvdW5kYXRpb24uY29yZS5qcyIsImZvdW5kYXRpb24udXRpbC5ib3guanMiLCJmb3VuZGF0aW9uLnV0aWwuYm94Lm1pbi5qcyIsImZvdW5kYXRpb24udXRpbC5pbWFnZUxvYWRlci5qcyIsImZvdW5kYXRpb24udXRpbC5pbWFnZUxvYWRlci5taW4uanMiLCJmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQuanMiLCJmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQubWluLmpzIiwiZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnkuanMiLCJmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeS5taW4uanMiLCJmb3VuZGF0aW9uLnV0aWwubW90aW9uLmpzIiwiZm91bmRhdGlvbi51dGlsLm1vdGlvbi5taW4uanMiLCJmb3VuZGF0aW9uLnV0aWwubmVzdC5qcyIsImZvdW5kYXRpb24udXRpbC5uZXN0Lm1pbi5qcyIsImZvdW5kYXRpb24udXRpbC50aW1lci5qcyIsImZvdW5kYXRpb24udXRpbC50aW1lci5taW4uanMiLCJmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlci5qcyIsImZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyLm1pbi5qcyIsImZvdW5kYXRpb24udXRpbC50b3VjaC5qcyIsImZvdW5kYXRpb24udXRpbC50b3VjaC5taW4uanMiLCJmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnMuanMiLCJmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnMubWluLmpzIiwiZm91bmRhdGlvbi5zbW9vdGhTY3JvbGwuanMiLCJmb3VuZGF0aW9uLmFjY29yZGlvbi5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uTWVudS5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZUFjY29yZGlvblRhYnMuanMiLCJmb3VuZGF0aW9uLmRyaWxsZG93bi5qcyIsImZvdW5kYXRpb24uZHJvcGRvd24uanMiLCJmb3VuZGF0aW9uLmRyb3Bkb3duTWVudS5qcyIsImZvdW5kYXRpb24uZXF1YWxpemVyLmpzIiwiZm91bmRhdGlvbi5pbnRlcmNoYW5nZS5qcyIsImZvdW5kYXRpb24ubWFnZWxsYW4uanMiLCJmb3VuZGF0aW9uLm9mZmNhbnZhcy5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnUuanMiLCJmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGUuanMiLCJmb3VuZGF0aW9uLnJldmVhbC5qcyIsImZvdW5kYXRpb24uc3RpY2t5LmpzIiwiZm91bmRhdGlvbi50YWJzLmpzIiwiZm91bmRhdGlvbi50b2dnbGVyLmpzIiwiZm91bmRhdGlvbi50b29sdGlwLmpzIiwianF1ZXJ5LnN3aXBlYm94LmpzIiwic2xpY2subWluLmpzIiwiY2xpY2stZm9jdXMuanMiLCJkZXRlY3QtYnJvd3Nlci1pZS5qcyIsImZsZXgtdmlkZW8uanMiLCJoaWRlcGhvbmUuanMiLCJob3ZlcmxpbmstYmxvY2suanMiLCJpbml0LWZvdW5kYXRpb24uanMiLCJpcy1zY3JvbGxpbmcuanMiLCJtZW51LmpzIiwic2tlbHByZXNzLmpzIiwic2twLWFvcy5qcyIsInNsaWNrLmpzIiwic21vb3RoLXNjcm9sbC5qcyIsInN0aWNreWZvb3Rlci5qcyIsInRpdGxlLXdpdGgtZGVjby5qcyIsIm1kX2JhY2t0b3Avc3JjL2JhY2t0b3AuanMiLCJtZF9zcGxhc2hzY3JlZW4vc3JjL3NwbGFzaHNjcmVlbi5qcyIsIm1kX3dwY2Y3L3NyYy93cGNmNy1yZXNwb25zZS1vdXRwdXQuanMiLCJ6bl9mZWVkX3Bvc3Qvc3JjL3puX2ZlZWRfcG9zdC5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsInZhbHVlIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJnZXREZWZhdWx0IiwiZ2V0TW9kdWxlRXhwb3J0cyIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkZvdW5kYXRpb24iLCJ3aW5kb3ciLCJydGwiLCJHZXRZb0RpZ2l0cyIsInRyYW5zaXRpb25lbmQiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2JveF9fIiwiQm94IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQiLCJJbU5vdFRvdWNoaW5nWW91IiwiT3ZlcmxhcEFyZWEiLCJHZXREaW1lbnNpb25zIiwiR2V0T2Zmc2V0cyIsIkdldEV4cGxpY2l0T2Zmc2V0cyIsImVsZW1lbnQiLCJwYXJlbnQiLCJsck9ubHkiLCJ0Yk9ubHkiLCJpZ25vcmVCb3R0b20iLCJlbGVEaW1zIiwidG9wT3ZlciIsImJvdHRvbU92ZXIiLCJsZWZ0T3ZlciIsInJpZ2h0T3ZlciIsInBhckRpbXMiLCJoZWlnaHQiLCJvZmZzZXQiLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJ3aW5kb3dEaW1zIiwiTWF0aCIsIm1pbiIsInNxcnQiLCJlbGVtIiwibGVuZ3RoIiwiZG9jdW1lbnQiLCJFcnJvciIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYXJSZWN0IiwicGFyZW50Tm9kZSIsIndpblJlY3QiLCJib2R5Iiwid2luWSIsInBhZ2VZT2Zmc2V0Iiwid2luWCIsInBhZ2VYT2Zmc2V0IiwicGFyZW50RGltcyIsImFuY2hvciIsInBvc2l0aW9uIiwidk9mZnNldCIsImhPZmZzZXQiLCJpc092ZXJmbG93IiwiY29uc29sZSIsImxvZyIsIiRlbGVEaW1zIiwiJGFuY2hvckRpbXMiLCJhbGlnbm1lbnQiLCJ0b3BWYWwiLCJsZWZ0VmFsIiwidCIsImUiLCJkZWZhdWx0IiwiYSIsImYiLCJyIiwiaCIsImpRdWVyeSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX18iLCJvbkltYWdlc0xvYWRlZCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0IiwiaW1hZ2VzIiwiY2FsbGJhY2siLCJzZWxmIiwidW5sb2FkZWQiLCJlYWNoIiwiY29tcGxldGUiLCJuYXR1cmFsV2lkdGgiLCJ1bmRlZmluZWQiLCJzaW5nbGVJbWFnZUxvYWRlZCIsImltYWdlIiwiSW1hZ2UiLCJldmVudHMiLCJvbmUiLCJtZSIsImV2ZW50Iiwib2ZmIiwic3JjIiwiYXR0ciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18iLCJLZXlib2FyZCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfX19kZWZhdWx0Iiwia2V5Q29kZXMiLCJjb21tYW5kcyIsImZpbmRGb2N1c2FibGUiLCIkZWxlbWVudCIsImZpbmQiLCJmaWx0ZXIiLCJpcyIsInBhcnNlS2V5Iiwia2V5Iiwid2hpY2giLCJrZXlDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJyZXBsYWNlIiwic2hpZnRLZXkiLCJjdHJsS2V5IiwiYWx0S2V5Iiwia2V5cyIsImdldEtleUNvZGVzIiwiaGFuZGxlS2V5IiwiY29tcG9uZW50IiwiZnVuY3Rpb25zIiwiY29tbWFuZExpc3QiLCJjbWRzIiwiY29tbWFuZCIsImZuIiwid2FybiIsImx0ciIsImV4dGVuZCIsInJldHVyblZhbHVlIiwiYXBwbHkiLCJoYW5kbGVkIiwidW5oYW5kbGVkIiwicmVnaXN0ZXIiLCJjb21wb25lbnROYW1lIiwidHJhcEZvY3VzIiwiJGZvY3VzYWJsZSIsIiRmaXJzdEZvY3VzYWJsZSIsImVxIiwiJGxhc3RGb2N1c2FibGUiLCJvbiIsInRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiZm9jdXMiLCJyZWxlYXNlRm9jdXMiLCJrY3MiLCJrIiwia2MiLCJ1IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fIiwiTWVkaWFRdWVyeSIsIl9pbml0IiwiZGVmYXVsdFF1ZXJpZXMiLCJsYW5kc2NhcGUiLCJwb3J0cmFpdCIsInJldGluYSIsIm1hdGNoTWVkaWEiLCJzdHlsZU1lZGlhIiwibWVkaWEiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJzY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluZm8iLCJ0eXBlIiwiaWQiLCJpbnNlcnRCZWZvcmUiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwibWF0Y2hNZWRpdW0iLCJ0ZXh0Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJ0ZXh0Q29udGVudCIsIm1hdGNoZXMiLCJxdWVyaWVzIiwiY3VycmVudCIsIiRtZXRhIiwiYXBwZW5kVG8iLCJoZWFkIiwiZXh0cmFjdGVkU3R5bGVzIiwiY3NzIiwibmFtZWRRdWVyaWVzIiwicGFyc2VTdHlsZVRvT2JqZWN0IiwicHVzaCIsIl9nZXRDdXJyZW50U2l6ZSIsIl93YXRjaGVyIiwiYXRMZWFzdCIsInNpemUiLCJxdWVyeSIsInRyaW0iLCJzcGxpdCIsIm1hdGNoZWQiLCJfdGhpcyIsIm5ld1NpemUiLCJjdXJyZW50U2l6ZSIsInRyaWdnZXIiLCJzdHIiLCJzdHlsZU9iamVjdCIsInNsaWNlIiwicmVkdWNlIiwicmV0IiwicGFyYW0iLCJwYXJ0cyIsInZhbCIsImRlY29kZVVSSUNvbXBvbmVudCIsIkFycmF5IiwiaXNBcnJheSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fIiwiTW90aW9uIiwiTW92ZSIsImluaXRDbGFzc2VzIiwiYWN0aXZlQ2xhc3NlcyIsImFuaW1hdGVJbiIsImFuaW1hdGlvbiIsImNiIiwiYW5pbWF0ZSIsImFuaW1hdGVPdXQiLCJkdXJhdGlvbiIsImFuaW0iLCJwcm9nIiwic3RhcnQiLCJ0cmlnZ2VySGFuZGxlciIsIm1vdmUiLCJ0cyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaXNJbiIsImluaXRDbGFzcyIsImFjdGl2ZUNsYXNzIiwicmVzZXQiLCJhZGRDbGFzcyIsInNob3ciLCJvZmZzZXRXaWR0aCIsImZpbmlzaCIsImhpZGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJyZW1vdmVDbGFzcyIsImIiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X18iLCJOZXN0IiwiRmVhdGhlciIsIm1lbnUiLCJhcmd1bWVudHMiLCJpdGVtcyIsInN1Yk1lbnVDbGFzcyIsInN1Ykl0ZW1DbGFzcyIsImhhc1N1YkNsYXNzIiwiYXBwbHlBcmlhIiwiJGl0ZW0iLCIkc3ViIiwiY2hpbGRyZW4iLCJCdXJuIiwicmVtb3ZlQXR0ciIsInJvbGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF90aW1lcl9fIiwiVGltZXIiLCJvcHRpb25zIiwibmFtZVNwYWNlIiwiZGF0YSIsInJlbWFpbiIsInRpbWVyIiwiaXNQYXVzZWQiLCJyZXN0YXJ0IiwiY2xlYXJUaW1lb3V0IiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJpbmZpbml0ZSIsInBhdXNlIiwiZW5kIiwiJCIsInJlYWR5U3RhdGUiLCJpbmRleE9mIiwiZ2V0VGltZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX3RvdWNoX18iLCJpbml0IiwiVG91Y2giLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwic3RhcnRQb3NYIiwic3RhcnRQb3NZIiwic3RhcnRUaW1lIiwiZWxhcHNlZFRpbWUiLCJpc01vdmluZyIsIm9uVG91Y2hFbmQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25Ub3VjaE1vdmUiLCJzcG90U3dpcGUiLCJ4IiwidG91Y2hlcyIsInBhZ2VYIiwieSIsInBhZ2VZIiwiZHgiLCJkeSIsImRpciIsImFicyIsIm1vdmVUaHJlc2hvbGQiLCJ0aW1lVGhyZXNob2xkIiwib25Ub3VjaFN0YXJ0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInRlYXJkb3duIiwiU3BvdFN3aXBlIiwidmVyc2lvbiIsImVuYWJsZWQiLCJkb2N1bWVudEVsZW1lbnQiLCJzcGVjaWFsIiwic3dpcGUiLCJzZXR1cCIsIm5vb3AiLCJzZXR1cFNwb3RTd2lwZSIsInNldHVwVG91Y2hIYW5kbGVyIiwiYWRkVG91Y2giLCJlbCIsImJpbmQiLCJoYW5kbGVUb3VjaCIsImNoYW5nZWRUb3VjaGVzIiwiZmlyc3QiLCJldmVudFR5cGVzIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwic2ltdWxhdGVkRXZlbnQiLCJNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwidyIsInYiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9qcXVlcnlfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9qcXVlcnlfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyIsIlRyaWdnZXJzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19fZGVmYXVsdCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJwcmVmaXhlcyIsInRyaWdnZXJzIiwiZm9yRWFjaCIsIkxpc3RlbmVycyIsIkJhc2ljIiwiR2xvYmFsIiwiSW5pdGlhbGl6ZXJzIiwib3Blbkxpc3RlbmVyIiwiY2xvc2VMaXN0ZW5lciIsInRvZ2dsZUxpc3RlbmVyIiwiY2xvc2VhYmxlTGlzdGVuZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJmYWRlT3V0IiwidG9nZ2xlRm9jdXNMaXN0ZW5lciIsImFkZE9wZW5MaXN0ZW5lciIsIiRlbGVtIiwiYWRkQ2xvc2VMaXN0ZW5lciIsImFkZFRvZ2dsZUxpc3RlbmVyIiwiYWRkQ2xvc2VhYmxlTGlzdGVuZXIiLCJhZGRUb2dnbGVGb2N1c0xpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCIkbm9kZXMiLCJzY3JvbGxMaXN0ZW5lciIsImNsb3NlTWVMaXN0ZW5lciIsInBsdWdpbklkIiwicGx1Z2luIiwibmFtZXNwYWNlIiwicGx1Z2lucyIsIm5vdCIsImFkZENsb3NlbWVMaXN0ZW5lciIsInBsdWdpbk5hbWUiLCJ5ZXRpQm94ZXMiLCJwbHVnTmFtZXMiLCJjb25jYXQiLCJlcnJvciIsImxpc3RlbmVycyIsIm1hcCIsImpvaW4iLCJkZWJvdW5jZUdsb2JhbExpc3RlbmVyIiwiZGVib3VuY2UiLCJsaXN0ZW5lciIsImFyZ3MiLCJhZGRSZXNpemVMaXN0ZW5lciIsImFkZFNjcm9sbExpc3RlbmVyIiwiYWRkTXV0YXRpb25FdmVudHNMaXN0ZW5lciIsImxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24iLCJtdXRhdGlvblJlY29yZHNMaXN0IiwiJHRhcmdldCIsImF0dHJpYnV0ZU5hbWUiLCJjbG9zZXN0IiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImF0dHJpYnV0ZUZpbHRlciIsImFkZFNpbXBsZUxpc3RlbmVycyIsIiRkb2N1bWVudCIsImFkZEdsb2JhbExpc3RlbmVycyIsInRyaWdnZXJzSW5pdGlhbGl6ZWQiLCJJSGVhcllvdSIsIlBsdWdpbiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9zbW9vdGhTY3JvbGxfXyIsIlNtb290aFNjcm9sbCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfUGx1Z2luIiwiZ2V0UHJvdG90eXBlT2YiLCJfc2V0dXAiLCJkZWZhdWx0cyIsImNsYXNzTmFtZSIsIl9ldmVudHMiLCJoYW5kbGVMaW5rQ2xpY2siLCJhcnJpdmFsIiwiZ2V0QXR0cmlidXRlIiwiX2luVHJhbnNpdGlvbiIsInNjcm9sbFRvTG9jIiwibG9jIiwic2Nyb2xsUG9zIiwicm91bmQiLCJ0aHJlc2hvbGQiLCJzdG9wIiwic2Nyb2xsVG9wIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25FYXNpbmciLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fYWNjb3JkaW9uX18iLCJBY2NvcmRpb24iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0IiwiX3RoaXMzIiwiJHRhYnMiLCJpZHgiLCIkZWwiLCIkY29udGVudCIsImxpbmtJZCIsIiRpbml0QWN0aXZlIiwiZmlyc3RUaW1lSW5pdCIsImRvd24iLCJfY2hlY2tEZWVwTGluayIsImxvY2F0aW9uIiwiaGFzaCIsIiRsaW5rIiwiJGFuY2hvciIsImhhc0NsYXNzIiwiZGVlcExpbmtTbXVkZ2UiLCJsb2FkIiwiZGVlcExpbmtTbXVkZ2VEZWxheSIsImRlZXBMaW5rIiwiJHRhYkNvbnRlbnQiLCJ0b2dnbGUiLCJuZXh0IiwiJGEiLCJtdWx0aUV4cGFuZCIsInByZXZpb3VzIiwicHJldiIsInVwIiwidXBkYXRlSGlzdG9yeSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJmaXJzdFRpbWUiLCJfdGhpczQiLCJhZGRCYWNrIiwiJGN1cnJlbnRBY3RpdmUiLCJzbGlkZURvd24iLCJzbGlkZVNwZWVkIiwiJGF1bnRzIiwic2libGluZ3MiLCJhbGxvd0FsbENsb3NlZCIsInNsaWRlVXAiLCJfZGVzdHJveSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9hY2NvcmRpb25NZW51X18iLCJBY2NvcmRpb25NZW51IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0IiwibXVsdGlPcGVuIiwiJG1lbnVMaW5rcyIsInN1YklkIiwiaXNBY3RpdmUiLCJzdWJtZW51VG9nZ2xlIiwiYWZ0ZXIiLCJzdWJtZW51VG9nZ2xlVGV4dCIsImluaXRQYW5lcyIsIiRzdWJtZW51IiwiJGVsZW1lbnRzIiwiJHByZXZFbGVtZW50IiwiJG5leHRFbGVtZW50IiwibWF4IiwicGFyZW50cyIsIm9wZW4iLCJjbG9zZSIsImNsb3NlQWxsIiwiaGlkZUFsbCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInNob3dBbGwiLCJwYXJlbnRzVW50aWwiLCJhZGQiLCIkbWVudXMiLCJyZW1vdmUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcmVzcG9uc2l2ZUFjY29yZGlvblRhYnNfXyIsIlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fYWNjb3JkaW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fYWNjb3JkaW9uX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl90YWJzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdGFic19fX2RlZmF1bHQiLCJNZW51UGx1Z2lucyIsInRhYnMiLCJjc3NDbGFzcyIsImFjY29yZGlvbiIsInJ1bGVzIiwiY3VycmVudE1xIiwiY3VycmVudFBsdWdpbiIsInJ1bGVzVHJlZSIsInJ1bGUiLCJydWxlU2l6ZSIsInJ1bGVQbHVnaW4iLCJfZ2V0QWxsT3B0aW9ucyIsImlzRW1wdHlPYmplY3QiLCJfY2hlY2tNZWRpYVF1ZXJpZXMiLCJhbGxPcHRpb25zIiwib2JqIiwiZHVtbXlQbHVnaW4iLCJ0bXBQbHVnaW4iLCJrZXlLZXkiLCJvYmpPYmoiLCJkZXN0cm95IiwibWF0Y2hlZE1xIiwic3RvcmV6ZkRhdGEiLCJfaGFuZGxlTWFya3VwIiwidG9TZXQiLCJmcm9tU3RyaW5nIiwiJHBhbmVscyIsInRhYnNUaXRsZSIsImxpbmtDbGFzcyIsInRhYnNQYW5lbCIsInBhbmVsQ2xhc3MiLCIkbGlIZWFkcyIsIiRsaUhlYWRzQSIsImRpc3BsYXkiLCJ2aXNpYmlsaXR5IiwiZGV0YWNoIiwiJHRhYnNDb250ZW50IiwiJHBsYWNlaG9sZGVyIiwiaW5zZXJ0QWZ0ZXIiLCJ0ZW1wVmFsdWUiLCJUYWJzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX2RyaWxsZG93bl9fIiwiRHJpbGxkb3duIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfYm94X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3BsdWdpbl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3BsdWdpbl9fX2RlZmF1bHQiLCJhdXRvQXBwbHlDbGFzcyIsIiRzdWJtZW51QW5jaG9ycyIsIiRzdWJtZW51cyIsIiRtZW51SXRlbXMiLCJfcHJlcGFyZU1lbnUiLCJfcmVnaXN0ZXJFdmVudHMiLCJfa2V5Ym9hcmRFdmVudHMiLCJwYXJlbnRMaW5rIiwiY2xvbmUiLCJwcmVwZW5kVG8iLCJ3cmFwIiwiJG1lbnUiLCIkYmFjayIsImJhY2tCdXR0b25Qb3NpdGlvbiIsImFwcGVuZCIsImJhY2tCdXR0b24iLCJwcmVwZW5kIiwiX2JhY2siLCJhdXRvSGVpZ2h0IiwiJHdyYXBwZXIiLCJ3cmFwcGVyIiwiYW5pbWF0ZUhlaWdodCIsIl9nZXRNYXhEaW1zIiwiX3Jlc2l6ZSIsIl9zaG93IiwiY2xvc2VPbkNsaWNrIiwiJGJvZHkiLCJjb250YWlucyIsIl9oaWRlQWxsIiwiX2JpbmRIYW5kbGVyIiwiX3Njcm9sbFRvcCIsIiRzY3JvbGxUb3BFbGVtZW50Iiwic2Nyb2xsVG9wRWxlbWVudCIsInBhcnNlSW50Iiwic2Nyb2xsVG9wT2Zmc2V0IiwiX2hpZGUiLCJwYXJlbnRTdWJNZW51IiwiX21lbnVMaW5rRXZlbnRzIiwiYmx1ciIsIm1heEhlaWdodCIsInJlc3VsdCIsIm51bU9mRWxlbXMiLCJ1bndyYXAiLCJyZW1vdmVEYXRhIiwiUG9zaXRpb25hYmxlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3BsdWdpbl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3BsdWdpbl9fX2RlZmF1bHQiLCJQT1NJVElPTlMiLCJWRVJUSUNBTF9BTElHTk1FTlRTIiwiSE9SSVpPTlRBTF9BTElHTk1FTlRTIiwiQUxJR05NRU5UUyIsIm5leHRJdGVtIiwiaXRlbSIsImFycmF5IiwiY3VycmVudElkeCIsInRyaWVkUG9zaXRpb25zIiwiX2dldERlZmF1bHRQb3NpdGlvbiIsIl9nZXREZWZhdWx0QWxpZ25tZW50IiwiX3JlcG9zaXRpb24iLCJfYWxpZ25tZW50c0V4aGF1c3RlZCIsIl9yZWFsaWduIiwiX2FkZFRyaWVkUG9zaXRpb24iLCJfcG9zaXRpb25zRXhoYXVzdGVkIiwiaXNFeGhhdXN0ZWQiLCJfZ2V0Vk9mZnNldCIsIl9nZXRIT2Zmc2V0IiwiX3NldFBvc2l0aW9uIiwiJHBhcmVudCIsImFsbG93T3ZlcmxhcCIsIm92ZXJsYXBzIiwibWluT3ZlcmxhcCIsIm1pbkNvb3JkaW5hdGVzIiwib3ZlcmxhcCIsImFsbG93Qm90dG9tT3ZlcmxhcCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9kcm9wZG93bl9fIiwiRHJvcGRvd24iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcG9zaXRpb25hYmxlX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fIiwiX2dldCIsInJlY2VpdmVyIiwiRnVuY3Rpb24iLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX1Bvc2l0aW9uYWJsZSIsIiRpZCIsIiRhbmNob3JzIiwiX3NldEN1cnJlbnRBbmNob3IiLCJwYXJlbnRDbGFzcyIsIiRjdXJyZW50QW5jaG9yIiwibWF0Y2giLCJob3Jpem9udGFsUG9zaXRpb24iLCJleGVjIiwiaG92ZXIiLCJib2R5RGF0YSIsIndoYXRpbnB1dCIsInRpbWVvdXQiLCJob3ZlckRlbGF5IiwiaG92ZXJQYW5lIiwidmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzIiwiX2FkZEJvZHlIYW5kbGVyIiwiYXV0b0ZvY3VzIiwicG9zaXRpb25DbGFzcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9kcm9wZG93bk1lbnVfXyIsIkRyb3Bkb3duTWVudSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2JveF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfYm94X19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2NvcmVfX19kZWZhdWx0Iiwic3VicyIsInZlcnRpY2FsQ2xhc3MiLCJyaWdodENsYXNzIiwiY2hhbmdlZCIsIl9pc1ZlcnRpY2FsIiwiX2lzUnRsIiwiaGFzVG91Y2giLCJvbnRvdWNoc3RhcnQiLCJwYXJDbGFzcyIsImhhbmRsZUNsaWNrRm4iLCJoYXNTdWIiLCJoYXNDbGlja2VkIiwiY2xpY2tPcGVuIiwiZm9yY2VGb2xsb3ciLCJjbG9zZU9uQ2xpY2tJbnNpZGUiLCJkaXNhYmxlSG92ZXIiLCJhdXRvY2xvc2UiLCJjbG9zaW5nVGltZSIsImlzVGFiIiwiaW5kZXgiLCJuZXh0U2libGluZyIsInByZXZTaWJsaW5nIiwib3BlblN1YiIsImNsb3NlU3ViIiwiJHNpYnMiLCJjbGVhciIsIm9sZENsYXNzIiwiJHBhcmVudExpIiwiJHRvQ2xvc2UiLCJzb21ldGhpbmdUb0Nsb3NlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX2VxdWFsaXplcl9fIiwiRXF1YWxpemVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfaW1hZ2VMb2FkZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX19fZGVmYXVsdCIsImVxSWQiLCIkd2F0Y2hlZCIsImhhc05lc3RlZCIsImlzTmVzdGVkIiwiaXNPbiIsIm9uUmVzaXplTWVCb3VuZCIsIl9vblJlc2l6ZU1lIiwib25Qb3N0RXF1YWxpemVkQm91bmQiLCJfb25Qb3N0RXF1YWxpemVkIiwiaW1ncyIsInRvb1NtYWxsIiwiZXF1YWxpemVPbiIsIl9jaGVja01RIiwiX3JlZmxvdyIsIl9wYXVzZUV2ZW50cyIsIl9raWxsc3dpdGNoIiwiZXF1YWxpemVPblN0YWNrIiwiX2lzU3RhY2tlZCIsImVxdWFsaXplQnlSb3ciLCJnZXRIZWlnaHRzQnlSb3ciLCJhcHBseUhlaWdodEJ5Um93IiwiZ2V0SGVpZ2h0cyIsImFwcGx5SGVpZ2h0IiwiaGVpZ2h0cyIsImxlbiIsIm9mZnNldEhlaWdodCIsImxhc3RFbFRvcE9mZnNldCIsImdyb3VwcyIsImdyb3VwIiwiZWxPZmZzZXRUb3AiLCJqIiwibG4iLCJncm91cHNJTGVuZ3RoIiwibGVuSiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9pbnRlcmNoYW5nZV9fIiwiSW50ZXJjaGFuZ2UiLCJjdXJyZW50UGF0aCIsIl9hZGRCcmVha3BvaW50cyIsIl9nZW5lcmF0ZVJ1bGVzIiwicGF0aCIsIlNQRUNJQUxfUVVFUklFUyIsInJ1bGVzTGlzdCIsIm5vZGVOYW1lIiwicmVzcG9uc2UiLCJodG1sIiwiZm91bmRhdGlvbiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9tYWdlbGxhbl9fIiwiTWFnZWxsYW4iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fc21vb3RoU2Nyb2xsX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fc21vb3RoU2Nyb2xsX19fZGVmYXVsdCIsImNhbGNQb2ludHMiLCIkdGFyZ2V0cyIsIiRsaW5rcyIsIiRhY3RpdmUiLCJwb2ludHMiLCJ3aW5IZWlnaHQiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsImRvY0hlaWdodCIsInNjcm9sbEhlaWdodCIsIiR0YXIiLCJwdCIsInRhcmdldFBvaW50Iiwib3B0cyIsImVhc2luZyIsImRlZXBMaW5raW5nIiwiX3VwZGF0ZUFjdGl2ZSIsInJlZmxvdyIsIl9kZWVwTGlua1Njcm9sbCIsIndpblBvcyIsImN1cklkeCIsImlzRG93biIsImN1clZpc2libGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fb2ZmY2FudmFzX18iLCJPZmZDYW52YXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18iLCJjb250ZW50Q2xhc3NlcyIsImJhc2UiLCJyZXZlYWwiLCIkbGFzdFRyaWdnZXIiLCIkdHJpZ2dlcnMiLCJuZXN0ZWQiLCJjb250ZW50SWQiLCJ0cmFuc2l0aW9uIiwiY29udGVudE92ZXJsYXkiLCJvdmVybGF5Iiwib3ZlcmxheVBvc2l0aW9uIiwic2V0QXR0cmlidXRlIiwiJG92ZXJsYXkiLCJpc1JldmVhbGVkIiwiUmVnRXhwIiwicmV2ZWFsQ2xhc3MiLCJ0ZXN0IiwicmV2ZWFsT24iLCJfc2V0TVFDaGVja2VyIiwidHJhbnNpdGlvblRpbWUiLCJfcmVtb3ZlQ29udGVudENsYXNzZXMiLCJfaGFuZGxlS2V5Ym9hcmQiLCJoYXNSZXZlYWwiLCJfYWRkQ29udGVudENsYXNzZXMiLCJfc3RvcFNjcm9sbGluZyIsIl9yZWNvcmRTY3JvbGxhYmxlIiwiYWxsb3dVcCIsImFsbG93RG93biIsImxhc3RZIiwib3JpZ2luYWxFdmVudCIsIl9zdG9wU2Nyb2xsUHJvcGFnYXRpb24iLCJmb3JjZVRvIiwic2Nyb2xsVG8iLCJjb250ZW50U2Nyb2xsIiwiY2FudmFzRm9jdXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcmVzcG9uc2l2ZU1lbnVfXyIsIlJlc3BvbnNpdmVNZW51IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX2Ryb3Bkb3duTWVudV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX2Ryb3Bkb3duTWVudV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fZHJpbGxkb3duX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fZHJpbGxkb3duX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fZm91bmRhdGlvbl9hY2NvcmRpb25NZW51X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2ZvdW5kYXRpb25fYWNjb3JkaW9uTWVudV9fX2RlZmF1bHQiLCJkcm9wZG93biIsImRyaWxsZG93biIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9yZXNwb25zaXZlVG9nZ2xlX18iLCJSZXNwb25zaXZlVG9nZ2xlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX19kZWZhdWx0IiwidGFyZ2V0SUQiLCIkdGFyZ2V0TWVudSIsIiR0b2dnbGVyIiwiaW5wdXQiLCJhbmltYXRpb25JbiIsImFuaW1hdGlvbk91dCIsIl91cGRhdGUiLCJfdXBkYXRlTXFIYW5kbGVyIiwidG9nZ2xlTWVudSIsImhpZGVGb3IiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcmV2ZWFsX18iLCJSZXZlYWwiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fX2RlZmF1bHQiLCJjYWNoZWQiLCJtcSIsImlzTW9iaWxlIiwibW9iaWxlU25pZmYiLCJmdWxsU2NyZWVuIiwiX21ha2VPdmVybGF5IiwiYWRkaXRpb25hbE92ZXJsYXlDbGFzc2VzIiwiX3VwZGF0ZVBvc2l0aW9uIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwibWFyZ2luIiwiX2hhbmRsZVN0YXRlIiwibXVsdGlwbGVPcGVuZWQiLCJhZGRSZXZlYWxPcGVuQ2xhc3NlcyIsIm9yaWdpbmFsU2Nyb2xsUG9zIiwiYWZ0ZXJBbmltYXRpb24iLCJmb2N1c2FibGVFbGVtZW50cyIsInNob3dEZWxheSIsIl9leHRyYUhhbmRsZXJzIiwiY2xvc2VPbkVzYyIsImZpbmlzaFVwIiwiaGlkZURlbGF5IiwicmVzZXRPbkNsb3NlIiwidGl0bGUiLCJocmVmIiwiYnRtT2Zmc2V0UGN0IiwiaVBob25lU25pZmYiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJhbmRyb2lkU25pZmYiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fc3RpY2t5X18iLCJTdGlja3kiLCIkY29udGFpbmVyIiwid2FzV3JhcHBlZCIsImNvbnRhaW5lciIsImNvbnRhaW5lckNsYXNzIiwic3RpY2t5Q2xhc3MiLCJzY3JvbGxDb3VudCIsImNoZWNrRXZlcnkiLCJpc1N0dWNrIiwiY29udGFpbmVySGVpZ2h0IiwiZWxlbUhlaWdodCIsIl9wYXJzZVBvaW50cyIsIl9zZXRTaXplcyIsInNjcm9sbCIsIl9jYWxjIiwiX3JlbW92ZVN0aWNreSIsInRvcFBvaW50IiwicmV2ZXJzZSIsInRvcEFuY2hvciIsImJ0bSIsImJ0bUFuY2hvciIsInB0cyIsImJyZWFrcyIsInBsYWNlIiwidG9Mb3dlckNhc2UiLCJjYW5TdGljayIsIl9ldmVudHNIYW5kbGVyIiwiX3BhdXNlTGlzdGVuZXJzIiwiY2hlY2tTaXplcyIsImJvdHRvbVBvaW50IiwiX3NldFN0aWNreSIsInN0aWNrVG8iLCJtcmduIiwibm90U3R1Y2tUbyIsImlzVG9wIiwic3RpY2tUb1RvcCIsImFuY2hvclB0IiwiYW5jaG9ySGVpZ2h0IiwidG9wT3JCb3R0b20iLCJzdGlja3lPbiIsIm5ld0VsZW1XaWR0aCIsImNvbXAiLCJwZG5nbCIsInBkbmdyIiwibmV3Q29udGFpbmVySGVpZ2h0IiwiX3NldEJyZWFrUG9pbnRzIiwibVRvcCIsImVtQ2FsYyIsIm1hcmdpblRvcCIsIm1CdG0iLCJtYXJnaW5Cb3R0b20iLCJib3R0b20iLCJlbSIsImZvbnRTaXplIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3RhYnNfXyIsIiR0YWJUaXRsZXMiLCJsaW5rQWN0aXZlQ2xhc3MiLCJtYXRjaEhlaWdodCIsIiRpbWFnZXMiLCJfc2V0SGVpZ2h0Iiwic2VsZWN0VGFiIiwiX2FkZEtleUhhbmRsZXIiLCJfYWRkQ2xpY2tIYW5kbGVyIiwiX3NldEhlaWdodE1xSGFuZGxlciIsIl9oYW5kbGVUYWJDaGFuZ2UiLCJ3cmFwT25LZXlzIiwibGFzdCIsImhpc3RvcnlIYW5kbGVkIiwiYWN0aXZlQ29sbGFwc2UiLCJfY29sbGFwc2VUYWIiLCIkb2xkVGFiIiwiJHRhYkxpbmsiLCIkdGFyZ2V0Q29udGVudCIsIl9vcGVuVGFiIiwicGFuZWxBY3RpdmVDbGFzcyIsIiR0YXJnZXRfYW5jaG9yIiwiaWRTdHIiLCJwYW5lbCIsInRlbXAiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdG9nZ2xlcl9fIiwiVG9nZ2xlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18iLCJfdG9nZ2xlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsIl91cGRhdGVBUklBIiwiX3RvZ2dsZUFuaW1hdGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdG9vbHRpcF9fIiwiVG9vbHRpcCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wb3NpdGlvbmFibGVfXyIsImlzQ2xpY2siLCJlbGVtSWQiLCJ0aXBUZXh0IiwidGVtcGxhdGUiLCJfYnVpbGRUZW1wbGF0ZSIsImFsbG93SHRtbCIsInRyaWdnZXJDbGFzcyIsInRvb2x0aXBXaWR0aCIsInRvb2x0aXBIZWlnaHQiLCJ0ZW1wbGF0ZUNsYXNzZXMiLCJ0b29sdGlwQ2xhc3MiLCIkdGVtcGxhdGUiLCJzaG93T24iLCJmYWRlSW4iLCJmYWRlSW5EdXJhdGlvbiIsImZhZGVPdXREdXJhdGlvbiIsImlzRm9jdXMiLCJkaXNhYmxlRm9yVG91Y2giLCJ0b3VjaENsb3NlVGV4dCIsInN3aXBlYm94IiwidWkiLCJ1c2VDU1MiLCJ1c2VTVkciLCJpbml0aWFsSW5kZXhPbkFycmF5IiwicmVtb3ZlQmFyc09uTW9iaWxlIiwiaGlkZUNsb3NlQnV0dG9uT25Nb2JpbGUiLCJoaWRlQmFyc0RlbGF5IiwidmlkZW9NYXhXaWR0aCIsInZpbWVvQ29sb3IiLCJiZWZvcmVPcGVuIiwiYWZ0ZXJPcGVuIiwiYWZ0ZXJDbG9zZSIsImFmdGVyTWVkaWEiLCJuZXh0U2xpZGUiLCJwcmV2U2xpZGUiLCJsb29wQXRFbmQiLCJhdXRvcGxheVZpZGVvcyIsInF1ZXJ5U3RyaW5nRGF0YSIsInRvZ2dsZUNsYXNzT25Mb2FkIiwiZWxlbWVudHMiLCJzZWxlY3RvciIsImlzVG91Y2giLCJjcmVhdGVUb3VjaCIsIm1zTWF4VG91Y2hQb2ludHMiLCJzdXBwb3J0U1ZHIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlU1ZHUmVjdCIsIndpbldpZHRoIiwiaW5uZXJXaWR0aCIsImN1cnJlbnRYIiwic2V0dGluZ3MiLCJjbG9zZVNsaWRlIiwiYWN0aW9ucyIsInJlbFR5cGUiLCJyZWxWYWwiLCJpc09wZW4iLCJidWlsZCIsIm9wZW5TbGlkZSIsIm9wZW5NZWRpYSIsInByZWxvYWRNZWRpYSIsIiR0aGlzIiwiYmciLCJzZXREaW0iLCJnZXN0dXJlIiwia2V5Ym9hcmQiLCJhbmltQmFycyIsInJlc2l6ZSIsInNsaWRlckNzcyIsIm9yaWVudGF0aW9uIiwic3VwcG9ydFRyYW5zaXRpb24iLCJkb0Nzc1RyYW5zIiwiaERpc3RhbmNlIiwidkRpc3RhbmNlIiwiaERpc3RhbmNlTGFzdCIsInZEaXN0YW5jZUxhc3QiLCJoRGlzdGFuY2VQZXJjZW50IiwidlN3aXBlIiwiaFN3aXBlIiwiaFN3aXBNaW5EaXN0YW5jZSIsInZTd2lwTWluRGlzdGFuY2UiLCJzdGFydENvb3JkcyIsImVuZENvb3JkcyIsImJhcnMiLCJzbGlkZXIiLCJ0YXJnZXRUb3VjaGVzIiwib3BhY2l0eSIsImdldFByZXYiLCJnZXROZXh0Iiwic2hvd0JhcnMiLCJoaWRlQmFycyIsImNsaWNrIiwiYWN0aW9uIiwic2V0U2xpZGUiLCJpc0ZpcnN0Iiwic2V0VGl0bGUiLCJpc1ZpZGVvIiwic2xpZGUiLCJsb2FkTWVkaWEiLCJnZXRWaWRlbyIsImVtcHR5IiwicGFyc2VVcmkiLCJ1cmkiLCJjdXN0b21EYXRhIiwicXMiLCJzZWFyY2giLCJKU09OIiwicGFyc2UiLCJpc1BsYWluT2JqZWN0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidXJsIiwiaWZyYW1lIiwieW91dHViZVVybCIsInlvdXR1YmVTaG9ydFVybCIsInZpbWVvVXJsIiwiaW1nIiwiY29udGVudHMiLCJ1bmJpbmQiLCJkZWZpbmUiLCJhbWQiLCJyZXF1aXJlIiwiU2xpY2siLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXJyb3dzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJkb3RzIiwiZG90c0NsYXNzIiwiZHJhZ2dhYmxlIiwiZWRnZUZyaWN0aW9uIiwiZmFkZSIsImZvY3VzT25TZWxlY3QiLCJmb2N1c09uQ2hhbmdlIiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3BlZWQiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZVRyYW5zZm9ybSIsInZhcmlhYmxlV2lkdGgiLCJ2ZXJ0aWNhbCIsInZlcnRpY2FsU3dpcGluZyIsIndhaXRGb3JBbmltYXRlIiwiekluZGV4IiwiaW5pdGlhbHMiLCJhbmltYXRpbmciLCJkcmFnZ2luZyIsImF1dG9QbGF5VGltZXIiLCJjdXJyZW50RGlyZWN0aW9uIiwiY3VycmVudExlZnQiLCJjdXJyZW50U2xpZGUiLCJkaXJlY3Rpb24iLCIkZG90cyIsImxpc3RXaWR0aCIsImxpc3RIZWlnaHQiLCJsb2FkSW5kZXgiLCIkbmV4dEFycm93IiwiJHByZXZBcnJvdyIsInNjcm9sbGluZyIsInNsaWRlQ291bnQiLCJzbGlkZVdpZHRoIiwiJHNsaWRlVHJhY2siLCIkc2xpZGVzIiwic2xpZGluZyIsInNsaWRlT2Zmc2V0Iiwic3dpcGVMZWZ0Iiwic3dpcGluZyIsIiRsaXN0IiwidG91Y2hPYmplY3QiLCJ0cmFuc2Zvcm1zRW5hYmxlZCIsInVuc2xpY2tlZCIsImFjdGl2ZUJyZWFrcG9pbnQiLCJhbmltVHlwZSIsImFuaW1Qcm9wIiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50U2V0dGluZ3MiLCJjc3NUcmFuc2l0aW9ucyIsImZvY3Vzc2VkIiwiaW50ZXJydXB0ZWQiLCJoaWRkZW4iLCJwYXVzZWQiLCJwb3NpdGlvblByb3AiLCJyb3dDb3VudCIsInNob3VsZENsaWNrIiwiJHNsaWRlciIsIiRzbGlkZXNDYWNoZSIsInRyYW5zZm9ybVR5cGUiLCJ0cmFuc2l0aW9uVHlwZSIsInZpc2liaWxpdHlDaGFuZ2UiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd1RpbWVyIiwib3JpZ2luYWxTZXR0aW5ncyIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwicHJveHkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNoYW5nZVNsaWRlIiwiY2xpY2tIYW5kbGVyIiwic2VsZWN0SGFuZGxlciIsInNldFBvc2l0aW9uIiwic3dpcGVIYW5kbGVyIiwiZHJhZ0hhbmRsZXIiLCJrZXlIYW5kbGVyIiwiaW5zdGFuY2VVaWQiLCJodG1sRXhwciIsInJlZ2lzdGVyQnJlYWtwb2ludHMiLCJhY3RpdmF0ZUFEQSIsInRhYmluZGV4IiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsInVubG9hZCIsInJlaW5pdCIsImFuaW1hdGVTbGlkZSIsImFuaW1TdGFydCIsInN0ZXAiLCJjZWlsIiwiYXBwbHlUcmFuc2l0aW9uIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJnZXROYXZUYXJnZXQiLCJzbGljayIsInNsaWRlSGFuZGxlciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImJ1aWxkQXJyb3dzIiwiYnVpbGREb3RzIiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsIndyYXBBbGwiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJhcHBlbmRDaGlsZCIsImNoZWNrUmVzcG9uc2l2ZSIsInVuc2xpY2siLCJyZWZyZXNoIiwiY3VycmVudFRhcmdldCIsIm1lc3NhZ2UiLCJjaGVja05hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwiY2xlYW5VcFNsaWRlRXZlbnRzIiwib3JpZW50YXRpb25DaGFuZ2UiLCJjbGVhblVwUm93cyIsImZhZGVTbGlkZSIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiZ2V0TGVmdCIsImZsb29yIiwib2Zmc2V0TGVmdCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50IiwiZ29UbyIsInNsaWNrR29UbyIsInNldFByb3BzIiwic3RhcnRMb2FkIiwibG9hZFNsaWRlciIsImluaXRpYWxpemVFdmVudHMiLCJ1cGRhdGVBcnJvd3MiLCJpbml0QURBIiwiaW5pdEFycm93RXZlbnRzIiwiaW5pdERvdEV2ZW50cyIsImluaXRTbGlkZUV2ZW50cyIsImluaXRVSSIsInRhZ05hbWUiLCJvbmxvYWQiLCJvbmVycm9yIiwicHJvZ3Jlc3NpdmVMYXp5TG9hZCIsInNsaWNrTmV4dCIsInNsaWNrUGF1c2UiLCJwbGF5Iiwic2xpY2tQbGF5IiwicG9zdFNsaWRlIiwic2xpY2tQcmV2IiwiYnJlYWtwb2ludCIsInNwbGljZSIsInNvcnQiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJzZXRDU1MiLCJzZXREaW1lbnNpb25zIiwicGFkZGluZyIsInNldEZhZGUiLCJyaWdodCIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJtc1RyYW5zaXRpb24iLCJPVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsInN3aXBlRGlyZWN0aW9uIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsIlBJIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwic3dpcGVTdGFydCIsInN3aXBlTW92ZSIsInBvdyIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsImZvY3VzaW4iLCJkZXRlY3RJRSIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwic2twIiwib2xkYnJvd3Nlcl9tc2ciLCJ1YSIsIm1zaWUiLCJzdWJzdHJpbmciLCJ0cmlkZW50IiwicnYiLCJlZGdlIiwiaGlkZW51bXR4dCIsInBob25lbnVtIiwicGhvbmVjbGFzcyIsInBob25laWNvbiIsInByb3AiLCJwaG9uZXRpdGxlIiwicmVhZHkiLCJvY3N1YiIsIm9jc3ViX25hbWUiLCJtZCIsIk1vYmlsZURldGVjdCIsInBvaW50ZXJUeXBlIiwiY2FwaXRhbGlzZUZpcnN0TGV0dGVyIiwic3RyaW5nIiwiY2hhckF0Iiwic3Vic3RyIiwiZG9jdW1lbnRzaXplIiwiZHMiLCJjbGllbnRXaWR0aCIsInBhcnNlVVJMIiwic291cmNlIiwicHJvdG9jb2wiLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicGFyYW1zIiwic2VnIiwiZmlsZSIsInBhdGhuYW1lIiwicmVsYXRpdmUiLCJzZWdtZW50cyIsImhpc3RvcnliYWNrIiwicmVmdXJsIiwiaHJlZmVycmVyIiwicmVmZXJyZXIiLCJiYWNrIiwiaXNPdXRPZlZpZXdwb3J0IiwiZWxtdCIsIiRlbG10IiwicG9zd3giLCJnZXRTdHlsZU9iamVjdCIsImRvbSIsInJldHVybnMiLCJjYW1lbGl6ZSIsImNhbWVsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImtleWRvd24iLCJBT1MiLCJzbGlja1RyYWNrIiwic2xpY2tUcmFja0hlaWdodCIsImZvb3RlciIsInBvcyIsInN0aWNreUZvb3RlciIsIm5vc3BsYXNoIiwicGVyc2lzdGVkIiwicmVsb2FkIiwid3BjZjdfaW52YWxpZE1zZyIsIndwY2Y3X3NwYW1Nc2ciLCJ3cGNmN19tYWlsZmFpbGVkTXNnIiwid3BjZjdfbWFpbHNlbnRNc2ciXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NDckhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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LENBQUV3SixXQUFZLEdBQWQsQ0FBbUI5UCxTQUFVLENBQUVzRyxhQUFjLENBQWhCLENBQTdCLENBRlcsQ0FHWCxDQUFFd0osV0FBWSxHQUFkLENBQW1COVAsU0FBVSxDQUFFc0csYUFBYyxDQUFoQixDQUE3QixDQUhXLENBUkcsQ0FBaEIsRUFjQSxDQWZELEVBaUJBLENBbkJELEVBbUJJIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjsoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5Nb3Rpb25VSSA9IGZhY3Rvcnkocm9vdC5qUXVlcnkpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uKCQpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gUG9seWZpbGwgZm9yIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuKGZ1bmN0aW9uKCkge1xuICBpZiAoIURhdGUubm93KVxuICAgIERhdGUubm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2cCsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10pO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxufSkoKTtcblxudmFyIGluaXRDbGFzc2VzICAgPSBbJ211aS1lbnRlcicsICdtdWktbGVhdmUnXTtcbnZhciBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuLy8gRmluZCB0aGUgcmlnaHQgXCJ0cmFuc2l0aW9uZW5kXCIgZXZlbnQgZm9yIHRoaXMgYnJvd3NlclxudmFyIGVuZEV2ZW50ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgJ3RyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJ1dlYmtpdFRyYW5zaXRpb24nOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJ09UcmFuc2l0aW9uJzogJ290cmFuc2l0aW9uZW5kJ1xuICB9XG4gIHZhciBlbGVtID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIGZvciAodmFyIHQgaW4gdHJhbnNpdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGVsZW0uc3R5bGVbdF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbnNbdF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59KSgpO1xuXG5mdW5jdGlvbiBhbmltYXRlKGlzSW4sIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgZWxlbWVudCA9ICQoZWxlbWVudCkuZXEoMCk7XG5cbiAgaWYgKCFlbGVtZW50Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIGlmIChlbmRFdmVudCA9PT0gbnVsbCkge1xuICAgIGlzSW4gPyBlbGVtZW50LnNob3coKSA6IGVsZW1lbnQuaGlkZSgpO1xuICAgIGNiKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGluaXRDbGFzcyA9IGlzSW4gPyBpbml0Q2xhc3Nlc1swXSA6IGluaXRDbGFzc2VzWzFdO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0luID8gYWN0aXZlQ2xhc3Nlc1swXSA6IGFjdGl2ZUNsYXNzZXNbMV07XG5cbiAgLy8gU2V0IHVwIHRoZSBhbmltYXRpb25cbiAgcmVzZXQoKTtcbiAgZWxlbWVudC5hZGRDbGFzcyhhbmltYXRpb24pO1xuICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsICdub25lJyk7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LmFkZENsYXNzKGluaXRDbGFzcyk7XG4gICAgaWYgKGlzSW4pIGVsZW1lbnQuc2hvdygpO1xuICB9KTtcblxuICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50WzBdLm9mZnNldFdpZHRoO1xuICAgIGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uJywgJycpO1xuICAgIGVsZW1lbnQuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICB9KTtcblxuICAvLyBDbGVhbiB1cCB0aGUgYW5pbWF0aW9uIHdoZW4gaXQgZmluaXNoZXNcbiAgZWxlbWVudC5vbmUoJ3RyYW5zaXRpb25lbmQnLCBmaW5pc2gpO1xuXG4gIC8vIEhpZGVzIHRoZSBlbGVtZW50IChmb3Igb3V0IGFuaW1hdGlvbnMpLCByZXNldHMgdGhlIGVsZW1lbnQsIGFuZCBydW5zIGEgY2FsbGJhY2tcbiAgZnVuY3Rpb24gZmluaXNoKCkge1xuICAgIGlmICghaXNJbikgZWxlbWVudC5oaWRlKCk7XG4gICAgcmVzZXQoKTtcbiAgICBpZiAoY2IpIGNiLmFwcGx5KGVsZW1lbnQpO1xuICB9XG5cbiAgLy8gUmVzZXRzIHRyYW5zaXRpb25zIGFuZCByZW1vdmVzIG1vdGlvbi1zcGVjaWZpYyBjbGFzc2VzXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGVsZW1lbnRbMF0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gMDtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGluaXRDbGFzcyArICcgJyArIGFjdGl2ZUNsYXNzICsgJyAnICsgYW5pbWF0aW9uKTtcbiAgfVxufVxuXG52YXIgTW90aW9uVUkgPSB7XG4gIGFuaW1hdGVJbjogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICAgIGFuaW1hdGUodHJ1ZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gIH0sXG5cbiAgYW5pbWF0ZU91dDogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICAgIGFuaW1hdGUoZmFsc2UsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9XG59XG5cbnJldHVybiBNb3Rpb25VSTtcbn0pKTtcbiIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBydGw7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBHZXRZb0RpZ2l0czsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiY1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHRyYW5zaXRpb25lbmQ7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcblxuXG5cblxuLy8gQ29yZSBGb3VuZGF0aW9uIFV0aWxpdGllcywgdXRpbGl6ZWQgaW4gYSBudW1iZXIgb2YgcGxhY2VzLlxuXG4vKipcbiAqIFJldHVybnMgYSBib29sZWFuIGZvciBSVEwgc3VwcG9ydFxuICovXG5mdW5jdGlvbiBydGwoKSB7XG4gIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdodG1sJykuYXR0cignZGlyJykgPT09ICdydGwnO1xufVxuXG4vKipcbiAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIC0gbnVtYmVyIG9mIHJhbmRvbSBiYXNlLTM2IGRpZ2l0cyBkZXNpcmVkLiBJbmNyZWFzZSBmb3IgbW9yZSByYW5kb20gc3RyaW5ncy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAqIEBkZWZhdWx0IHtTdHJpbmd9ICcnIC0gaWYgbm8gcGx1Z2luIG5hbWUgaXMgcHJvdmlkZWQsIG5vdGhpbmcgaXMgYXBwZW5kZWQgdG8gdGhlIHVpZC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IC0gdW5pcXVlIGlkXG4gKi9cbmZ1bmN0aW9uIEdldFlvRGlnaXRzKGxlbmd0aCwgbmFtZXNwYWNlKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCB8fCA2O1xuICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnBvdygzNiwgbGVuZ3RoICsgMSkgLSBNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMzYsIGxlbmd0aCkpLnRvU3RyaW5nKDM2KS5zbGljZSgxKSArIChuYW1lc3BhY2UgPyAnLScgKyBuYW1lc3BhY2UgOiAnJyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25lbmQoJGVsZW0pIHtcbiAgdmFyIHRyYW5zaXRpb25zID0ge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgfTtcbiAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgIGVuZDtcblxuICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtLnN0eWxlW3RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gdHJhbnNpdGlvbnNbdF07XG4gICAgfVxuICB9XG4gIGlmIChlbmQpIHtcbiAgICByZXR1cm4gZW5kO1xuICB9IGVsc2Uge1xuICAgIGVuZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgJGVsZW0udHJpZ2dlckhhbmRsZXIoJ3RyYW5zaXRpb25lbmQnLCBbJGVsZW1dKTtcbiAgICB9LCAxKTtcbiAgICByZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xuICB9XG59XG5cblxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10uYWRkVG9KcXVlcnkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYSk7XG5cbi8vIFRoZXNlIGFyZSBub3cgc2VwYXJhdGVkIG91dCwgYnV0IGhpc3RvcmljYWxseSB3ZXJlIGEgcGFydCBvZiB0aGlzIG1vZHVsZSxcbi8vIGFuZCBzaW5jZSB0aGlzIGlzIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdlIGluY2x1ZGUgdGhlbSBpblxuLy8gdGhpcyBlbnRyeS5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX2NvcmVfX1tcImFcIiAvKiBGb3VuZGF0aW9uICovXS5ydGwgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJhXCIgLyogcnRsICovXTtcbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL10uR2V0WW9EaWdpdHMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJiXCIgLyogR2V0WW9EaWdpdHMgKi9dO1xuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX2NvcmVfX1tcImFcIiAvKiBGb3VuZGF0aW9uICovXS50cmFuc2l0aW9uZW5kID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiY1wiIC8qIHRyYW5zaXRpb25lbmQgKi9dO1xuXG4vLyBFdmVyeSBwbHVnaW4gZGVwZW5kcyBvbiBwbHVnaW4gbm93LCB3ZSBjYW4gaW5jbHVkZSB0aGF0IG9uIHRoZSBjb3JlIGZvciB0aGVcbi8vIHNjcmlwdCBpbmNsdXNpb24gcGF0aC5cblxuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fY29yZV9fW1wiYVwiIC8qIEZvdW5kYXRpb24gKi9dLlBsdWdpbiA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX1tcImFcIiAvKiBQbHVnaW4gKi9dO1xuXG53aW5kb3cuRm91bmRhdGlvbiA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9jb3JlX19bXCJhXCIgLyogRm91bmRhdGlvbiAqL107XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRm91bmRhdGlvbjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXG5cblxuXG5cbnZhciBGT1VOREFUSU9OX1ZFUlNJT04gPSAnNi40LjMnO1xuXG4vLyBHbG9iYWwgRm91bmRhdGlvbiBvYmplY3Rcbi8vIFRoaXMgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdywgb3IgdXNlZCBhcyBhIG1vZHVsZSBmb3IgQU1EL0Jyb3dzZXJpZnlcbnZhciBGb3VuZGF0aW9uID0ge1xuICB2ZXJzaW9uOiBGT1VOREFUSU9OX1ZFUlNJT04sXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBpbml0aWFsaXplZCBwbHVnaW5zLlxuICAgKi9cbiAgX3BsdWdpbnM6IHt9LFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgZ2VuZXJhdGVkIHVuaXF1ZSBpZHMgZm9yIHBsdWdpbiBpbnN0YW5jZXNcbiAgICovXG4gIF91dWlkczogW10sXG5cbiAgLyoqXG4gICAqIERlZmluZXMgYSBGb3VuZGF0aW9uIHBsdWdpbiwgYWRkaW5nIGl0IHRvIHRoZSBgRm91bmRhdGlvbmAgbmFtZXNwYWNlIGFuZCB0aGUgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUgd2hlbiByZWZsb3dpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHBsdWdpbi5cbiAgICovXG4gIHBsdWdpbjogZnVuY3Rpb24gKHBsdWdpbiwgbmFtZSkge1xuICAgIC8vIE9iamVjdCBrZXkgdG8gdXNlIHdoZW4gYWRkaW5nIHRvIGdsb2JhbCBGb3VuZGF0aW9uIG9iamVjdFxuICAgIC8vIEV4YW1wbGVzOiBGb3VuZGF0aW9uLlJldmVhbCwgRm91bmRhdGlvbi5PZmZDYW52YXNcbiAgICB2YXIgY2xhc3NOYW1lID0gbmFtZSB8fCBmdW5jdGlvbk5hbWUocGx1Z2luKTtcbiAgICAvLyBPYmplY3Qga2V5IHRvIHVzZSB3aGVuIHN0b3JpbmcgdGhlIHBsdWdpbiwgYWxzbyB1c2VkIHRvIGNyZWF0ZSB0aGUgaWRlbnRpZnlpbmcgZGF0YSBhdHRyaWJ1dGUgZm9yIHRoZSBwbHVnaW5cbiAgICAvLyBFeGFtcGxlczogZGF0YS1yZXZlYWwsIGRhdGEtb2ZmLWNhbnZhc1xuICAgIHZhciBhdHRyTmFtZSA9IGh5cGhlbmF0ZShjbGFzc05hbWUpO1xuXG4gICAgLy8gQWRkIHRvIHRoZSBGb3VuZGF0aW9uIG9iamVjdCBhbmQgdGhlIHBsdWdpbnMgbGlzdCAoZm9yIHJlZmxvd2luZylcbiAgICB0aGlzLl9wbHVnaW5zW2F0dHJOYW1lXSA9IHRoaXNbY2xhc3NOYW1lXSA9IHBsdWdpbjtcbiAgfSxcbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBQb3B1bGF0ZXMgdGhlIF91dWlkcyBhcnJheSB3aXRoIHBvaW50ZXJzIHRvIGVhY2ggaW5kaXZpZHVhbCBwbHVnaW4gaW5zdGFuY2UuXG4gICAqIEFkZHMgdGhlIGB6ZlBsdWdpbmAgZGF0YS1hdHRyaWJ1dGUgdG8gcHJvZ3JhbW1hdGljYWxseSBjcmVhdGVkIHBsdWdpbnMgdG8gYWxsb3cgdXNlIG9mICQoc2VsZWN0b3IpLmZvdW5kYXRpb24obWV0aG9kKSBjYWxscy5cbiAgICogQWxzbyBmaXJlcyB0aGUgaW5pdGlhbGl6YXRpb24gZXZlbnQgZm9yIGVhY2ggcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBwbHVnaW4sIHBhc3NlZCBhcyBhIGNhbWVsQ2FzZWQgc3RyaW5nLlxuICAgKiBAZmlyZXMgUGx1Z2luI2luaXRcbiAgICovXG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiAocGx1Z2luLCBuYW1lKSB7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lID8gaHlwaGVuYXRlKG5hbWUpIDogZnVuY3Rpb25OYW1lKHBsdWdpbi5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtcbiAgICBwbHVnaW4udXVpZCA9IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJiXCIgLyogR2V0WW9EaWdpdHMgKi9dKSg2LCBwbHVnaW5OYW1lKTtcblxuICAgIGlmICghcGx1Z2luLiRlbGVtZW50LmF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUpKSB7XG4gICAgICBwbHVnaW4uJGVsZW1lbnQuYXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSwgcGx1Z2luLnV1aWQpO1xuICAgIH1cbiAgICBpZiAoIXBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpKSB7XG4gICAgICBwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nLCBwbHVnaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKCdpbml0LnpmLicgKyBwbHVnaW5OYW1lKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBwbHVnaW5OYW1lID0gaHlwaGVuYXRlKGZ1bmN0aW9uTmFtZShwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKS5jb25zdHJ1Y3RvcikpO1xuXG4gICAgdGhpcy5fdXVpZHMuc3BsaWNlKHRoaXMuX3V1aWRzLmluZGV4T2YocGx1Z2luLnV1aWQpLCAxKTtcbiAgICBwbHVnaW4uJGVsZW1lbnQucmVtb3ZlQXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSkucmVtb3ZlRGF0YSgnemZQbHVnaW4nKVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgYmVlbiBkZXN0cm95ZWQuXG4gICAgICogQGV2ZW50IFBsdWdpbiNkZXN0cm95ZWRcbiAgICAgKi9cbiAgICAudHJpZ2dlcignZGVzdHJveWVkLnpmLicgKyBwbHVnaW5OYW1lKTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHBsdWdpbikge1xuICAgICAgcGx1Z2luW3Byb3BdID0gbnVsbDsgLy9jbGVhbiB1cCBzY3JpcHQgdG8gcHJlcCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgIH1cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBDYXVzZXMgb25lIG9yIG1vcmUgYWN0aXZlIHBsdWdpbnMgdG8gcmUtaW5pdGlhbGl6ZSwgcmVzZXR0aW5nIGV2ZW50IGxpc3RlbmVycywgcmVjYWxjdWxhdGluZyBwb3NpdGlvbnMsIGV0Yy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbnMgLSBvcHRpb25hbCBzdHJpbmcgb2YgYW4gaW5kaXZpZHVhbCBwbHVnaW4ga2V5LCBhdHRhaW5lZCBieSBjYWxsaW5nIGAkKGVsZW1lbnQpLmRhdGEoJ3BsdWdpbk5hbWUnKWAsIG9yIHN0cmluZyBvZiBhIHBsdWdpbiBjbGFzcyBpLmUuIGAnZHJvcGRvd24nYFxuICAgKiBAZGVmYXVsdCBJZiBubyBhcmd1bWVudCBpcyBwYXNzZWQsIHJlZmxvdyBhbGwgY3VycmVudGx5IGFjdGl2ZSBwbHVnaW5zLlxuICAgKi9cbiAgcmVJbml0OiBmdW5jdGlvbiAocGx1Z2lucykge1xuICAgIHZhciBpc0pRID0gcGx1Z2lucyBpbnN0YW5jZW9mIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0pRKSB7XG4gICAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgcGx1Z2lucyxcbiAgICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGZucyA9IHtcbiAgICAgICAgICAnb2JqZWN0JzogZnVuY3Rpb24gKHBsZ3MpIHtcbiAgICAgICAgICAgIHBsZ3MuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICBwID0gaHlwaGVuYXRlKHApO1xuICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS0nICsgcCArICddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3N0cmluZyc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHBsdWdpbnMgPSBoeXBoZW5hdGUocGx1Z2lucyk7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS0nICsgcGx1Z2lucyArICddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICd1bmRlZmluZWQnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzWydvYmplY3QnXShPYmplY3Qua2V5cyhfdGhpcy5fcGx1Z2lucykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm5zW3R5cGVdKHBsdWdpbnMpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICByZXR1cm4gcGx1Z2lucztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgcGx1Z2lucyBvbiBhbnkgZWxlbWVudHMgd2l0aGluIGBlbGVtYCAoYW5kIGBlbGVtYCBpdHNlbGYpIHRoYXQgYXJlbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwbHVnaW5zIC0gQSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZS4gTGVhdmUgdGhpcyBvdXQgdG8gaW5pdGlhbGl6ZSBldmVyeXRoaW5nLlxuICAgKi9cbiAgcmVmbG93OiBmdW5jdGlvbiAoZWxlbSwgcGx1Z2lucykge1xuXG4gICAgLy8gSWYgcGx1Z2lucyBpcyB1bmRlZmluZWQsIGp1c3QgZ3JhYiBldmVyeXRoaW5nXG4gICAgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcGx1Z2lucyA9IE9iamVjdC5rZXlzKHRoaXMuX3BsdWdpbnMpO1xuICAgIH1cbiAgICAvLyBJZiBwbHVnaW5zIGlzIGEgc3RyaW5nLCBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IHdpdGggb25lIGl0ZW1cbiAgICBlbHNlIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGx1Z2lucyA9IFtwbHVnaW5zXTtcbiAgICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBwbHVnaW5cbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmVhY2gocGx1Z2lucywgZnVuY3Rpb24gKGksIG5hbWUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSBfdGhpcy5fcGx1Z2luc1tuYW1lXTtcblxuICAgICAgLy8gTG9jYWxpemUgdGhlIHNlYXJjaCB0byBhbGwgZWxlbWVudHMgaW5zaWRlIGVsZW0sIGFzIHdlbGwgYXMgZWxlbSBpdHNlbGYsIHVubGVzcyBlbGVtID09PSBkb2N1bWVudFxuICAgICAgdmFyICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlbGVtKS5maW5kKCdbZGF0YS0nICsgbmFtZSArICddJykuYWRkQmFjaygnW2RhdGEtJyArIG5hbWUgKyAnXScpO1xuXG4gICAgICAvLyBGb3IgZWFjaCBwbHVnaW4gZm91bmQsIGluaXRpYWxpemUgaXRcbiAgICAgICRlbGVtLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIgKyBuYW1lICsgXCIgb24gYW4gZWxlbWVudCB0aGF0IGFscmVhZHkgaGFzIGEgRm91bmRhdGlvbiBwbHVnaW4uXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkZWwuYXR0cignZGF0YS1vcHRpb25zJykpIHtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZS5zcGxpdCgnOicpLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVsLnRyaW0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgJGVsLmRhdGEoJ3pmUGx1Z2luJywgbmV3IHBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCBvcHRzKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0Rm5OYW1lOiBmdW5jdGlvbk5hbWUsXG5cbiAgYWRkVG9KcXVlcnk6IGZ1bmN0aW9uICgkKSB7XG4gICAgLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4gICAgLy8gVE9ETzogbmVlZCB3YXkgdG8gcmVmbG93IHZzLiByZS1pbml0aWFsaXplXG4gICAgLyoqXG4gICAgICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gbWV0aG9kIC0gQW4gYWN0aW9uIHRvIHBlcmZvcm0gb24gdGhlIGN1cnJlbnQgalF1ZXJ5IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIG1ldGhvZCxcbiAgICAgICAgICAkbm9KUyA9ICQoJy5uby1qcycpO1xuXG4gICAgICBpZiAoJG5vSlMubGVuZ3RoKSB7XG4gICAgICAgICRub0pTLnJlbW92ZUNsYXNzKCduby1qcycpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy9uZWVkcyB0byBpbml0aWFsaXplIHRoZSBGb3VuZGF0aW9uIG9iamVjdCwgb3IgYW4gaW5kaXZpZHVhbCBwbHVnaW4uXG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcImFcIiAvKiBNZWRpYVF1ZXJ5ICovXS5faW5pdCgpO1xuICAgICAgICBGb3VuZGF0aW9uLnJlZmxvdyh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy9hbiBpbmRpdmlkdWFsIG1ldGhvZCB0byBpbnZva2Ugb24gYSBwbHVnaW4gb3IgZ3JvdXAgb2YgcGx1Z2luc1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7IC8vY29sbGVjdCBhbGwgdGhlIGFyZ3VtZW50cywgaWYgbmVjZXNzYXJ5XG4gICAgICAgIHZhciBwbHVnQ2xhc3MgPSB0aGlzLmRhdGEoJ3pmUGx1Z2luJyk7IC8vZGV0ZXJtaW5lIHRoZSBjbGFzcyBvZiBwbHVnaW5cblxuICAgICAgICBpZiAocGx1Z0NsYXNzICE9PSB1bmRlZmluZWQgJiYgcGx1Z0NsYXNzW21ldGhvZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vbWFrZSBzdXJlIGJvdGggdGhlIGNsYXNzIGFuZCBtZXRob2QgZXhpc3RcbiAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vaWYgdGhlcmUncyBvbmx5IG9uZSwgY2FsbCBpdCBkaXJlY3RseS5cbiAgICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KHBsdWdDbGFzcywgYXJncyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICAgICAgICAgLy9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseSgkKGVsKS5kYXRhKCd6ZlBsdWdpbicpLCBhcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2Vycm9yIGZvciBubyBjbGFzcyBvciBubyBtZXRob2RcbiAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJXZSdyZSBzb3JyeSwgJ1wiICsgbWV0aG9kICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUgbWV0aG9kIGZvciBcIiArIChwbHVnQ2xhc3MgPyBmdW5jdGlvbk5hbWUocGx1Z0NsYXNzKSA6ICd0aGlzIGVsZW1lbnQnKSArICcuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdXZVxcJ3JlIHNvcnJ5LCAnICsgdHlwZSArICcgaXMgbm90IGEgdmFsaWQgcGFyYW1ldGVyLiBZb3UgbXVzdCB1c2UgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBtZXRob2QgeW91IHdpc2ggdG8gaW52b2tlLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAkLmZuLmZvdW5kYXRpb24gPSBmb3VuZGF0aW9uO1xuICAgIHJldHVybiAkO1xuICB9XG59O1xuXG5Gb3VuZGF0aW9uLnV0aWwgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBmb3IgYXBwbHlpbmcgYSBkZWJvdW5jZSBlZmZlY3QgdG8gYSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCBlbmQgb2YgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5IC0gVGltZSBpbiBtcyB0byBkZWxheSB0aGUgY2FsbCBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAqL1xuICB0aHJvdHRsZTogZnVuY3Rpb24gKGZ1bmMsIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgaWYgKHRpbWVyID09PSBudWxsKSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG53aW5kb3cuRm91bmRhdGlvbiA9IEZvdW5kYXRpb247XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbiAoKSB7XG4gIGlmICghRGF0ZS5ub3cgfHwgIXdpbmRvdy5EYXRlLm5vdykgd2luZG93LkRhdGUubm93ID0gRGF0ZS5ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsraSkge1xuICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdnAgKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdnAgKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gIH1cbiAgaWYgKC9pUChhZHxob25lfG9kKS4qT1MgNi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayhsYXN0VGltZSA9IG5leHRUaW1lKTtcbiAgICAgIH0sIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxuICAvKipcbiAgICogUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLm5vdywgcmVxdWlyZWQgYnkgckFGXG4gICAqL1xuICBpZiAoIXdpbmRvdy5wZXJmb3JtYW5jZSB8fCAhd2luZG93LnBlcmZvcm1hbmNlLm5vdykge1xuICAgIHdpbmRvdy5wZXJmb3JtYW5jZSA9IHtcbiAgICAgIHN0YXJ0OiBEYXRlLm5vdygpLFxuICAgICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gdGhpcy5zdGFydDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KSgpO1xuaWYgKCFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCkge1xuICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgIGZUb0JpbmQgPSB0aGlzLFxuICAgICAgICBmTk9QID0gZnVuY3Rpb24gKCkge30sXG4gICAgICAgIGZCb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmVG9CaW5kLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBmTk9QID8gdGhpcyA6IG9UaGlzLCBhQXJncy5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIG5hdGl2ZSBmdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZVxuICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICB9XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG5mdW5jdGlvbiBmdW5jdGlvbk5hbWUoZm4pIHtcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgIHZhciByZXN1bHRzID0gZnVuY05hbWVSZWdleC5leGVjKGZuLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiByZXN1bHRzICYmIHJlc3VsdHMubGVuZ3RoID4gMSA/IHJlc3VsdHNbMV0udHJpbSgpIDogXCJcIjtcbiAgfSBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpIHtcbiAgaWYgKCd0cnVlJyA9PT0gc3RyKSByZXR1cm4gdHJ1ZTtlbHNlIGlmICgnZmFsc2UnID09PSBzdHIpIHJldHVybiBmYWxzZTtlbHNlIGlmICghaXNOYU4oc3RyICogMSkpIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG4gIHJldHVybiBzdHI7XG59XG4vLyBDb252ZXJ0IFBhc2NhbENhc2UgdG8ga2ViYWItY2FzZVxuLy8gVGhhbmsgeW91OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84OTU1NTgwXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn1cblxuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGx1Z2luOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cblxuXG4vLyBBYnN0cmFjdCBjbGFzcyBmb3IgcHJvdmlkaW5nIGxpZmVjeWNsZSBob29rcy4gRXhwZWN0IHBsdWdpbnMgdG8gZGVmaW5lIEFUIExFQVNUXG4vLyB7ZnVuY3Rpb259IF9zZXR1cCAocmVwbGFjZXMgcHJldmlvdXMgY29uc3RydWN0b3IpLFxuLy8ge2Z1bmN0aW9ufSBfZGVzdHJveSAocmVwbGFjZXMgcHJldmlvdXMgZGVzdHJveSlcblxudmFyIFBsdWdpbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1Z2luKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1Z2luKTtcblxuICAgIHRoaXMuX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIHZhciBwbHVnaW5OYW1lID0gZ2V0UGx1Z2luTmFtZSh0aGlzKTtcbiAgICB0aGlzLnV1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiYlwiIC8qIEdldFlvRGlnaXRzICovXSkoNiwgcGx1Z2luTmFtZSk7XG5cbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSkpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSwgdGhpcy51dWlkKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nLCB0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgcGx1Z2luIGhhcyBpbml0aWFsaXplZC5cbiAgICAgKiBAZXZlbnQgUGx1Z2luI2luaXRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2luaXQuemYuJyArIHBsdWdpbk5hbWUpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBsdWdpbiwgW3tcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX2Rlc3Ryb3koKTtcbiAgICAgIHZhciBwbHVnaW5OYW1lID0gZ2V0UGx1Z2luTmFtZSh0aGlzKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSkucmVtb3ZlRGF0YSgnemZQbHVnaW4nKVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAgICogQGV2ZW50IFBsdWdpbiNkZXN0cm95ZWRcbiAgICAgICAqL1xuICAgICAgLnRyaWdnZXIoJ2Rlc3Ryb3llZC56Zi4nICsgcGx1Z2luTmFtZSk7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMpIHtcbiAgICAgICAgdGhpc1twcm9wXSA9IG51bGw7IC8vY2xlYW4gdXAgc2NyaXB0IHRvIHByZXAgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGx1Z2luO1xufSgpO1xuXG4vLyBDb252ZXJ0IFBhc2NhbENhc2UgdG8ga2ViYWItY2FzZVxuLy8gVGhhbmsgeW91OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84OTU1NTgwXG5cblxuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGdldFBsdWdpbk5hbWUob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShvYmouY29uc3RydWN0b3IubmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShvYmouY2xhc3NOYW1lKTtcbiAgfVxufVxuXG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNZWRpYVF1ZXJ5OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG5cblxuXG5cbi8vIERlZmF1bHQgc2V0IG9mIG1lZGlhIHF1ZXJpZXNcbnZhciBkZWZhdWx0UXVlcmllcyA9IHtcbiAgJ2RlZmF1bHQnOiAnb25seSBzY3JlZW4nLFxuICBsYW5kc2NhcGU6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgcG9ydHJhaXQ6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICByZXRpbmE6ICdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksJyArICdvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksJyArICdvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksJyArICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgKyAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwnICsgJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbi8vIG1hdGNoTWVkaWEoKSBwb2x5ZmlsbCAtIFRlc3QgYSBDU1MgbWVkaWEgdHlwZS9xdWVyeSBpbiBKUy5cbi8vIEF1dGhvcnMgJiBjb3B5cmlnaHQgKGMpIDIwMTI6IFNjb3R0IEplaGwsIFBhdWwgSXJpc2gsIE5pY2hvbGFzIFpha2FzLCBEYXZpZCBLbmlnaHQuIER1YWwgTUlUL0JTRCBsaWNlbnNlXG52YXIgbWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhIHx8IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgbWF0Y2hNZWRpdW0gYXBpIHN1Y2ggYXMgSUUgOSBhbmQgd2Via2l0XG5cbiAgdmFyIHN0eWxlTWVkaWEgPSB3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWE7XG5cbiAgLy8gRm9yIHRob3NlIHRoYXQgZG9uJ3Qgc3VwcG9ydCBtYXRjaE1lZGl1bVxuICBpZiAoIXN0eWxlTWVkaWEpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgICAgICBzY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF0sXG4gICAgICAgIGluZm8gPSBudWxsO1xuXG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUuaWQgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgc2NyaXB0ICYmIHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcblxuICAgIC8vICdzdHlsZS5jdXJyZW50U3R5bGUnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlJyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgaW5mbyA9ICdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc3R5bGUsIG51bGwpIHx8IHN0eWxlLmN1cnJlbnRTdHlsZTtcblxuICAgIHN0eWxlTWVkaWEgPSB7XG4gICAgICBtYXRjaE1lZGl1bTogZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gJ0BtZWRpYSAnICsgbWVkaWEgKyAneyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH0nO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChtZWRpYSkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzOiBzdHlsZU1lZGlhLm1hdGNoTWVkaXVtKG1lZGlhIHx8ICdhbGwnKSxcbiAgICAgIG1lZGlhOiBtZWRpYSB8fCAnYWxsJ1xuICAgIH07XG4gIH07XG59KCk7XG5cbnZhciBNZWRpYVF1ZXJ5ID0ge1xuICBxdWVyaWVzOiBbXSxcblxuICBjdXJyZW50OiAnJyxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG1lZGlhIHF1ZXJ5IGhlbHBlciwgYnkgZXh0cmFjdGluZyB0aGUgYnJlYWtwb2ludCBsaXN0IGZyb20gdGhlIENTUyBhbmQgYWN0aXZhdGluZyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciAkbWV0YSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ21ldGEuZm91bmRhdGlvbi1tcScpO1xuICAgIGlmICghJG1ldGEubGVuZ3RoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCc8bWV0YSBjbGFzcz1cImZvdW5kYXRpb24tbXFcIj4nKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKTtcbiAgICB9XG5cbiAgICB2YXIgZXh0cmFjdGVkU3R5bGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnLmZvdW5kYXRpb24tbXEnKS5jc3MoJ2ZvbnQtZmFtaWx5Jyk7XG4gICAgdmFyIG5hbWVkUXVlcmllcztcblxuICAgIG5hbWVkUXVlcmllcyA9IHBhcnNlU3R5bGVUb09iamVjdChleHRyYWN0ZWRTdHlsZXMpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG5hbWVkUXVlcmllcykge1xuICAgICAgaWYgKG5hbWVkUXVlcmllcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHNlbGYucXVlcmllcy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgdmFsdWU6ICdvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJyArIG5hbWVkUXVlcmllc1trZXldICsgJyknXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMuX2dldEN1cnJlbnRTaXplKCk7XG5cbiAgICB0aGlzLl93YXRjaGVyKCk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gaXMgYXQgbGVhc3QgYXMgd2lkZSBhcyBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyZWFrcG9pbnQgbWF0Y2hlcywgYGZhbHNlYCBpZiBpdCdzIHNtYWxsZXIuXG4gICAqL1xuICBhdExlYXN0OiBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHZhciBxdWVyeSA9IHRoaXMuZ2V0KHNpemUpO1xuXG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gbWF0Y2hNZWRpYShxdWVyeSkubWF0Y2hlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gbWF0Y2hlcyB0byBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2ssIGVpdGhlciAnc21hbGwgb25seScgb3IgJ3NtYWxsJy4gT21pdHRpbmcgJ29ubHknIGZhbGxzIGJhY2sgdG8gdXNpbmcgYXRMZWFzdCgpIG1ldGhvZC5cbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgYnJlYWtwb2ludCBtYXRjaGVzLCBgZmFsc2VgIGlmIGl0IGRvZXMgbm90LlxuICAgKi9cbiAgaXM6IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgc2l6ZSA9IHNpemUudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgaWYgKHNpemUubGVuZ3RoID4gMSAmJiBzaXplWzFdID09PSAnb25seScpIHtcbiAgICAgIGlmIChzaXplWzBdID09PSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpKSByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYXRMZWFzdChzaXplWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1lZGlhIHF1ZXJ5IG9mIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gLSBUaGUgbWVkaWEgcXVlcnkgb2YgdGhlIGJyZWFrcG9pbnQsIG9yIGBudWxsYCBpZiB0aGUgYnJlYWtwb2ludCBkb2Vzbid0IGV4aXN0LlxuICAgKi9cbiAgZ2V0OiBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICBpZiAodGhpcy5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcbiAgICAgICAgaWYgKHNpemUgPT09IHF1ZXJ5Lm5hbWUpIHJldHVybiBxdWVyeS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgbmFtZSBieSB0ZXN0aW5nIGV2ZXJ5IGJyZWFrcG9pbnQgYW5kIHJldHVybmluZyB0aGUgbGFzdCBvbmUgdG8gbWF0Y2ggKHRoZSBiaWdnZXN0IG9uZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBOYW1lIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBfZ2V0Q3VycmVudFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWF0Y2hlZDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWVyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJpZXNbaV07XG5cbiAgICAgIGlmIChtYXRjaE1lZGlhKHF1ZXJ5LnZhbHVlKS5tYXRjaGVzKSB7XG4gICAgICAgIG1hdGNoZWQgPSBxdWVyeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1hdGNoZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZC5uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9XG4gIH0sXG5cblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSBicmVha3BvaW50IHdhdGNoZXIsIHdoaWNoIGZpcmVzIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgd2hlbmV2ZXIgdGhlIGJyZWFrcG9pbnQgY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd2F0Y2hlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdyZXNpemUuemYubWVkaWFxdWVyeScpLm9uKCdyZXNpemUuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuZXdTaXplID0gX3RoaXMuX2dldEN1cnJlbnRTaXplKCksXG4gICAgICAgICAgY3VycmVudFNpemUgPSBfdGhpcy5jdXJyZW50O1xuXG4gICAgICBpZiAobmV3U2l6ZSAhPT0gY3VycmVudFNpemUpIHtcbiAgICAgICAgLy8gQ2hhbmdlIHRoZSBjdXJyZW50IG1lZGlhIHF1ZXJ5XG4gICAgICAgIF90aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgIC8vIEJyb2FkY2FzdCB0aGUgbWVkaWEgcXVlcnkgY2hhbmdlIG9uIHRoZSB3aW5kb3dcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLnRyaWdnZXIoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIFtuZXdTaXplLCBjdXJyZW50U2l6ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbiAocmV0LCBwYXJhbSkge1xuICAgIHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG4gICAgdmFyIGtleSA9IHBhcnRzWzBdO1xuICAgIHZhciB2YWwgPSBwYXJ0c1sxXTtcbiAgICBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5KTtcblxuICAgIC8vIG1pc3NpbmcgYD1gIHNob3VsZCBiZSBgbnVsbGA6XG4gICAgLy8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuICAgIHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuXG4gICAgaWYgKCFyZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0W2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJldFtrZXldKSkge1xuICAgICAgcmV0W2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRba2V5XSA9IFtyZXRba2V5XSwgdmFsXTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSwge30pO1xuXG4gIHJldHVybiBzdHlsZU9iamVjdDtcbn1cblxuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pOyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0ZvdW5kYXRpb246IHdpbmRvdy5Gb3VuZGF0aW9ufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDEwMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7cnRsOiB3aW5kb3cuRm91bmRhdGlvbi5ydGwsIEdldFlvRGlnaXRzOiB3aW5kb3cuRm91bmRhdGlvbi5HZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZDogd2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2JveF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NCk7XG5cblxuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fW1wiRm91bmRhdGlvblwiXS5Cb3ggPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX1tcImFcIiAvKiBCb3ggKi9dO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBCb3g7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcblxuXG5cblxudmFyIEJveCA9IHtcbiAgSW1Ob3RUb3VjaGluZ1lvdTogSW1Ob3RUb3VjaGluZ1lvdSxcbiAgT3ZlcmxhcEFyZWE6IE92ZXJsYXBBcmVhLFxuICBHZXREaW1lbnNpb25zOiBHZXREaW1lbnNpb25zLFxuICBHZXRPZmZzZXRzOiBHZXRPZmZzZXRzLFxuICBHZXRFeHBsaWNpdE9mZnNldHM6IEdldEV4cGxpY2l0T2Zmc2V0c1xuXG4gIC8qKlxuICAgKiBDb21wYXJlcyB0aGUgZGltZW5zaW9ucyBvZiBhbiBlbGVtZW50IHRvIGEgY29udGFpbmVyIGFuZCBkZXRlcm1pbmVzIGNvbGxpc2lvbiBldmVudHMgd2l0aCBjb250YWluZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdGVzdCBmb3IgY29sbGlzaW9ucy5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHBhcmVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIGJvdW5kaW5nIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIHtCb29sZWFufSBsck9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayBsZWZ0IGFuZCByaWdodCB2YWx1ZXMgb25seS5cbiAgICogQHBhcmFtIHtCb29sZWFufSB0Yk9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayB0b3AgYW5kIGJvdHRvbSB2YWx1ZXMgb25seS5cbiAgICogQGRlZmF1bHQgaWYgbm8gcGFyZW50IG9iamVjdCBwYXNzZWQsIGRldGVjdHMgY29sbGlzaW9ucyB3aXRoIGB3aW5kb3dgLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIGNvbGxpc2lvbiBmcmVlLCBmYWxzZSBpZiBhIGNvbGxpc2lvbiBpbiBhbnkgZGlyZWN0aW9uLlxuICAgKi9cbn07ZnVuY3Rpb24gSW1Ob3RUb3VjaGluZ1lvdShlbGVtZW50LCBwYXJlbnQsIGxyT25seSwgdGJPbmx5LCBpZ25vcmVCb3R0b20pIHtcbiAgcmV0dXJuIE92ZXJsYXBBcmVhKGVsZW1lbnQsIHBhcmVudCwgbHJPbmx5LCB0Yk9ubHksIGlnbm9yZUJvdHRvbSkgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBPdmVybGFwQXJlYShlbGVtZW50LCBwYXJlbnQsIGxyT25seSwgdGJPbmx5LCBpZ25vcmVCb3R0b20pIHtcbiAgdmFyIGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgdG9wT3ZlcixcbiAgICAgIGJvdHRvbU92ZXIsXG4gICAgICBsZWZ0T3ZlcixcbiAgICAgIHJpZ2h0T3ZlcjtcbiAgaWYgKHBhcmVudCkge1xuICAgIHZhciBwYXJEaW1zID0gR2V0RGltZW5zaW9ucyhwYXJlbnQpO1xuXG4gICAgYm90dG9tT3ZlciA9IHBhckRpbXMuaGVpZ2h0ICsgcGFyRGltcy5vZmZzZXQudG9wIC0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0KTtcbiAgICB0b3BPdmVyID0gZWxlRGltcy5vZmZzZXQudG9wIC0gcGFyRGltcy5vZmZzZXQudG9wO1xuICAgIGxlZnRPdmVyID0gZWxlRGltcy5vZmZzZXQubGVmdCAtIHBhckRpbXMub2Zmc2V0LmxlZnQ7XG4gICAgcmlnaHRPdmVyID0gcGFyRGltcy53aWR0aCArIHBhckRpbXMub2Zmc2V0LmxlZnQgLSAoZWxlRGltcy5vZmZzZXQubGVmdCArIGVsZURpbXMud2lkdGgpO1xuICB9IGVsc2Uge1xuICAgIGJvdHRvbU92ZXIgPSBlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0ICsgZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgLSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQpO1xuICAgIHRvcE92ZXIgPSBlbGVEaW1zLm9mZnNldC50b3AgLSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcDtcbiAgICBsZWZ0T3ZlciA9IGVsZURpbXMub2Zmc2V0LmxlZnQgLSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQ7XG4gICAgcmlnaHRPdmVyID0gZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoKTtcbiAgfVxuXG4gIGJvdHRvbU92ZXIgPSBpZ25vcmVCb3R0b20gPyAwIDogTWF0aC5taW4oYm90dG9tT3ZlciwgMCk7XG4gIHRvcE92ZXIgPSBNYXRoLm1pbih0b3BPdmVyLCAwKTtcbiAgbGVmdE92ZXIgPSBNYXRoLm1pbihsZWZ0T3ZlciwgMCk7XG4gIHJpZ2h0T3ZlciA9IE1hdGgubWluKHJpZ2h0T3ZlciwgMCk7XG5cbiAgaWYgKGxyT25seSkge1xuICAgIHJldHVybiBsZWZ0T3ZlciArIHJpZ2h0T3ZlcjtcbiAgfVxuICBpZiAodGJPbmx5KSB7XG4gICAgcmV0dXJuIHRvcE92ZXIgKyBib3R0b21PdmVyO1xuICB9XG5cbiAgLy8gdXNlIHN1bSBvZiBzcXVhcmVzIGIvYyB3ZSBjYXJlIGFib3V0IG92ZXJsYXAgYXJlYS5cbiAgcmV0dXJuIE1hdGguc3FydCh0b3BPdmVyICogdG9wT3ZlciArIGJvdHRvbU92ZXIgKiBib3R0b21PdmVyICsgbGVmdE92ZXIgKiBsZWZ0T3ZlciArIHJpZ2h0T3ZlciAqIHJpZ2h0T3Zlcik7XG59XG5cbi8qKlxuICogVXNlcyBuYXRpdmUgbWV0aG9kcyB0byByZXR1cm4gYW4gb2JqZWN0IG9mIGRpbWVuc2lvbiB2YWx1ZXMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5IHx8IEhUTUx9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IG9yIERPTSBlbGVtZW50IGZvciB3aGljaCB0byBnZXQgdGhlIGRpbWVuc2lvbnMuIENhbiBiZSBhbnkgZWxlbWVudCBvdGhlciB0aGF0IGRvY3VtZW50IG9yIHdpbmRvdy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gbmVzdGVkIG9iamVjdCBvZiBpbnRlZ2VyIHBpeGVsIHZhbHVlc1xuICogVE9ETyAtIGlmIGVsZW1lbnQgaXMgd2luZG93LCByZXR1cm4gb25seSB0aG9zZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIEdldERpbWVuc2lvbnMoZWxlbSkge1xuICBlbGVtID0gZWxlbS5sZW5ndGggPyBlbGVtWzBdIDogZWxlbTtcblxuICBpZiAoZWxlbSA9PT0gd2luZG93IHx8IGVsZW0gPT09IGRvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSSdtIHNvcnJ5LCBEYXZlLiBJJ20gYWZyYWlkIEkgY2FuJ3QgZG8gdGhhdC5cIik7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBwYXJSZWN0ID0gZWxlbS5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgd2luUmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5ZID0gd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgd2luWCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgd2luWSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpblhcbiAgICB9LFxuICAgIHBhcmVudERpbXM6IHtcbiAgICAgIHdpZHRoOiBwYXJSZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiBwYXJSZWN0LmhlaWdodCxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB0b3A6IHBhclJlY3QudG9wICsgd2luWSxcbiAgICAgICAgbGVmdDogcGFyUmVjdC5sZWZ0ICsgd2luWFxuICAgICAgfVxuICAgIH0sXG4gICAgd2luZG93RGltczoge1xuICAgICAgd2lkdGg6IHdpblJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHdpblJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogd2luWSxcbiAgICAgICAgbGVmdDogd2luWFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB0b3AgYW5kIGxlZnQgaW50ZWdlciBwaXhlbCB2YWx1ZXMgZm9yIGR5bmFtaWNhbGx5IHJlbmRlcmVkIGVsZW1lbnRzLFxuICogc3VjaCBhczogVG9vbHRpcCwgUmV2ZWFsLCBhbmQgRHJvcGRvd24uIE1haW50YWluZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBhbmQgd2hlcmVcbiAqIHlvdSBkb24ndCBrbm93IGFsaWdubWVudCwgYnV0IGdlbmVyYWxseSBmcm9tXG4gKiA2LjQgZm9yd2FyZCB5b3Ugc2hvdWxkIHVzZSBHZXRFeHBsaWNpdE9mZnNldHMsIGFzIEdldE9mZnNldHMgY29uZmxhdGVzIHBvc2l0aW9uIGFuZCBhbGlnbm1lbnQuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBhbmNob3IgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCdzIGFuY2hvciBwb2ludC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGEgc3RyaW5nIHJlbGF0aW5nIHRvIHRoZSBkZXNpcmVkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCByZWxhdGl2ZSB0byBpdCdzIGFuY2hvclxuICogQHBhcmFtIHtOdW1iZXJ9IHZPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoT2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPdmVyZmxvdyAtIGlmIGEgY29sbGlzaW9uIGV2ZW50IGlzIGRldGVjdGVkLCBzZXRzIHRvIHRydWUgdG8gZGVmYXVsdCB0aGUgZWxlbWVudCB0byBmdWxsIHdpZHRoIC0gYW55IGRlc2lyZWQgb2Zmc2V0LlxuICogVE9ETyBhbHRlci9yZXdyaXRlIHRvIHdvcmsgd2l0aCBgZW1gIHZhbHVlcyBhcyB3ZWxsL2luc3RlYWQgb2YgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIEdldE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykge1xuICBjb25zb2xlLmxvZyhcIk5PVEU6IEdldE9mZnNldHMgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBHZXRFeHBsaWNpdE9mZnNldHMgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiA2LjVcIik7XG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJydGxcIl0pKCkgPyBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAndG9wJywgJ2xlZnQnLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KSA6IEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICd0b3AnLCAncmlnaHQnLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KTtcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJydGxcIl0pKCkgPyBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAnYm90dG9tJywgJ2xlZnQnLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KSA6IEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICdib3R0b20nLCAncmlnaHQnLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KTtcbiAgICBjYXNlICdjZW50ZXIgdG9wJzpcbiAgICAgIHJldHVybiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAndG9wJywgJ2NlbnRlcicsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpO1xuICAgIGNhc2UgJ2NlbnRlciBib3R0b20nOlxuICAgICAgcmV0dXJuIEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICdib3R0b20nLCAnY2VudGVyJywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdyk7XG4gICAgY2FzZSAnY2VudGVyIGxlZnQnOlxuICAgICAgcmV0dXJuIEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICdsZWZ0JywgJ2NlbnRlcicsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpO1xuICAgIGNhc2UgJ2NlbnRlciByaWdodCc6XG4gICAgICByZXR1cm4gR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ3JpZ2h0JywgJ2NlbnRlcicsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpO1xuICAgIGNhc2UgJ2xlZnQgYm90dG9tJzpcbiAgICAgIHJldHVybiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAnYm90dG9tJywgJ2xlZnQnLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KTtcbiAgICBjYXNlICdyaWdodCBib3R0b20nOlxuICAgICAgcmV0dXJuIEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICdib3R0b20nLCAncmlnaHQnLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KTtcbiAgICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4uLiB0aGlzIGFsb25nIHdpdGggdGhlIHJldmVhbCBhbmQgcmV2ZWFsIGZ1bGxcbiAgICAvLyBjbGFzc2VzIGFyZSB0aGUgb25seSBvbmVzIHRoYXQgZGlkbid0IHJlZmVyZW5jZSBhbmNob3JcbiAgICBjYXNlICdjZW50ZXInOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCArICRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLyAyIC0gJGVsZURpbXMud2lkdGggLyAyICsgaE9mZnNldCxcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgKyAkZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCAvIDIgLSAoJGVsZURpbXMuaGVpZ2h0IC8gMiArIHZPZmZzZXQpXG4gICAgICB9O1xuICAgIGNhc2UgJ3JldmVhbCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoJGVsZURpbXMud2luZG93RGltcy53aWR0aCAtICRlbGVEaW1zLndpZHRoKSAvIDIgKyBoT2Zmc2V0LFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArIHZPZmZzZXRcbiAgICAgIH07XG4gICAgY2FzZSAncmV2ZWFsIGZ1bGwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCxcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3BcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcInJ0bFwiXSkoKSA/ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gJGVsZURpbXMud2lkdGggKyAkYW5jaG9yRGltcy53aWR0aCAtIGhPZmZzZXQgOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH07XG5cbiAgfVxufVxuXG5mdW5jdGlvbiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgYWxpZ25tZW50LCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KSB7XG4gIHZhciAkZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICAkYW5jaG9yRGltcyA9IGFuY2hvciA/IEdldERpbWVuc2lvbnMoYW5jaG9yKSA6IG51bGw7XG5cbiAgdmFyIHRvcFZhbCwgbGVmdFZhbDtcblxuICAvLyBzZXQgcG9zaXRpb24gcmVsYXRlZCBhdHRyaWJ1dGVcblxuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHRvcFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgdG9wVmFsID0gJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIGxlZnRWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgbGVmdFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICAvLyBzZXQgYWxpZ25tZW50IHJlbGF0ZWQgYXR0cmlidXRlXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICBzd2l0Y2ggKGFsaWdubWVudCkge1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICBsZWZ0VmFsID0gJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyBoT2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgbGVmdFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gJGVsZURpbXMud2lkdGggKyAkYW5jaG9yRGltcy53aWR0aCAtIGhPZmZzZXQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgbGVmdFZhbCA9IGlzT3ZlcmZsb3cgPyBoT2Zmc2V0IDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCAvIDIgLSAkZWxlRGltcy53aWR0aCAvIDIgKyBoT2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgc3dpdGNoIChhbGlnbm1lbnQpIHtcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wIC0gdk9mZnNldCArICRhbmNob3JEaW1zLmhlaWdodCAtICRlbGVEaW1zLmhlaWdodDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgdk9mZnNldDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgdk9mZnNldCArICRhbmNob3JEaW1zLmhlaWdodCAvIDIgLSAkZWxlRGltcy5oZWlnaHQgLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHsgdG9wOiB0b3BWYWwsIGxlZnQ6IGxlZnRWYWwgfTtcbn1cblxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIiFmdW5jdGlvbih0KXtmdW5jdGlvbiBlKGkpe2lmKG9baV0pcmV0dXJuIG9baV0uZXhwb3J0czt2YXIgbj1vW2ldPXtpOmksbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtpXS5jYWxsKG4uZXhwb3J0cyxuLG4uZXhwb3J0cyxlKSxuLmw9ITAsbi5leHBvcnRzfXZhciBvPXt9O2UubT10LGUuYz1vLGUuaT1mdW5jdGlvbih0KXtyZXR1cm4gdH0sZS5kPWZ1bmN0aW9uKHQsbyxpKXtlLm8odCxvKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbyx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Oml9KX0sZS5uPWZ1bmN0aW9uKHQpe3ZhciBvPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBlLmQobyxcImFcIixvKSxvfSxlLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LGUucD1cIlwiLGUoZS5zPTEwMCl9KHsxOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtGb3VuZGF0aW9uOndpbmRvdy5Gb3VuZGF0aW9ufX0sMTAwOmZ1bmN0aW9uKHQsZSxvKXt0LmV4cG9ydHM9bygzNCl9LDM6ZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3J0bDp3aW5kb3cuRm91bmRhdGlvbi5ydGwsR2V0WW9EaWdpdHM6d2luZG93LkZvdW5kYXRpb24uR2V0WW9EaWdpdHMsdHJhbnNpdGlvbmVuZDp3aW5kb3cuRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kfX0sMzQ6ZnVuY3Rpb24odCxlLG8pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW8oMSksbj0oby5uKGkpLG8oNjQpKTtpLkZvdW5kYXRpb24uQm94PW4uYX0sNjQ6ZnVuY3Rpb24odCxlLG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCxlLG8saSxmKXtyZXR1cm4gMD09PW4odCxlLG8saSxmKX1mdW5jdGlvbiBuKHQsZSxvLGksbil7dmFyIHMscixoLGEsYz1mKHQpO2lmKGUpe3ZhciBsPWYoZSk7cj1sLmhlaWdodCtsLm9mZnNldC50b3AtKGMub2Zmc2V0LnRvcCtjLmhlaWdodCkscz1jLm9mZnNldC50b3AtbC5vZmZzZXQudG9wLGg9Yy5vZmZzZXQubGVmdC1sLm9mZnNldC5sZWZ0LGE9bC53aWR0aCtsLm9mZnNldC5sZWZ0LShjLm9mZnNldC5sZWZ0K2Mud2lkdGgpfWVsc2Ugcj1jLndpbmRvd0RpbXMuaGVpZ2h0K2Mud2luZG93RGltcy5vZmZzZXQudG9wLShjLm9mZnNldC50b3ArYy5oZWlnaHQpLHM9Yy5vZmZzZXQudG9wLWMud2luZG93RGltcy5vZmZzZXQudG9wLGg9Yy5vZmZzZXQubGVmdC1jLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQsYT1jLndpbmRvd0RpbXMud2lkdGgtKGMub2Zmc2V0LmxlZnQrYy53aWR0aCk7cmV0dXJuIHI9bj8wOk1hdGgubWluKHIsMCkscz1NYXRoLm1pbihzLDApLGg9TWF0aC5taW4oaCwwKSxhPU1hdGgubWluKGEsMCksbz9oK2E6aT9zK3I6TWF0aC5zcXJ0KHMqcytyKnIraCpoK2EqYSl9ZnVuY3Rpb24gZih0KXtpZigodD10Lmxlbmd0aD90WzBdOnQpPT09d2luZG93fHx0PT09ZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiSSdtIHNvcnJ5LCBEYXZlLiBJJ20gYWZyYWlkIEkgY2FuJ3QgZG8gdGhhdC5cIik7dmFyIGU9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxvPXQucGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxpPWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj13aW5kb3cucGFnZVlPZmZzZXQsZj13aW5kb3cucGFnZVhPZmZzZXQ7cmV0dXJue3dpZHRoOmUud2lkdGgsaGVpZ2h0OmUuaGVpZ2h0LG9mZnNldDp7dG9wOmUudG9wK24sbGVmdDplLmxlZnQrZn0scGFyZW50RGltczp7d2lkdGg6by53aWR0aCxoZWlnaHQ6by5oZWlnaHQsb2Zmc2V0Ont0b3A6by50b3ArbixsZWZ0Om8ubGVmdCtmfX0sd2luZG93RGltczp7d2lkdGg6aS53aWR0aCxoZWlnaHQ6aS5oZWlnaHQsb2Zmc2V0Ont0b3A6bixsZWZ0OmZ9fX19ZnVuY3Rpb24gcyh0LGUsaSxuLGYscyl7c3dpdGNoKGNvbnNvbGUubG9nKFwiTk9URTogR2V0T2Zmc2V0cyBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIEdldEV4cGxpY2l0T2Zmc2V0cyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIDYuNVwiKSxpKXtjYXNlXCJ0b3BcIjpyZXR1cm4gby5pKGgucnRsKSgpP3IodCxlLFwidG9wXCIsXCJsZWZ0XCIsbixmLHMpOnIodCxlLFwidG9wXCIsXCJyaWdodFwiLG4sZixzKTtjYXNlXCJib3R0b21cIjpyZXR1cm4gby5pKGgucnRsKSgpP3IodCxlLFwiYm90dG9tXCIsXCJsZWZ0XCIsbixmLHMpOnIodCxlLFwiYm90dG9tXCIsXCJyaWdodFwiLG4sZixzKTtjYXNlXCJjZW50ZXIgdG9wXCI6cmV0dXJuIHIodCxlLFwidG9wXCIsXCJjZW50ZXJcIixuLGYscyk7Y2FzZVwiY2VudGVyIGJvdHRvbVwiOnJldHVybiByKHQsZSxcImJvdHRvbVwiLFwiY2VudGVyXCIsbixmLHMpO2Nhc2VcImNlbnRlciBsZWZ0XCI6cmV0dXJuIHIodCxlLFwibGVmdFwiLFwiY2VudGVyXCIsbixmLHMpO2Nhc2VcImNlbnRlciByaWdodFwiOnJldHVybiByKHQsZSxcInJpZ2h0XCIsXCJjZW50ZXJcIixuLGYscyk7Y2FzZVwibGVmdCBib3R0b21cIjpyZXR1cm4gcih0LGUsXCJib3R0b21cIixcImxlZnRcIixuLGYscyk7Y2FzZVwicmlnaHQgYm90dG9tXCI6cmV0dXJuIHIodCxlLFwiYm90dG9tXCIsXCJyaWdodFwiLG4sZixzKTtjYXNlXCJjZW50ZXJcIjpyZXR1cm57bGVmdDokZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0KyRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgvMi0kZWxlRGltcy53aWR0aC8yK2YsdG9wOiRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCskZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodC8yLSgkZWxlRGltcy5oZWlnaHQvMituKX07Y2FzZVwicmV2ZWFsXCI6cmV0dXJue2xlZnQ6KCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgtJGVsZURpbXMud2lkdGgpLzIrZix0b3A6JGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wK259O2Nhc2VcInJldmVhbCBmdWxsXCI6cmV0dXJue2xlZnQ6JGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCx0b3A6JGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wfTtkZWZhdWx0OnJldHVybntsZWZ0Om8uaShoLnJ0bCkoKT8kYW5jaG9yRGltcy5vZmZzZXQubGVmdC0kZWxlRGltcy53aWR0aCskYW5jaG9yRGltcy53aWR0aC1mOiRhbmNob3JEaW1zLm9mZnNldC5sZWZ0K2YsdG9wOiRhbmNob3JEaW1zLm9mZnNldC50b3ArJGFuY2hvckRpbXMuaGVpZ2h0K259fX1mdW5jdGlvbiByKHQsZSxvLGksbixzLHIpe3ZhciBoLGEsYz1mKHQpLGw9ZT9mKGUpOm51bGw7c3dpdGNoKG8pe2Nhc2VcInRvcFwiOmg9bC5vZmZzZXQudG9wLShjLmhlaWdodCtuKTticmVhaztjYXNlXCJib3R0b21cIjpoPWwub2Zmc2V0LnRvcCtsLmhlaWdodCtuO2JyZWFrO2Nhc2VcImxlZnRcIjphPWwub2Zmc2V0LmxlZnQtKGMud2lkdGgrcyk7YnJlYWs7Y2FzZVwicmlnaHRcIjphPWwub2Zmc2V0LmxlZnQrbC53aWR0aCtzfXN3aXRjaChvKXtjYXNlXCJ0b3BcIjpjYXNlXCJib3R0b21cIjpzd2l0Y2goaSl7Y2FzZVwibGVmdFwiOmE9bC5vZmZzZXQubGVmdCtzO2JyZWFrO2Nhc2VcInJpZ2h0XCI6YT1sLm9mZnNldC5sZWZ0LWMud2lkdGgrbC53aWR0aC1zO2JyZWFrO2Nhc2VcImNlbnRlclwiOmE9cj9zOmwub2Zmc2V0LmxlZnQrbC53aWR0aC8yLWMud2lkdGgvMitzfWJyZWFrO2Nhc2VcInJpZ2h0XCI6Y2FzZVwibGVmdFwiOnN3aXRjaChpKXtjYXNlXCJib3R0b21cIjpoPWwub2Zmc2V0LnRvcC1uK2wuaGVpZ2h0LWMuaGVpZ2h0O2JyZWFrO2Nhc2VcInRvcFwiOmg9bC5vZmZzZXQudG9wK247YnJlYWs7Y2FzZVwiY2VudGVyXCI6aD1sLm9mZnNldC50b3ArbitsLmhlaWdodC8yLWMuaGVpZ2h0LzJ9fXJldHVybnt0b3A6aCxsZWZ0OmF9fW8uZChlLFwiYVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGF9KTt2YXIgaD1vKDMpLGE9KG8ubihoKSx7SW1Ob3RUb3VjaGluZ1lvdTppLE92ZXJsYXBBcmVhOm4sR2V0RGltZW5zaW9uczpmLEdldE9mZnNldHM6cyxHZXRFeHBsaWNpdE9mZnNldHM6cn0pfX0pOyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwMSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1KTtcblxuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX1tcIkZvdW5kYXRpb25cIl0ub25JbWFnZXNMb2FkZWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9pbWFnZUxvYWRlcl9fW1wiYVwiIC8qIG9uSW1hZ2VzTG9hZGVkICovXTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDY1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gb25JbWFnZXNMb2FkZWQ7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcblxuXG5cblxuLyoqXG4gKiBSdW5zIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBpbWFnZXMgYXJlIGZ1bGx5IGxvYWRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZXMgLSBJbWFnZShzKSB0byBjaGVjayBpZiBsb2FkZWQuXG4gKiBAcGFyYW0ge0Z1bmN9IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGltYWdlIGlzIGZ1bGx5IGxvYWRlZC5cbiAqL1xuZnVuY3Rpb24gb25JbWFnZXNMb2FkZWQoaW1hZ2VzLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICB1bmxvYWRlZCA9IGltYWdlcy5sZW5ndGg7XG5cbiAgaWYgKHVubG9hZGVkID09PSAwKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIGltYWdlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDaGVjayBpZiBpbWFnZSBpcyBsb2FkZWRcbiAgICBpZiAodGhpcy5jb21wbGV0ZSAmJiB0aGlzLm5hdHVyYWxXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgYWJvdmUgY2hlY2sgZmFpbGVkLCBzaW11bGF0ZSBsb2FkaW5nIG9uIGRldGFjaGVkIGVsZW1lbnQuXG4gICAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIC8vIFN0aWxsIGNvdW50IGltYWdlIGFzIGxvYWRlZCBpZiBpdCBmaW5hbGl6ZXMgd2l0aCBhbiBlcnJvci5cbiAgICAgIHZhciBldmVudHMgPSBcImxvYWQuemYuaW1hZ2VzIGVycm9yLnpmLmltYWdlc1wiO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShpbWFnZSkub25lKGV2ZW50cywgZnVuY3Rpb24gbWUoZXZlbnQpIHtcbiAgICAgICAgLy8gVW5iaW5kIHRoZSBldmVudCBsaXN0ZW5lcnMuIFdlJ3JlIHVzaW5nICdvbmUnIGJ1dCBvbmx5IG9uZSBvZiB0aGUgdHdvIGV2ZW50cyB3aWxsIGhhdmUgZmlyZWQuXG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykub2ZmKGV2ZW50cywgbWUpO1xuICAgICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgICAgfSk7XG4gICAgICBpbWFnZS5zcmMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmF0dHIoJ3NyYycpO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlSW1hZ2VMb2FkZWQoKSB7XG4gICAgdW5sb2FkZWQtLTtcbiAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIhZnVuY3Rpb24obil7ZnVuY3Rpb24gdChvKXtpZihlW29dKXJldHVybiBlW29dLmV4cG9ydHM7dmFyIHI9ZVtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIG5bb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsdCksci5sPSEwLHIuZXhwb3J0c312YXIgZT17fTt0Lm09bix0LmM9ZSx0Lmk9ZnVuY3Rpb24obil7cmV0dXJuIG59LHQuZD1mdW5jdGlvbihuLGUsbyl7dC5vKG4sZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLGUse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpvfSl9LHQubj1mdW5jdGlvbihuKXt2YXIgZT1uJiZuLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gbi5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBufTtyZXR1cm4gdC5kKGUsXCJhXCIsZSksZX0sdC5vPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHQpfSx0LnA9XCJcIix0KHQucz0xMDEpfSh7MDpmdW5jdGlvbihuLHQpe24uZXhwb3J0cz1qUXVlcnl9LDE6ZnVuY3Rpb24obix0KXtuLmV4cG9ydHM9e0ZvdW5kYXRpb246d2luZG93LkZvdW5kYXRpb259fSwxMDE6ZnVuY3Rpb24obix0LGUpe24uZXhwb3J0cz1lKDM1KX0sMzU6ZnVuY3Rpb24obix0LGUpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWUoMSkscj0oZS5uKG8pLGUoNjUpKTtvLkZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQ9ci5hfSw2NTpmdW5jdGlvbihuLHQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyhuLHQpe2Z1bmN0aW9uIGUoKXswPT09LS1vJiZ0KCl9dmFyIG89bi5sZW5ndGg7MD09PW8mJnQoKSxuLmVhY2goZnVuY3Rpb24oKXtpZih0aGlzLmNvbXBsZXRlJiZ2b2lkIDAhPT10aGlzLm5hdHVyYWxXaWR0aCllKCk7ZWxzZXt2YXIgbj1uZXcgSW1hZ2UsdD1cImxvYWQuemYuaW1hZ2VzIGVycm9yLnpmLmltYWdlc1wiO2koKShuKS5vbmUodCxmdW5jdGlvbiBuKG8pe2koKSh0aGlzKS5vZmYodCxuKSxlKCl9KSxuLnNyYz1pKCkodGhpcykuYXR0cihcInNyY1wiKX19KX1lLmQodCxcImFcIixmdW5jdGlvbigpe3JldHVybiBvfSk7dmFyIHI9ZSgwKSxpPWUubihyKX19KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMDIpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0ZvdW5kYXRpb246IHdpbmRvdy5Gb3VuZGF0aW9ufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDEwMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7cnRsOiB3aW5kb3cuRm91bmRhdGlvbi5ydGwsIEdldFlvRGlnaXRzOiB3aW5kb3cuRm91bmRhdGlvbi5HZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZDogd2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLktleWJvYXJkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcImFcIiAvKiBLZXlib2FyZCAqL107XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2Njpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEtleWJvYXJkOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBUaGlzIHV0aWwgd2FzIGNyZWF0ZWQgYnkgTWFyaXVzIE9sYmVydHogKlxuICogUGxlYXNlIHRoYW5rIE1hcml1cyBvbiBHaXRIdWIgL293bGJlcnR6ICpcbiAqIG9yIHRoZSB3ZWIgaHR0cDovL3d3dy5tYXJpdXNvbGJlcnR6LmRlLyAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG5cblxuXG5cbnZhciBrZXlDb2RlcyA9IHtcbiAgOTogJ1RBQicsXG4gIDEzOiAnRU5URVInLFxuICAyNzogJ0VTQ0FQRScsXG4gIDMyOiAnU1BBQ0UnLFxuICAzNTogJ0VORCcsXG4gIDM2OiAnSE9NRScsXG4gIDM3OiAnQVJST1dfTEVGVCcsXG4gIDM4OiAnQVJST1dfVVAnLFxuICAzOTogJ0FSUk9XX1JJR0hUJyxcbiAgNDA6ICdBUlJPV19ET1dOJ1xufTtcblxudmFyIGNvbW1hbmRzID0ge307XG5cbi8vIEZ1bmN0aW9ucyBwdWxsZWQgb3V0IHRvIGJlIHJlZmVyZW5jZWFibGUgZnJvbSBpbnRlcm5hbHNcbmZ1bmN0aW9uIGZpbmRGb2N1c2FibGUoJGVsZW1lbnQpIHtcbiAgaWYgKCEkZWxlbWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gJGVsZW1lbnQuZmluZCgnYVtocmVmXSwgYXJlYVtocmVmXSwgaW5wdXQ6bm90KFtkaXNhYmxlZF0pLCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLCB0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSksIGJ1dHRvbjpub3QoW2Rpc2FibGVkXSksIGlmcmFtZSwgb2JqZWN0LCBlbWJlZCwgKlt0YWJpbmRleF0sICpbY29udGVudGVkaXRhYmxlXScpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmlzKCc6dmlzaWJsZScpIHx8IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuYXR0cigndGFiaW5kZXgnKSA8IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vb25seSBoYXZlIHZpc2libGUgZWxlbWVudHMgYW5kIHRob3NlIHRoYXQgaGF2ZSBhIHRhYmluZGV4IGdyZWF0ZXIgb3IgZXF1YWwgMFxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VLZXkoZXZlbnQpIHtcbiAgdmFyIGtleSA9IGtleUNvZGVzW2V2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGVdIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoZXZlbnQud2hpY2gpLnRvVXBwZXJDYXNlKCk7XG5cbiAgLy8gUmVtb3ZlIHVuLXByaW50YWJsZSBjaGFyYWN0ZXJzLCBlLmcuIGZvciBgZnJvbUNoYXJDb2RlYCBjYWxscyBmb3IgQ1RSTCBvbmx5IGV2ZW50c1xuICBrZXkgPSBrZXkucmVwbGFjZSgvXFxXKy8sICcnKTtcblxuICBpZiAoZXZlbnQuc2hpZnRLZXkpIGtleSA9ICdTSElGVF8nICsga2V5O1xuICBpZiAoZXZlbnQuY3RybEtleSkga2V5ID0gJ0NUUkxfJyArIGtleTtcbiAgaWYgKGV2ZW50LmFsdEtleSkga2V5ID0gJ0FMVF8nICsga2V5O1xuXG4gIC8vIFJlbW92ZSB0cmFpbGluZyB1bmRlcnNjb3JlLCBpbiBjYXNlIG9ubHkgbW9kaWZpZXJzIHdlcmUgdXNlZCAoZS5nLiBvbmx5IGBDVFJMX0FMVGApXG4gIGtleSA9IGtleS5yZXBsYWNlKC9fJC8sICcnKTtcblxuICByZXR1cm4ga2V5O1xufVxuXG52YXIgS2V5Ym9hcmQgPSB7XG4gIGtleXM6IGdldEtleUNvZGVzKGtleUNvZGVzKSxcblxuICAvKipcbiAgICogUGFyc2VzIHRoZSAoa2V5Ym9hcmQpIGV2ZW50IGFuZCByZXR1cm5zIGEgU3RyaW5nIHRoYXQgcmVwcmVzZW50cyBpdHMga2V5XG4gICAqIENhbiBiZSB1c2VkIGxpa2UgRm91bmRhdGlvbi5wYXJzZUtleShldmVudCkgPT09IEZvdW5kYXRpb24ua2V5cy5TUEFDRVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIHRoZSBldmVudCBnZW5lcmF0ZWQgYnkgdGhlIGV2ZW50IGhhbmRsZXJcbiAgICogQHJldHVybiBTdHJpbmcga2V5IC0gU3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUga2V5IHByZXNzZWRcbiAgICovXG4gIHBhcnNlS2V5OiBwYXJzZUtleSxcblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgZ2l2ZW4gKGtleWJvYXJkKSBldmVudFxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIHRoZSBldmVudCBnZW5lcmF0ZWQgYnkgdGhlIGV2ZW50IGhhbmRsZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbXBvbmVudCAtIEZvdW5kYXRpb24gY29tcG9uZW50J3MgbmFtZSwgZS5nLiBTbGlkZXIgb3IgUmV2ZWFsXG4gICAqIEBwYXJhbSB7T2JqZWN0c30gZnVuY3Rpb25zIC0gY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgdGhhdCBhcmUgdG8gYmUgZXhlY3V0ZWRcbiAgICovXG4gIGhhbmRsZUtleTogZnVuY3Rpb24gKGV2ZW50LCBjb21wb25lbnQsIGZ1bmN0aW9ucykge1xuICAgIHZhciBjb21tYW5kTGlzdCA9IGNvbW1hbmRzW2NvbXBvbmVudF0sXG4gICAgICAgIGtleUNvZGUgPSB0aGlzLnBhcnNlS2V5KGV2ZW50KSxcbiAgICAgICAgY21kcyxcbiAgICAgICAgY29tbWFuZCxcbiAgICAgICAgZm47XG5cbiAgICBpZiAoIWNvbW1hbmRMaXN0KSByZXR1cm4gY29uc29sZS53YXJuKCdDb21wb25lbnQgbm90IGRlZmluZWQhJyk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRMaXN0Lmx0ciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIHRoaXMgY29tcG9uZW50IGRvZXMgbm90IGRpZmZlcmVudGlhdGUgYmV0d2VlbiBsdHIgYW5kIHJ0bFxuICAgICAgY21kcyA9IGNvbW1hbmRMaXN0OyAvLyB1c2UgcGxhaW4gbGlzdFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBtZXJnZSBsdHIgYW5kIHJ0bDogaWYgZG9jdW1lbnQgaXMgcnRsLCBydGwgb3ZlcndyaXRlcyBsdHIgYW5kIHZpY2UgdmVyc2FcbiAgICAgIGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wicnRsXCJdKSgpKSBjbWRzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIGNvbW1hbmRMaXN0Lmx0ciwgY29tbWFuZExpc3QucnRsKTtlbHNlIGNtZHMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgY29tbWFuZExpc3QucnRsLCBjb21tYW5kTGlzdC5sdHIpO1xuICAgIH1cbiAgICBjb21tYW5kID0gY21kc1trZXlDb2RlXTtcblxuICAgIGZuID0gZnVuY3Rpb25zW2NvbW1hbmRdO1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGV4ZWN1dGUgZnVuY3Rpb24gIGlmIGV4aXN0c1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gZm4uYXBwbHkoKTtcbiAgICAgIGlmIChmdW5jdGlvbnMuaGFuZGxlZCB8fCB0eXBlb2YgZnVuY3Rpb25zLmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBoYW5kbGVkXG4gICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICBmdW5jdGlvbnMudW5oYW5kbGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuXG4gIGZpbmRGb2N1c2FibGU6IGZpbmRGb2N1c2FibGUsXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCBuYW1lIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudCAtIEZvdW5kYXRpb24gY29tcG9uZW50LCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHJldHVybiBTdHJpbmcgY29tcG9uZW50TmFtZVxuICAgKi9cblxuICByZWdpc3RlcjogZnVuY3Rpb24gKGNvbXBvbmVudE5hbWUsIGNtZHMpIHtcbiAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gIH0sXG5cblxuICAvLyBUT0RPOTQzODogVGhlc2UgcmVmZXJlbmNlcyB0byBLZXlib2FyZCBuZWVkIHRvIG5vdCByZXF1aXJlIGdsb2JhbC4gV2lsbCAndGhpcycgd29yayBpbiB0aGlzIGNvbnRleHQ/XG4gIC8vXG4gIC8qKlxuICAgKiBUcmFwcyB0aGUgZm9jdXMgaW4gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqIEBwYXJhbSAge2pRdWVyeX0gJGVsZW1lbnQgIGpRdWVyeSBvYmplY3QgdG8gdHJhcCB0aGUgZm91Y3MgaW50by5cbiAgICovXG4gIHRyYXBGb2N1czogZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgdmFyICRmb2N1c2FibGUgPSBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSxcbiAgICAgICAgJGZpcnN0Rm9jdXNhYmxlID0gJGZvY3VzYWJsZS5lcSgwKSxcbiAgICAgICAgJGxhc3RGb2N1c2FibGUgPSAkZm9jdXNhYmxlLmVxKC0xKTtcblxuICAgICRlbGVtZW50Lm9uKCdrZXlkb3duLnpmLnRyYXBmb2N1cycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gJGxhc3RGb2N1c2FibGVbMF0gJiYgcGFyc2VLZXkoZXZlbnQpID09PSAnVEFCJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkZmlyc3RGb2N1c2FibGUuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0ID09PSAkZmlyc3RGb2N1c2FibGVbMF0gJiYgcGFyc2VLZXkoZXZlbnQpID09PSAnU0hJRlRfVEFCJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkbGFzdEZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyB0aGUgdHJhcHBlZCBmb2N1cyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0gIHtqUXVlcnl9ICRlbGVtZW50ICBqUXVlcnkgb2JqZWN0IHRvIHJlbGVhc2UgdGhlIGZvY3VzIGZvci5cbiAgICovXG4gIHJlbGVhc2VGb2N1czogZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQub2ZmKCdrZXlkb3duLnpmLnRyYXBmb2N1cycpO1xuICB9XG59O1xuXG4vKlxuICogQ29uc3RhbnRzIGZvciBlYXNpZXIgY29tcGFyaW5nLlxuICogQ2FuIGJlIHVzZWQgbGlrZSBGb3VuZGF0aW9uLnBhcnNlS2V5KGV2ZW50KSA9PT0gRm91bmRhdGlvbi5rZXlzLlNQQUNFXG4gKi9cbmZ1bmN0aW9uIGdldEtleUNvZGVzKGtjcykge1xuICB2YXIgayA9IHt9O1xuICBmb3IgKHZhciBrYyBpbiBrY3MpIHtcbiAgICBrW2tjc1trY11dID0ga2NzW2tjXTtcbiAgfXJldHVybiBrO1xufVxuXG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiIWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIHQobyl7aWYoZVtvXSlyZXR1cm4gZVtvXS5leHBvcnRzO3ZhciByPWVbb109e2k6byxsOiExLGV4cG9ydHM6e319O3JldHVybiBuW29dLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLHQpLHIubD0hMCxyLmV4cG9ydHN9dmFyIGU9e307dC5tPW4sdC5jPWUsdC5pPWZ1bmN0aW9uKG4pe3JldHVybiBufSx0LmQ9ZnVuY3Rpb24obixlLG8pe3QubyhuLGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkobixlLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6b30pfSx0Lm49ZnVuY3Rpb24obil7dmFyIGU9biYmbi5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIG4uZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gbn07cmV0dXJuIHQuZChlLFwiYVwiLGUpLGV9LHQubz1mdW5jdGlvbihuLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobix0KX0sdC5wPVwiXCIsdCh0LnM9MTAyKX0oezA6ZnVuY3Rpb24obix0KXtuLmV4cG9ydHM9alF1ZXJ5fSwxOmZ1bmN0aW9uKG4sdCl7bi5leHBvcnRzPXtGb3VuZGF0aW9uOndpbmRvdy5Gb3VuZGF0aW9ufX0sMTAyOmZ1bmN0aW9uKG4sdCxlKXtuLmV4cG9ydHM9ZSgzNil9LDM6ZnVuY3Rpb24obix0KXtuLmV4cG9ydHM9e3J0bDp3aW5kb3cuRm91bmRhdGlvbi5ydGwsR2V0WW9EaWdpdHM6d2luZG93LkZvdW5kYXRpb24uR2V0WW9EaWdpdHMsdHJhbnNpdGlvbmVuZDp3aW5kb3cuRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kfX0sMzY6ZnVuY3Rpb24obix0LGUpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWUoMSkscj0oZS5uKG8pLGUoNjYpKTtvLkZvdW5kYXRpb24uS2V5Ym9hcmQ9ci5hfSw2NjpmdW5jdGlvbihuLHQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyhuKXtyZXR1cm4hIW4mJm4uZmluZChcImFbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV1cIikuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuISghYSgpKHRoaXMpLmlzKFwiOnZpc2libGVcIil8fGEoKSh0aGlzKS5hdHRyKFwidGFiaW5kZXhcIik8MCl9KX1mdW5jdGlvbiByKG4pe3ZhciB0PWRbbi53aGljaHx8bi5rZXlDb2RlXXx8U3RyaW5nLmZyb21DaGFyQ29kZShuLndoaWNoKS50b1VwcGVyQ2FzZSgpO3JldHVybiB0PXQucmVwbGFjZSgvXFxXKy8sXCJcIiksbi5zaGlmdEtleSYmKHQ9XCJTSElGVF9cIit0KSxuLmN0cmxLZXkmJih0PVwiQ1RSTF9cIit0KSxuLmFsdEtleSYmKHQ9XCJBTFRfXCIrdCksdD10LnJlcGxhY2UoL18kLyxcIlwiKX1lLmQodCxcImFcIixmdW5jdGlvbigpe3JldHVybiBjfSk7dmFyIGk9ZSgwKSxhPWUubihpKSx1PWUoMyksZD0oZS5uKHUpLHs5OlwiVEFCXCIsMTM6XCJFTlRFUlwiLDI3OlwiRVNDQVBFXCIsMzI6XCJTUEFDRVwiLDM1OlwiRU5EXCIsMzY6XCJIT01FXCIsMzc6XCJBUlJPV19MRUZUXCIsMzg6XCJBUlJPV19VUFwiLDM5OlwiQVJST1dfUklHSFRcIiw0MDpcIkFSUk9XX0RPV05cIn0pLGY9e30sYz17a2V5czpmdW5jdGlvbihuKXt2YXIgdD17fTtmb3IodmFyIGUgaW4gbil0W25bZV1dPW5bZV07cmV0dXJuIHR9KGQpLHBhcnNlS2V5OnIsaGFuZGxlS2V5OmZ1bmN0aW9uKG4sdCxvKXt2YXIgcixpLGQsYz1mW3RdLHM9dGhpcy5wYXJzZUtleShuKTtpZighYylyZXR1cm4gY29uc29sZS53YXJuKFwiQ29tcG9uZW50IG5vdCBkZWZpbmVkIVwiKTtpZihyPXZvaWQgMD09PWMubHRyP2M6ZS5pKHUucnRsKSgpP2EuYS5leHRlbmQoe30sYy5sdHIsYy5ydGwpOmEuYS5leHRlbmQoe30sYy5ydGwsYy5sdHIpLGk9cltzXSwoZD1vW2ldKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZCl7dmFyIGw9ZC5hcHBseSgpOyhvLmhhbmRsZWR8fFwiZnVuY3Rpb25cIj09dHlwZW9mIG8uaGFuZGxlZCkmJm8uaGFuZGxlZChsKX1lbHNlKG8udW5oYW5kbGVkfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLnVuaGFuZGxlZCkmJm8udW5oYW5kbGVkKCl9LGZpbmRGb2N1c2FibGU6byxyZWdpc3RlcjpmdW5jdGlvbihuLHQpe2Zbbl09dH0sdHJhcEZvY3VzOmZ1bmN0aW9uKG4pe3ZhciB0PW8obiksZT10LmVxKDApLGk9dC5lcSgtMSk7bi5vbihcImtleWRvd24uemYudHJhcGZvY3VzXCIsZnVuY3Rpb24obil7bi50YXJnZXQ9PT1pWzBdJiZcIlRBQlwiPT09cihuKT8obi5wcmV2ZW50RGVmYXVsdCgpLGUuZm9jdXMoKSk6bi50YXJnZXQ9PT1lWzBdJiZcIlNISUZUX1RBQlwiPT09cihuKSYmKG4ucHJldmVudERlZmF1bHQoKSxpLmZvY3VzKCkpfSl9LHJlbGVhc2VGb2N1czpmdW5jdGlvbihuKXtuLm9mZihcImtleWRvd24uemYudHJhcGZvY3VzXCIpfX19fSk7IiwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTAzKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtGb3VuZGF0aW9uOiB3aW5kb3cuRm91bmRhdGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nyk7XG5cblxuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fW1wiRm91bmRhdGlvblwiXS5NZWRpYVF1ZXJ5ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiYVwiIC8qIE1lZGlhUXVlcnkgKi9dO1xuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX1tcIkZvdW5kYXRpb25cIl0uTWVkaWFRdWVyeS5faW5pdCgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNZWRpYVF1ZXJ5OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG5cblxuXG5cbi8vIERlZmF1bHQgc2V0IG9mIG1lZGlhIHF1ZXJpZXNcbnZhciBkZWZhdWx0UXVlcmllcyA9IHtcbiAgJ2RlZmF1bHQnOiAnb25seSBzY3JlZW4nLFxuICBsYW5kc2NhcGU6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgcG9ydHJhaXQ6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICByZXRpbmE6ICdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksJyArICdvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksJyArICdvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksJyArICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgKyAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwnICsgJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbi8vIG1hdGNoTWVkaWEoKSBwb2x5ZmlsbCAtIFRlc3QgYSBDU1MgbWVkaWEgdHlwZS9xdWVyeSBpbiBKUy5cbi8vIEF1dGhvcnMgJiBjb3B5cmlnaHQgKGMpIDIwMTI6IFNjb3R0IEplaGwsIFBhdWwgSXJpc2gsIE5pY2hvbGFzIFpha2FzLCBEYXZpZCBLbmlnaHQuIER1YWwgTUlUL0JTRCBsaWNlbnNlXG52YXIgbWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhIHx8IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgbWF0Y2hNZWRpdW0gYXBpIHN1Y2ggYXMgSUUgOSBhbmQgd2Via2l0XG5cbiAgdmFyIHN0eWxlTWVkaWEgPSB3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWE7XG5cbiAgLy8gRm9yIHRob3NlIHRoYXQgZG9uJ3Qgc3VwcG9ydCBtYXRjaE1lZGl1bVxuICBpZiAoIXN0eWxlTWVkaWEpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgICAgICBzY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF0sXG4gICAgICAgIGluZm8gPSBudWxsO1xuXG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUuaWQgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgc2NyaXB0ICYmIHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcblxuICAgIC8vICdzdHlsZS5jdXJyZW50U3R5bGUnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlJyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgaW5mbyA9ICdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc3R5bGUsIG51bGwpIHx8IHN0eWxlLmN1cnJlbnRTdHlsZTtcblxuICAgIHN0eWxlTWVkaWEgPSB7XG4gICAgICBtYXRjaE1lZGl1bTogZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gJ0BtZWRpYSAnICsgbWVkaWEgKyAneyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH0nO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChtZWRpYSkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzOiBzdHlsZU1lZGlhLm1hdGNoTWVkaXVtKG1lZGlhIHx8ICdhbGwnKSxcbiAgICAgIG1lZGlhOiBtZWRpYSB8fCAnYWxsJ1xuICAgIH07XG4gIH07XG59KCk7XG5cbnZhciBNZWRpYVF1ZXJ5ID0ge1xuICBxdWVyaWVzOiBbXSxcblxuICBjdXJyZW50OiAnJyxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG1lZGlhIHF1ZXJ5IGhlbHBlciwgYnkgZXh0cmFjdGluZyB0aGUgYnJlYWtwb2ludCBsaXN0IGZyb20gdGhlIENTUyBhbmQgYWN0aXZhdGluZyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciAkbWV0YSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ21ldGEuZm91bmRhdGlvbi1tcScpO1xuICAgIGlmICghJG1ldGEubGVuZ3RoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCc8bWV0YSBjbGFzcz1cImZvdW5kYXRpb24tbXFcIj4nKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKTtcbiAgICB9XG5cbiAgICB2YXIgZXh0cmFjdGVkU3R5bGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnLmZvdW5kYXRpb24tbXEnKS5jc3MoJ2ZvbnQtZmFtaWx5Jyk7XG4gICAgdmFyIG5hbWVkUXVlcmllcztcblxuICAgIG5hbWVkUXVlcmllcyA9IHBhcnNlU3R5bGVUb09iamVjdChleHRyYWN0ZWRTdHlsZXMpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG5hbWVkUXVlcmllcykge1xuICAgICAgaWYgKG5hbWVkUXVlcmllcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHNlbGYucXVlcmllcy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgdmFsdWU6ICdvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJyArIG5hbWVkUXVlcmllc1trZXldICsgJyknXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMuX2dldEN1cnJlbnRTaXplKCk7XG5cbiAgICB0aGlzLl93YXRjaGVyKCk7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gaXMgYXQgbGVhc3QgYXMgd2lkZSBhcyBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyZWFrcG9pbnQgbWF0Y2hlcywgYGZhbHNlYCBpZiBpdCdzIHNtYWxsZXIuXG4gICAqL1xuICBhdExlYXN0OiBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHZhciBxdWVyeSA9IHRoaXMuZ2V0KHNpemUpO1xuXG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gbWF0Y2hNZWRpYShxdWVyeSkubWF0Y2hlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gbWF0Y2hlcyB0byBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2ssIGVpdGhlciAnc21hbGwgb25seScgb3IgJ3NtYWxsJy4gT21pdHRpbmcgJ29ubHknIGZhbGxzIGJhY2sgdG8gdXNpbmcgYXRMZWFzdCgpIG1ldGhvZC5cbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgYnJlYWtwb2ludCBtYXRjaGVzLCBgZmFsc2VgIGlmIGl0IGRvZXMgbm90LlxuICAgKi9cbiAgaXM6IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgc2l6ZSA9IHNpemUudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgaWYgKHNpemUubGVuZ3RoID4gMSAmJiBzaXplWzFdID09PSAnb25seScpIHtcbiAgICAgIGlmIChzaXplWzBdID09PSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpKSByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYXRMZWFzdChzaXplWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1lZGlhIHF1ZXJ5IG9mIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gLSBUaGUgbWVkaWEgcXVlcnkgb2YgdGhlIGJyZWFrcG9pbnQsIG9yIGBudWxsYCBpZiB0aGUgYnJlYWtwb2ludCBkb2Vzbid0IGV4aXN0LlxuICAgKi9cbiAgZ2V0OiBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICBpZiAodGhpcy5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcbiAgICAgICAgaWYgKHNpemUgPT09IHF1ZXJ5Lm5hbWUpIHJldHVybiBxdWVyeS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgbmFtZSBieSB0ZXN0aW5nIGV2ZXJ5IGJyZWFrcG9pbnQgYW5kIHJldHVybmluZyB0aGUgbGFzdCBvbmUgdG8gbWF0Y2ggKHRoZSBiaWdnZXN0IG9uZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBOYW1lIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBfZ2V0Q3VycmVudFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWF0Y2hlZDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWVyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJpZXNbaV07XG5cbiAgICAgIGlmIChtYXRjaE1lZGlhKHF1ZXJ5LnZhbHVlKS5tYXRjaGVzKSB7XG4gICAgICAgIG1hdGNoZWQgPSBxdWVyeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1hdGNoZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZC5uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9XG4gIH0sXG5cblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSBicmVha3BvaW50IHdhdGNoZXIsIHdoaWNoIGZpcmVzIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgd2hlbmV2ZXIgdGhlIGJyZWFrcG9pbnQgY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd2F0Y2hlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdyZXNpemUuemYubWVkaWFxdWVyeScpLm9uKCdyZXNpemUuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuZXdTaXplID0gX3RoaXMuX2dldEN1cnJlbnRTaXplKCksXG4gICAgICAgICAgY3VycmVudFNpemUgPSBfdGhpcy5jdXJyZW50O1xuXG4gICAgICBpZiAobmV3U2l6ZSAhPT0gY3VycmVudFNpemUpIHtcbiAgICAgICAgLy8gQ2hhbmdlIHRoZSBjdXJyZW50IG1lZGlhIHF1ZXJ5XG4gICAgICAgIF90aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgIC8vIEJyb2FkY2FzdCB0aGUgbWVkaWEgcXVlcnkgY2hhbmdlIG9uIHRoZSB3aW5kb3dcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLnRyaWdnZXIoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIFtuZXdTaXplLCBjdXJyZW50U2l6ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbiAocmV0LCBwYXJhbSkge1xuICAgIHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG4gICAgdmFyIGtleSA9IHBhcnRzWzBdO1xuICAgIHZhciB2YWwgPSBwYXJ0c1sxXTtcbiAgICBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5KTtcblxuICAgIC8vIG1pc3NpbmcgYD1gIHNob3VsZCBiZSBgbnVsbGA6XG4gICAgLy8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuICAgIHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuXG4gICAgaWYgKCFyZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0W2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJldFtrZXldKSkge1xuICAgICAgcmV0W2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRba2V5XSA9IFtyZXRba2V5XSwgdmFsXTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSwge30pO1xuXG4gIHJldHVybiBzdHlsZU9iamVjdDtcbn1cblxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIiFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgaT1uW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyx0KSxpLmw9ITAsaS5leHBvcnRzfXZhciBuPXt9O3QubT1lLHQuYz1uLHQuaT1mdW5jdGlvbihlKXtyZXR1cm4gZX0sdC5kPWZ1bmN0aW9uKGUsbixyKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobixcImFcIixuKSxufSx0Lm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHQucD1cIlwiLHQodC5zPTEwMyl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWpRdWVyeX0sMTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz17Rm91bmRhdGlvbjp3aW5kb3cuRm91bmRhdGlvbn19LDEwMzpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oMzcpfSwzNzpmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHI9bigxKSxpPShuLm4ociksbig2NykpO3IuRm91bmRhdGlvbi5NZWRpYVF1ZXJ5PWkuYSxyLkZvdW5kYXRpb24uTWVkaWFRdWVyeS5faW5pdCgpfSw2NzpmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD17fTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZT90OihlPWUudHJpbSgpLnNsaWNlKDEsLTEpKT90PWUuc3BsaXQoXCImXCIpLnJlZHVjZShmdW5jdGlvbihlLHQpe3ZhciBuPXQucmVwbGFjZSgvXFwrL2csXCIgXCIpLnNwbGl0KFwiPVwiKSxyPW5bMF0saT1uWzFdO3JldHVybiByPWRlY29kZVVSSUNvbXBvbmVudChyKSxpPXZvaWQgMD09PWk/bnVsbDpkZWNvZGVVUklDb21wb25lbnQoaSksZS5oYXNPd25Qcm9wZXJ0eShyKT9BcnJheS5pc0FycmF5KGVbcl0pP2Vbcl0ucHVzaChpKTplW3JdPVtlW3JdLGldOmVbcl09aSxlfSx7fSk6dH1uLmQodCxcImFcIixmdW5jdGlvbigpe3JldHVybiBhfSk7dmFyIGk9bigwKSx1PW4ubihpKSxvPXdpbmRvdy5tYXRjaE1lZGlhfHxmdW5jdGlvbigpe3ZhciBlPXdpbmRvdy5zdHlsZU1lZGlhfHx3aW5kb3cubWVkaWE7aWYoIWUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxuPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdLHI9bnVsbDt0LnR5cGU9XCJ0ZXh0L2Nzc1wiLHQuaWQ9XCJtYXRjaG1lZGlhanMtdGVzdFwiLG4mJm4ucGFyZW50Tm9kZSYmbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LG4pLHI9XCJnZXRDb21wdXRlZFN0eWxlXCJpbiB3aW5kb3cmJndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQsbnVsbCl8fHQuY3VycmVudFN0eWxlLGU9e21hdGNoTWVkaXVtOmZ1bmN0aW9uKGUpe3ZhciBuPVwiQG1lZGlhIFwiK2UrXCJ7ICNtYXRjaG1lZGlhanMtdGVzdCB7IHdpZHRoOiAxcHg7IH0gfVwiO3JldHVybiB0LnN0eWxlU2hlZXQ/dC5zdHlsZVNoZWV0LmNzc1RleHQ9bjp0LnRleHRDb250ZW50PW4sXCIxcHhcIj09PXIud2lkdGh9fX1yZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJue21hdGNoZXM6ZS5tYXRjaE1lZGl1bSh0fHxcImFsbFwiKSxtZWRpYTp0fHxcImFsbFwifX19KCksYT17cXVlcmllczpbXSxjdXJyZW50OlwiXCIsX2luaXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3UoKShcIm1ldGEuZm91bmRhdGlvbi1tcVwiKS5sZW5ndGh8fHUoKSgnPG1ldGEgY2xhc3M9XCJmb3VuZGF0aW9uLW1xXCI+JykuYXBwZW5kVG8oZG9jdW1lbnQuaGVhZCk7dmFyIHQsbj11KCkoXCIuZm91bmRhdGlvbi1tcVwiKS5jc3MoXCJmb250LWZhbWlseVwiKTt0PXIobik7Zm9yKHZhciBpIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShpKSYmZS5xdWVyaWVzLnB1c2goe25hbWU6aSx2YWx1ZTpcIm9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiBcIit0W2ldK1wiKVwifSk7dGhpcy5jdXJyZW50PXRoaXMuX2dldEN1cnJlbnRTaXplKCksdGhpcy5fd2F0Y2hlcigpfSxhdExlYXN0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0KGUpO3JldHVybiEhdCYmbyh0KS5tYXRjaGVzfSxpczpmdW5jdGlvbihlKXtyZXR1cm4gZT1lLnRyaW0oKS5zcGxpdChcIiBcIiksZS5sZW5ndGg+MSYmXCJvbmx5XCI9PT1lWzFdP2VbMF09PT10aGlzLl9nZXRDdXJyZW50U2l6ZSgpOnRoaXMuYXRMZWFzdChlWzBdKX0sZ2V0OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiB0aGlzLnF1ZXJpZXMpaWYodGhpcy5xdWVyaWVzLmhhc093blByb3BlcnR5KHQpKXt2YXIgbj10aGlzLnF1ZXJpZXNbdF07aWYoZT09PW4ubmFtZSlyZXR1cm4gbi52YWx1ZX1yZXR1cm4gbnVsbH0sX2dldEN1cnJlbnRTaXplOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9MDt0PHRoaXMucXVlcmllcy5sZW5ndGg7dCsrKXt2YXIgbj10aGlzLnF1ZXJpZXNbdF07byhuLnZhbHVlKS5tYXRjaGVzJiYoZT1uKX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZT9lLm5hbWU6ZX0sX3dhdGNoZXI6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3UoKSh3aW5kb3cpLm9mZihcInJlc2l6ZS56Zi5tZWRpYXF1ZXJ5XCIpLm9uKFwicmVzaXplLnpmLm1lZGlhcXVlcnlcIixmdW5jdGlvbigpe3ZhciB0PWUuX2dldEN1cnJlbnRTaXplKCksbj1lLmN1cnJlbnQ7dCE9PW4mJihlLmN1cnJlbnQ9dCx1KCkod2luZG93KS50cmlnZ2VyKFwiY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5XCIsW3Qsbl0pKX0pfX19fSk7IiwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTA0KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtGb3VuZGF0aW9uOiB3aW5kb3cuRm91bmRhdGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMDQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge3J0bDogd2luZG93LkZvdW5kYXRpb24ucnRsLCBHZXRZb0RpZ2l0czogd2luZG93LkZvdW5kYXRpb24uR2V0WW9EaWdpdHMsIHRyYW5zaXRpb25lbmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLnRyYW5zaXRpb25lbmR9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpO1xuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX1tcIkZvdW5kYXRpb25cIl0uTW90aW9uID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJhXCIgLyogTW90aW9uICovXTtcbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLk1vdmUgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcImJcIiAvKiBNb3ZlICovXTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDY4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJiXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTW92ZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1vdGlvbjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcblxuXG5cblxuXG4vKipcbiAqIE1vdGlvbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubW90aW9uXG4gKi9cblxudmFyIGluaXRDbGFzc2VzID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG52YXIgYWN0aXZlQ2xhc3NlcyA9IFsnbXVpLWVudGVyLWFjdGl2ZScsICdtdWktbGVhdmUtYWN0aXZlJ107XG5cbnZhciBNb3Rpb24gPSB7XG4gIGFuaW1hdGVJbjogZnVuY3Rpb24gKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uIChlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgYW5pbWF0ZShmYWxzZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIE1vdmUoZHVyYXRpb24sIGVsZW0sIGZuKSB7XG4gIHZhciBhbmltLFxuICAgICAgcHJvZyxcbiAgICAgIHN0YXJ0ID0gbnVsbDtcbiAgLy8gY29uc29sZS5sb2coJ2NhbGxlZCcpO1xuXG4gIGlmIChkdXJhdGlvbiA9PT0gMCkge1xuICAgIGZuLmFwcGx5KGVsZW0pO1xuICAgIGVsZW0udHJpZ2dlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSkudHJpZ2dlckhhbmRsZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdmUodHMpIHtcbiAgICBpZiAoIXN0YXJ0KSBzdGFydCA9IHRzO1xuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCB0cyk7XG4gICAgcHJvZyA9IHRzIC0gc3RhcnQ7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG5cbiAgICBpZiAocHJvZyA8IGR1cmF0aW9uKSB7XG4gICAgICBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlLCBlbGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW0pO1xuICAgICAgZWxlbS50cmlnZ2VyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKS50cmlnZ2VySGFuZGxlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSk7XG4gICAgfVxuICB9XG4gIGFuaW0gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1vdmUpO1xufVxuXG4vKipcbiAqIEFuaW1hdGVzIGFuIGVsZW1lbnQgaW4gb3Igb3V0IHVzaW5nIGEgQ1NTIHRyYW5zaXRpb24gY2xhc3MuXG4gKiBAZnVuY3Rpb25cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW4gLSBEZWZpbmVzIGlmIHRoZSBhbmltYXRpb24gaXMgaW4gb3Igb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb3IgSFRNTCBvYmplY3QgdG8gYW5pbWF0ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBhbmltYXRpb24gLSBDU1MgY2xhc3MgdG8gdXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBDYWxsYmFjayB0byBydW4gd2hlbiBhbmltYXRpb24gaXMgZmluaXNoZWQuXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGUoaXNJbiwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICBlbGVtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlbGVtZW50KS5lcSgwKTtcblxuICBpZiAoIWVsZW1lbnQubGVuZ3RoKSByZXR1cm47XG5cbiAgdmFyIGluaXRDbGFzcyA9IGlzSW4gPyBpbml0Q2xhc3Nlc1swXSA6IGluaXRDbGFzc2VzWzFdO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0luID8gYWN0aXZlQ2xhc3Nlc1swXSA6IGFjdGl2ZUNsYXNzZXNbMV07XG5cbiAgLy8gU2V0IHVwIHRoZSBhbmltYXRpb25cbiAgcmVzZXQoKTtcblxuICBlbGVtZW50LmFkZENsYXNzKGFuaW1hdGlvbikuY3NzKCd0cmFuc2l0aW9uJywgJ25vbmUnKTtcblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIGVsZW1lbnQuYWRkQ2xhc3MoaW5pdENsYXNzKTtcbiAgICBpZiAoaXNJbikgZWxlbWVudC5zaG93KCk7XG4gIH0pO1xuXG4gIC8vIFN0YXJ0IHRoZSBhbmltYXRpb25cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICBlbGVtZW50WzBdLm9mZnNldFdpZHRoO1xuICAgIGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uJywgJycpLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJ0cmFuc2l0aW9uZW5kXCJdKShlbGVtZW50KSwgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhpbml0Q2xhc3MgKyAnICcgKyBhY3RpdmVDbGFzcyArICcgJyArIGFuaW1hdGlvbik7XG4gIH1cbn1cblxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIiFmdW5jdGlvbihuKXtmdW5jdGlvbiB0KGUpe2lmKGlbZV0pcmV0dXJuIGlbZV0uZXhwb3J0czt2YXIgbz1pW2VdPXtpOmUsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gbltlXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyx0KSxvLmw9ITAsby5leHBvcnRzfXZhciBpPXt9O3QubT1uLHQuYz1pLHQuaT1mdW5jdGlvbihuKXtyZXR1cm4gbn0sdC5kPWZ1bmN0aW9uKG4saSxlKXt0Lm8obixpKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KG4saSx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OmV9KX0sdC5uPWZ1bmN0aW9uKG4pe3ZhciBpPW4mJm4uX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBuLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIG59O3JldHVybiB0LmQoaSxcImFcIixpKSxpfSx0Lm89ZnVuY3Rpb24obix0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sdCl9LHQucD1cIlwiLHQodC5zPTEwNCl9KHswOmZ1bmN0aW9uKG4sdCl7bi5leHBvcnRzPWpRdWVyeX0sMTpmdW5jdGlvbihuLHQpe24uZXhwb3J0cz17Rm91bmRhdGlvbjp3aW5kb3cuRm91bmRhdGlvbn19LDEwNDpmdW5jdGlvbihuLHQsaSl7bi5leHBvcnRzPWkoMzgpfSwzOmZ1bmN0aW9uKG4sdCl7bi5leHBvcnRzPXtydGw6d2luZG93LkZvdW5kYXRpb24ucnRsLEdldFlvRGlnaXRzOndpbmRvdy5Gb3VuZGF0aW9uLkdldFlvRGlnaXRzLHRyYW5zaXRpb25lbmQ6d2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH19LDM4OmZ1bmN0aW9uKG4sdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZT1pKDEpLG89KGkubihlKSxpKDY4KSk7ZS5Gb3VuZGF0aW9uLk1vdGlvbj1vLmEsZS5Gb3VuZGF0aW9uLk1vdmU9by5ifSw2ODpmdW5jdGlvbihuLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZShuLHQsaSl7ZnVuY3Rpb24gZSh1KXthfHwoYT11KSxyPXUtYSxpLmFwcGx5KHQpLHI8bj9vPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZSx0KTood2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKG8pLHQudHJpZ2dlcihcImZpbmlzaGVkLnpmLmFuaW1hdGVcIixbdF0pLnRyaWdnZXJIYW5kbGVyKFwiZmluaXNoZWQuemYuYW5pbWF0ZVwiLFt0XSkpfXZhciBvLHIsYT1udWxsO2lmKDA9PT1uKXJldHVybiBpLmFwcGx5KHQpLHZvaWQgdC50cmlnZ2VyKFwiZmluaXNoZWQuemYuYW5pbWF0ZVwiLFt0XSkudHJpZ2dlckhhbmRsZXIoXCJmaW5pc2hlZC56Zi5hbmltYXRlXCIsW3RdKTtvPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZSl9ZnVuY3Rpb24gbyhuLHQsZSxvKXtmdW5jdGlvbiByKCl7bnx8dC5oaWRlKCksZCgpLG8mJm8uYXBwbHkodCl9ZnVuY3Rpb24gZCgpe3RbMF0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uPTAsdC5yZW1vdmVDbGFzcyhjK1wiIFwiK2wrXCIgXCIrZSl9aWYodD1hKCkodCkuZXEoMCksdC5sZW5ndGgpe3ZhciBjPW4/c1swXTpzWzFdLGw9bj9mWzBdOmZbMV07ZCgpLHQuYWRkQ2xhc3MoZSkuY3NzKFwidHJhbnNpdGlvblwiLFwibm9uZVwiKSxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXt0LmFkZENsYXNzKGMpLG4mJnQuc2hvdygpfSkscmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7dFswXS5vZmZzZXRXaWR0aCx0LmNzcyhcInRyYW5zaXRpb25cIixcIlwiKS5hZGRDbGFzcyhsKX0pLHQub25lKGkuaSh1LnRyYW5zaXRpb25lbmQpKHQpLHIpfX1pLmQodCxcImJcIixmdW5jdGlvbigpe3JldHVybiBlfSksaS5kKHQsXCJhXCIsZnVuY3Rpb24oKXtyZXR1cm4gZH0pO3ZhciByPWkoMCksYT1pLm4ociksdT1pKDMpLHM9KGkubih1KSxbXCJtdWktZW50ZXJcIixcIm11aS1sZWF2ZVwiXSksZj1bXCJtdWktZW50ZXItYWN0aXZlXCIsXCJtdWktbGVhdmUtYWN0aXZlXCJdLGQ9e2FuaW1hdGVJbjpmdW5jdGlvbihuLHQsaSl7byghMCxuLHQsaSl9LGFuaW1hdGVPdXQ6ZnVuY3Rpb24obix0LGkpe28oITEsbix0LGkpfX19fSk7IiwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTA1KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtGb3VuZGF0aW9uOiB3aW5kb3cuRm91bmRhdGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMDU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OSk7XG5cblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLk5lc3QgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X19bXCJhXCIgLyogTmVzdCAqL107XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE5lc3Q7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcblxuXG5cblxudmFyIE5lc3QgPSB7XG4gIEZlYXRoZXI6IGZ1bmN0aW9uIChtZW51KSB7XG4gICAgdmFyIHR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd6Zic7XG5cbiAgICBtZW51LmF0dHIoJ3JvbGUnLCAnbWVudWJhcicpO1xuXG4gICAgdmFyIGl0ZW1zID0gbWVudS5maW5kKCdsaScpLmF0dHIoeyAncm9sZSc6ICdtZW51aXRlbScgfSksXG4gICAgICAgIHN1Yk1lbnVDbGFzcyA9ICdpcy0nICsgdHlwZSArICctc3VibWVudScsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IHN1Yk1lbnVDbGFzcyArICctaXRlbScsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gJ2lzLScgKyB0eXBlICsgJy1zdWJtZW51LXBhcmVudCcsXG4gICAgICAgIGFwcGx5QXJpYSA9IHR5cGUgIT09ICdhY2NvcmRpb24nOyAvLyBBY2NvcmRpb25zIGhhbmRsZSB0aGVpciBvd24gQVJJQSBhdHRyaXV0ZXMuXG5cbiAgICBpdGVtcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkaXRlbSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgJHN1YiA9ICRpdGVtLmNoaWxkcmVuKCd1bCcpO1xuXG4gICAgICBpZiAoJHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgJGl0ZW0uYWRkQ2xhc3MoaGFzU3ViQ2xhc3MpO1xuICAgICAgICAkc3ViLmFkZENsYXNzKCdzdWJtZW51ICcgKyBzdWJNZW51Q2xhc3MpLmF0dHIoeyAnZGF0YS1zdWJtZW51JzogJycgfSk7XG4gICAgICAgIGlmIChhcHBseUFyaWEpIHtcbiAgICAgICAgICAkaXRlbS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgICdhcmlhLWxhYmVsJzogJGl0ZW0uY2hpbGRyZW4oJ2E6Zmlyc3QnKS50ZXh0KClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBOb3RlOiAgRHJpbGxkb3ducyBiZWhhdmUgZGlmZmVyZW50bHkgaW4gaG93IHRoZXkgaGlkZSwgYW5kIHNvIG5lZWRcbiAgICAgICAgICAvLyBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMuICBXZSBzaG91bGQgbG9vayBpZiB0aGlzIHBvc3NpYmx5IG92ZXItZ2VuZXJhbGl6ZWRcbiAgICAgICAgICAvLyB1dGlsaXR5IChOZXN0KSBpcyBhcHByb3ByaWF0ZSB3aGVuIHdlIHJld29yayBtZW51cyBpbiA2LjRcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RyaWxsZG93bicpIHtcbiAgICAgICAgICAgICRpdGVtLmF0dHIoeyAnYXJpYS1leHBhbmRlZCc6IGZhbHNlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAkc3ViLmFkZENsYXNzKCdzdWJtZW51ICcgKyBzdWJNZW51Q2xhc3MpLmF0dHIoe1xuICAgICAgICAgICdkYXRhLXN1Ym1lbnUnOiAnJyxcbiAgICAgICAgICAncm9sZSc6ICdtZW51J1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdkcmlsbGRvd24nKSB7XG4gICAgICAgICAgJHN1Yi5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcygnaXMtc3VibWVudS1pdGVtICcgKyBzdWJJdGVtQ2xhc3MpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICBCdXJuOiBmdW5jdGlvbiAobWVudSwgdHlwZSkge1xuICAgIHZhciAvL2l0ZW1zID0gbWVudS5maW5kKCdsaScpLFxuICAgIHN1Yk1lbnVDbGFzcyA9ICdpcy0nICsgdHlwZSArICctc3VibWVudScsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IHN1Yk1lbnVDbGFzcyArICctaXRlbScsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gJ2lzLScgKyB0eXBlICsgJy1zdWJtZW51LXBhcmVudCc7XG5cbiAgICBtZW51LmZpbmQoJz5saSwgLm1lbnUsIC5tZW51ID4gbGknKS5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnICcgKyBoYXNTdWJDbGFzcyArICcgaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlJykucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51JykuY3NzKCdkaXNwbGF5JywgJycpO1xuICB9XG59O1xuXG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiIWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIGUocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciB1PXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBuW3JdLmNhbGwodS5leHBvcnRzLHUsdS5leHBvcnRzLGUpLHUubD0hMCx1LmV4cG9ydHN9dmFyIHQ9e307ZS5tPW4sZS5jPXQsZS5pPWZ1bmN0aW9uKG4pe3JldHVybiBufSxlLmQ9ZnVuY3Rpb24obix0LHIpe2UubyhuLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkobix0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxlLm49ZnVuY3Rpb24obil7dmFyIHQ9biYmbi5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIG4uZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gbn07cmV0dXJuIGUuZCh0LFwiYVwiLHQpLHR9LGUubz1mdW5jdGlvbihuLGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixlKX0sZS5wPVwiXCIsZShlLnM9MTA1KX0oezA6ZnVuY3Rpb24obixlKXtuLmV4cG9ydHM9alF1ZXJ5fSwxOmZ1bmN0aW9uKG4sZSl7bi5leHBvcnRzPXtGb3VuZGF0aW9uOndpbmRvdy5Gb3VuZGF0aW9ufX0sMTA1OmZ1bmN0aW9uKG4sZSx0KXtuLmV4cG9ydHM9dCgzOSl9LDM5OmZ1bmN0aW9uKG4sZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj10KDEpLHU9KHQubihyKSx0KDY5KSk7ci5Gb3VuZGF0aW9uLk5lc3Q9dS5hfSw2OTpmdW5jdGlvbihuLGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dC5kKGUsXCJhXCIsZnVuY3Rpb24oKXtyZXR1cm4gYX0pO3ZhciByPXQoMCksdT10Lm4ociksYT17RmVhdGhlcjpmdW5jdGlvbihuKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJ6ZlwiO24uYXR0cihcInJvbGVcIixcIm1lbnViYXJcIik7dmFyIHQ9bi5maW5kKFwibGlcIikuYXR0cih7cm9sZTpcIm1lbnVpdGVtXCJ9KSxyPVwiaXMtXCIrZStcIi1zdWJtZW51XCIsYT1yK1wiLWl0ZW1cIixpPVwiaXMtXCIrZStcIi1zdWJtZW51LXBhcmVudFwiLG89XCJhY2NvcmRpb25cIiE9PWU7dC5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49dSgpKHRoaXMpLHQ9bi5jaGlsZHJlbihcInVsXCIpO3QubGVuZ3RoJiYobi5hZGRDbGFzcyhpKSx0LmFkZENsYXNzKFwic3VibWVudSBcIityKS5hdHRyKHtcImRhdGEtc3VibWVudVwiOlwiXCJ9KSxvJiYobi5hdHRyKHtcImFyaWEtaGFzcG9wdXBcIjohMCxcImFyaWEtbGFiZWxcIjpuLmNoaWxkcmVuKFwiYTpmaXJzdFwiKS50ZXh0KCl9KSxcImRyaWxsZG93blwiPT09ZSYmbi5hdHRyKHtcImFyaWEtZXhwYW5kZWRcIjohMX0pKSx0LmFkZENsYXNzKFwic3VibWVudSBcIityKS5hdHRyKHtcImRhdGEtc3VibWVudVwiOlwiXCIscm9sZTpcIm1lbnVcIn0pLFwiZHJpbGxkb3duXCI9PT1lJiZ0LmF0dHIoe1wiYXJpYS1oaWRkZW5cIjohMH0pKSxuLnBhcmVudChcIltkYXRhLXN1Ym1lbnVdXCIpLmxlbmd0aCYmbi5hZGRDbGFzcyhcImlzLXN1Ym1lbnUtaXRlbSBcIithKX0pfSxCdXJuOmZ1bmN0aW9uKG4sZSl7dmFyIHQ9XCJpcy1cIitlK1wiLXN1Ym1lbnVcIixyPXQrXCItaXRlbVwiLHU9XCJpcy1cIitlK1wiLXN1Ym1lbnUtcGFyZW50XCI7bi5maW5kKFwiPmxpLCAubWVudSwgLm1lbnUgPiBsaVwiKS5yZW1vdmVDbGFzcyh0K1wiIFwiK3IrXCIgXCIrdStcIiBpcy1zdWJtZW51LWl0ZW0gc3VibWVudSBpcy1hY3RpdmVcIikucmVtb3ZlQXR0cihcImRhdGEtc3VibWVudVwiKS5jc3MoXCJkaXNwbGF5XCIsXCJcIil9fX19KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMDYpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0ZvdW5kYXRpb246IHdpbmRvdy5Gb3VuZGF0aW9ufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDEwNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF90aW1lcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7XG5cblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLlRpbWVyID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfdGltZXJfX1tcImFcIiAvKiBUaW1lciAqL107XG5cbi8qKiovIH0pLFxuXG4vKioqLyA3MDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRpbWVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG5cblxuXG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAvL29wdGlvbnMgaXMgYW4gb2JqZWN0IGZvciBlYXNpbHkgYWRkaW5nIGZlYXR1cmVzIGxhdGVyLlxuICBuYW1lU3BhY2UgPSBPYmplY3Qua2V5cyhlbGVtLmRhdGEoKSlbMF0gfHwgJ3RpbWVyJyxcbiAgICAgIHJlbWFpbiA9IC0xLFxuICAgICAgc3RhcnQsXG4gICAgICB0aW1lcjtcblxuICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG5cbiAgdGhpcy5yZXN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJlbWFpbiA9IC0xO1xuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9O1xuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIC8vIGlmKCFlbGVtLmRhdGEoJ3BhdXNlZCcpKXsgcmV0dXJuIGZhbHNlOyB9Ly9tYXliZSBpbXBsZW1lbnQgdGhpcyBzYW5pdHkgY2hlY2sgaWYgdXNlZCBmb3Igb3RoZXIgdGhpbmdzLlxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgcmVtYWluID0gcmVtYWluIDw9IDAgPyBkdXJhdGlvbiA6IHJlbWFpbjtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIGZhbHNlKTtcbiAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZmluaXRlKSB7XG4gICAgICAgIF90aGlzLnJlc3RhcnQoKTsgLy9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSwgcmVtYWluKTtcbiAgICBlbGVtLnRyaWdnZXIoJ3RpbWVyc3RhcnQuemYuJyArIG5hbWVTcGFjZSk7XG4gIH07XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAvL2lmKGVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiAtIChlbmQgLSBzdGFydCk7XG4gICAgZWxlbS50cmlnZ2VyKCd0aW1lcnBhdXNlZC56Zi4nICsgbmFtZVNwYWNlKTtcbiAgfTtcbn1cblxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIiFmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgaT1uW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxlKSxpLmw9ITAsaS5leHBvcnRzfXZhciBuPXt9O2UubT10LGUuYz1uLGUuaT1mdW5jdGlvbih0KXtyZXR1cm4gdH0sZS5kPWZ1bmN0aW9uKHQsbixyKXtlLm8odCxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sZS5uPWZ1bmN0aW9uKHQpe3ZhciBuPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBlLmQobixcImFcIixuKSxufSxlLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LGUucD1cIlwiLGUoZS5zPTEwNil9KHswOmZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWpRdWVyeX0sMTpmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17Rm91bmRhdGlvbjp3aW5kb3cuRm91bmRhdGlvbn19LDEwNjpmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPW4oNDApfSw0MDpmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHI9bigxKSxpPShuLm4ociksbig3MCkpO3IuRm91bmRhdGlvbi5UaW1lcj1pLmF9LDcwOmZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKHQsZSxuKXt2YXIgcixpLG89dGhpcyx1PWUuZHVyYXRpb24sYT1PYmplY3Qua2V5cyh0LmRhdGEoKSlbMF18fFwidGltZXJcIixzPS0xO3RoaXMuaXNQYXVzZWQ9ITEsdGhpcy5yZXN0YXJ0PWZ1bmN0aW9uKCl7cz0tMSxjbGVhclRpbWVvdXQoaSksdGhpcy5zdGFydCgpfSx0aGlzLnN0YXJ0PWZ1bmN0aW9uKCl7dGhpcy5pc1BhdXNlZD0hMSxjbGVhclRpbWVvdXQoaSkscz1zPD0wP3U6cyx0LmRhdGEoXCJwYXVzZWRcIiwhMSkscj1EYXRlLm5vdygpLGk9c2V0VGltZW91dChmdW5jdGlvbigpe2UuaW5maW5pdGUmJm8ucmVzdGFydCgpLG4mJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJm4oKX0scyksdC50cmlnZ2VyKFwidGltZXJzdGFydC56Zi5cIithKX0sdGhpcy5wYXVzZT1mdW5jdGlvbigpe3RoaXMuaXNQYXVzZWQ9ITAsY2xlYXJUaW1lb3V0KGkpLHQuZGF0YShcInBhdXNlZFwiLCEwKTt2YXIgZT1EYXRlLm5vdygpO3MtPWUtcix0LnRyaWdnZXIoXCJ0aW1lcnBhdXNlZC56Zi5cIithKX19bi5kKGUsXCJhXCIsZnVuY3Rpb24oKXtyZXR1cm4gcn0pO3ZhciBpPW4oMCk7bi5uKGkpfX0pOyIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uICgkKSB7XG5cbiAgZnVuY3Rpb24gVGltZXIoZWxlbSwgb3B0aW9ucywgY2IpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAgIC8vb3B0aW9ucyBpcyBhbiBvYmplY3QgZm9yIGVhc2lseSBhZGRpbmcgZmVhdHVyZXMgbGF0ZXIuXG4gICAgbmFtZVNwYWNlID0gT2JqZWN0LmtleXMoZWxlbS5kYXRhKCkpWzBdIHx8ICd0aW1lcicsXG4gICAgICAgIHJlbWFpbiA9IC0xLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgdGltZXI7XG5cbiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLnJlc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZW1haW4gPSAtMTtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfTtcblxuICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgICAvLyBpZighZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICByZW1haW4gPSByZW1haW4gPD0gMCA/IGR1cmF0aW9uIDogcmVtYWluO1xuICAgICAgZWxlbS5kYXRhKCdwYXVzZWQnLCBmYWxzZSk7XG4gICAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pbmZpbml0ZSkge1xuICAgICAgICAgIF90aGlzLnJlc3RhcnQoKTsgLy9yZXJ1biB0aGUgdGltZXIuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJlbWFpbik7XG4gICAgICBlbGVtLnRyaWdnZXIoJ3RpbWVyc3RhcnQuemYuJyArIG5hbWVTcGFjZSk7XG4gICAgfTtcblxuICAgIHRoaXMucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIC8vaWYoZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgICAgdmFyIGVuZCA9IERhdGUubm93KCk7XG4gICAgICByZW1haW4gPSByZW1haW4gLSAoZW5kIC0gc3RhcnQpO1xuICAgICAgZWxlbS50cmlnZ2VyKCd0aW1lcnBhdXNlZC56Zi4nICsgbmFtZVNwYWNlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VzIC0gSW1hZ2UocykgdG8gY2hlY2sgaWYgbG9hZGVkLlxuICAgKiBAcGFyYW0ge0Z1bmN9IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGltYWdlIGlzIGZ1bGx5IGxvYWRlZC5cbiAgICovXG4gIGZ1bmN0aW9uIG9uSW1hZ2VzTG9hZGVkKGltYWdlcywgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIHVubG9hZGVkID0gaW1hZ2VzLmxlbmd0aDtcblxuICAgIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBpbWFnZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDaGVjayBpZiBpbWFnZSBpcyBsb2FkZWRcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gNCB8fCB0aGlzLnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICAgIH1cbiAgICAgIC8vIEZvcmNlIGxvYWQgdGhlIGltYWdlXG4gICAgICBlbHNlIHtcbiAgICAgICAgICAvLyBmaXggZm9yIElFLiBTZWUgaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9qcXVlcnkvZml4aW5nLWxvYWQtaW4taWUtZm9yLWNhY2hlZC1pbWFnZXMvXG4gICAgICAgICAgdmFyIHNyYyA9ICQodGhpcykuYXR0cignc3JjJyk7XG4gICAgICAgICAgJCh0aGlzKS5hdHRyKCdzcmMnLCBzcmMgKyAoc3JjLmluZGV4T2YoJz8nKSA+PSAwID8gJyYnIDogJz8nKSArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICAgICAgICAkKHRoaXMpLm9uZSgnbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHNpbmdsZUltYWdlTG9hZGVkKCkge1xuICAgICAgdW5sb2FkZWQtLTtcbiAgICAgIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEZvdW5kYXRpb24uVGltZXIgPSBUaW1lcjtcbiAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZCA9IG9uSW1hZ2VzTG9hZGVkO1xufShqUXVlcnkpOyIsIlwidXNlIHN0cmljdFwiOyFmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsZSxpKXt2YXIgYSxzLG49dGhpcyxyPWUuZHVyYXRpb24sbz1PYmplY3Qua2V5cyh0LmRhdGEoKSlbMF18fFwidGltZXJcIix1PS0xO3RoaXMuaXNQYXVzZWQ9ITEsdGhpcy5yZXN0YXJ0PWZ1bmN0aW9uKCl7dT0tMSxjbGVhclRpbWVvdXQocyksdGhpcy5zdGFydCgpfSx0aGlzLnN0YXJ0PWZ1bmN0aW9uKCl7dGhpcy5pc1BhdXNlZD0hMSxjbGVhclRpbWVvdXQocyksdT11PD0wP3I6dSx0LmRhdGEoXCJwYXVzZWRcIiwhMSksYT1EYXRlLm5vdygpLHM9c2V0VGltZW91dChmdW5jdGlvbigpe2UuaW5maW5pdGUmJm4ucmVzdGFydCgpLGkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGkmJmkoKX0sdSksdC50cmlnZ2VyKFwidGltZXJzdGFydC56Zi5cIitvKX0sdGhpcy5wYXVzZT1mdW5jdGlvbigpe3RoaXMuaXNQYXVzZWQ9ITAsY2xlYXJUaW1lb3V0KHMpLHQuZGF0YShcInBhdXNlZFwiLCEwKTt2YXIgZT1EYXRlLm5vdygpO3UtPWUtYSx0LnRyaWdnZXIoXCJ0aW1lcnBhdXNlZC56Zi5cIitvKX19ZnVuY3Rpb24gaShlLGkpe2Z1bmN0aW9uIGEoKXtzLS0sMD09PXMmJmkoKX12YXIgcz1lLmxlbmd0aDswPT09cyYmaSgpLGUuZWFjaChmdW5jdGlvbigpe2lmKHRoaXMuY29tcGxldGV8fDQ9PT10aGlzLnJlYWR5U3RhdGV8fFwiY29tcGxldGVcIj09PXRoaXMucmVhZHlTdGF0ZSlhKCk7ZWxzZXt2YXIgZT10KHRoaXMpLmF0dHIoXCJzcmNcIik7dCh0aGlzKS5hdHRyKFwic3JjXCIsZSsoZS5pbmRleE9mKFwiP1wiKT49MD9cIiZcIjpcIj9cIikrKG5ldyBEYXRlKS5nZXRUaW1lKCkpLHQodGhpcykub25lKFwibG9hZFwiLGZ1bmN0aW9uKCl7YSgpfSl9fSl9Rm91bmRhdGlvbi5UaW1lcj1lLEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQ9aX0oalF1ZXJ5KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMDcpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDEwNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF90b3VjaF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MSk7XG5cblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX3RvdWNoX19bXCJhXCIgLyogVG91Y2ggKi9dLmluaXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYSk7XG5cbndpbmRvdy5Gb3VuZGF0aW9uLlRvdWNoID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfdG91Y2hfX1tcImFcIiAvKiBUb3VjaCAqL107XG5cbi8qKiovIH0pLFxuXG4vKioqLyA3MTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRvdWNoOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyoqV29yayBpbnNwaXJlZCBieSBtdWx0aXBsZSBqcXVlcnkgc3dpcGUgcGx1Z2lucyoqXG4vLyoqRG9uZSBieSBZb2hhaSBBcmFyYXQgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cblxuXG52YXIgVG91Y2ggPSB7fTtcblxudmFyIHN0YXJ0UG9zWCxcbiAgICBzdGFydFBvc1ksXG4gICAgc3RhcnRUaW1lLFxuICAgIGVsYXBzZWRUaW1lLFxuICAgIGlzTW92aW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gIC8vICBhbGVydCh0aGlzKTtcbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSk7XG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoRW5kKTtcbiAgaXNNb3ZpbmcgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5zcG90U3dpcGUucHJldmVudERlZmF1bHQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKGlzTW92aW5nKSB7XG4gICAgdmFyIHggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgdmFyIHkgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgdmFyIGR4ID0gc3RhcnRQb3NYIC0geDtcbiAgICB2YXIgZHkgPSBzdGFydFBvc1kgLSB5O1xuICAgIHZhciBkaXI7XG4gICAgZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcbiAgICBpZiAoTWF0aC5hYnMoZHgpID49IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG4gICAgLy8gZWxzZSBpZihNYXRoLmFicyhkeSkgPj0gJC5zcG90U3dpcGUubW92ZVRocmVzaG9sZCAmJiBlbGFwc2VkVGltZSA8PSAkLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkKSB7XG4gICAgLy8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgIC8vIH1cbiAgICBpZiAoZGlyKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBvblRvdWNoRW5kLmNhbGwodGhpcyk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ3N3aXBlJywgZGlyKS50cmlnZ2VyKCdzd2lwZScgKyBkaXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PSAxKSB7XG4gICAgc3RhcnRQb3NYID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgIHN0YXJ0UG9zWSA9IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgICBpc01vdmluZyA9IHRydWU7XG4gICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSwgZmFsc2UpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoRW5kLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyICYmIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiB0ZWFyZG93bigpIHtcbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbn1cblxudmFyIFNwb3RTd2lwZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3BvdFN3aXBlKCQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3BvdFN3aXBlKTtcblxuICAgIHRoaXMudmVyc2lvbiA9ICcxLjAuMCc7XG4gICAgdGhpcy5lbmFibGVkID0gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHRoaXMucHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICB0aGlzLm1vdmVUaHJlc2hvbGQgPSA3NTtcbiAgICB0aGlzLnRpbWVUaHJlc2hvbGQgPSAyMDA7XG4gICAgdGhpcy4kID0gJDtcbiAgICB0aGlzLl9pbml0KCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3BvdFN3aXBlLCBbe1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgJCA9IHRoaXMuJDtcbiAgICAgICQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHsgc2V0dXA6IGluaXQgfTtcblxuICAgICAgJC5lYWNoKFsnbGVmdCcsICd1cCcsICdkb3duJywgJ3JpZ2h0J10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJC5ldmVudC5zcGVjaWFsWydzd2lwZScgKyB0aGlzXSA9IHsgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykub24oJ3N3aXBlJywgJC5ub29wKTtcbiAgICAgICAgICB9IH07XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3BvdFN3aXBlO1xufSgpO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQXMgZmFyIGFzIEkgY2FuIHRlbGwsIGJvdGggc2V0dXBTcG90U3dpcGUgYW5kICAgICpcbiAqIHNldHVwVG91Y2hIYW5kbGVyIHNob3VsZCBiZSBpZGVtcG90ZW50LCAgICAgICAgICAqXG4gKiBiZWNhdXNlIHRoZXkgZGlyZWN0bHkgcmVwbGFjZSBmdW5jdGlvbnMgJiAgICAgICAgKlxuICogdmFsdWVzLCBhbmQgZG8gbm90IGFkZCBldmVudCBoYW5kbGVycyBkaXJlY3RseS4gICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5Ub3VjaC5zZXR1cFNwb3RTd2lwZSA9IGZ1bmN0aW9uICgkKSB7XG4gICQuc3BvdFN3aXBlID0gbmV3IFNwb3RTd2lwZSgkKTtcbn07XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBNZXRob2QgZm9yIGFkZGluZyBwc2V1ZG8gZHJhZyBldmVudHMgdG8gZWxlbWVudHMgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblRvdWNoLnNldHVwVG91Y2hIYW5kbGVyID0gZnVuY3Rpb24gKCQpIHtcbiAgJC5mbi5hZGRUb3VjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGksIGVsKSB7XG4gICAgICAkKGVsKS5iaW5kKCd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy93ZSBwYXNzIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QgYmVjYXVzZSB0aGUgalF1ZXJ5IGV2ZW50XG4gICAgICAgIC8vb2JqZWN0IGlzIG5vcm1hbGl6ZWQgdG8gdzNjIHNwZWNzIGFuZCBkb2VzIG5vdCBwcm92aWRlIHRoZSBUb3VjaExpc3RcbiAgICAgICAgaGFuZGxlVG91Y2goZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFuZGxlVG91Y2ggPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgZmlyc3QgPSB0b3VjaGVzWzBdLFxuICAgICAgICAgIGV2ZW50VHlwZXMgPSB7XG4gICAgICAgIHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuICAgICAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgICAgICB0b3VjaGVuZDogJ21vdXNldXAnXG4gICAgICB9LFxuICAgICAgICAgIHR5cGUgPSBldmVudFR5cGVzW2V2ZW50LnR5cGVdLFxuICAgICAgICAgIHNpbXVsYXRlZEV2ZW50O1xuXG4gICAgICBpZiAoJ01vdXNlRXZlbnQnIGluIHdpbmRvdyAmJiB0eXBlb2Ygd2luZG93Lk1vdXNlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQgPSBuZXcgd2luZG93Lk1vdXNlRXZlbnQodHlwZSwge1xuICAgICAgICAgICdidWJibGVzJzogdHJ1ZSxcbiAgICAgICAgICAnY2FuY2VsYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3NjcmVlblgnOiBmaXJzdC5zY3JlZW5YLFxuICAgICAgICAgICdzY3JlZW5ZJzogZmlyc3Quc2NyZWVuWSxcbiAgICAgICAgICAnY2xpZW50WCc6IGZpcnN0LmNsaWVudFgsXG4gICAgICAgICAgJ2NsaWVudFknOiBmaXJzdC5jbGllbnRZXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgICAgICBzaW11bGF0ZWRFdmVudC5pbml0TW91c2VFdmVudCh0eXBlLCB0cnVlLCB0cnVlLCB3aW5kb3csIDEsIGZpcnN0LnNjcmVlblgsIGZpcnN0LnNjcmVlblksIGZpcnN0LmNsaWVudFgsIGZpcnN0LmNsaWVudFksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwIC8qbGVmdCovLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGZpcnN0LnRhcmdldC5kaXNwYXRjaEV2ZW50KHNpbXVsYXRlZEV2ZW50KTtcbiAgICB9O1xuICB9O1xufTtcblxuVG91Y2guaW5pdCA9IGZ1bmN0aW9uICgkKSB7XG4gIGlmICh0eXBlb2YgJC5zcG90U3dpcGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgVG91Y2guc2V0dXBTcG90U3dpcGUoJCk7XG4gICAgVG91Y2guc2V0dXBUb3VjaEhhbmRsZXIoJCk7XG4gIH1cbn07XG5cblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIhZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChvKXtpZihuW29dKXJldHVybiBuW29dLmV4cG9ydHM7dmFyIGk9bltvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsdCksaS5sPSEwLGkuZXhwb3J0c312YXIgbj17fTt0Lm09ZSx0LmM9bix0Lmk9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LHQuZD1mdW5jdGlvbihlLG4sbyl7dC5vKGUsbil8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpvfSl9LHQubj1mdW5jdGlvbihlKXt2YXIgbj1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gdC5kKG4sXCJhXCIsbiksbn0sdC5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSx0LnA9XCJcIix0KHQucz0xMDcpfSh7MDpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1qUXVlcnl9LDEwNzpmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oNDEpfSw0MTpmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigwKSxpPW4ubihvKSx1PW4oNzEpO3UuYS5pbml0KGkuYSksd2luZG93LkZvdW5kYXRpb24uVG91Y2g9dS5hfSw3MTpmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gaSgpe3RoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLHUpLHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsaSksdz0hMX1mdW5jdGlvbiB1KGUpe2lmKGwuYS5zcG90U3dpcGUucHJldmVudERlZmF1bHQmJmUucHJldmVudERlZmF1bHQoKSx3KXt2YXIgdCxuPWUudG91Y2hlc1swXS5wYWdlWCxvPShlLnRvdWNoZXNbMF0ucGFnZVkscy1uKTtwPShuZXcgRGF0ZSkuZ2V0VGltZSgpLWgsTWF0aC5hYnMobyk+PWwuYS5zcG90U3dpcGUubW92ZVRocmVzaG9sZCYmcDw9bC5hLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkJiYodD1vPjA/XCJsZWZ0XCI6XCJyaWdodFwiKSx0JiYoZS5wcmV2ZW50RGVmYXVsdCgpLGkuY2FsbCh0aGlzKSxsKCkodGhpcykudHJpZ2dlcihcInN3aXBlXCIsdCkudHJpZ2dlcihcInN3aXBlXCIrdCkpfX1mdW5jdGlvbiByKGUpezE9PWUudG91Y2hlcy5sZW5ndGgmJihzPWUudG91Y2hlc1swXS5wYWdlWCxhPWUudG91Y2hlc1swXS5wYWdlWSx3PSEwLGg9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdSwhMSksdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixpLCExKSl9ZnVuY3Rpb24gYygpe3RoaXMuYWRkRXZlbnRMaXN0ZW5lciYmdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLHIsITEpfW4uZCh0LFwiYVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHZ9KTt2YXIgcyxhLGgscCxmPW4oMCksbD1uLm4oZiksZD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpLHY9e30sdz0hMSxtPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtvKHRoaXMsZSksdGhpcy52ZXJzaW9uPVwiMS4wLjBcIix0aGlzLmVuYWJsZWQ9XCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0aGlzLnByZXZlbnREZWZhdWx0PSExLHRoaXMubW92ZVRocmVzaG9sZD03NSx0aGlzLnRpbWVUaHJlc2hvbGQ9MjAwLHRoaXMuJD10LHRoaXMuX2luaXQoKX1yZXR1cm4gZChlLFt7a2V5OlwiX2luaXRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuJDtlLmV2ZW50LnNwZWNpYWwuc3dpcGU9e3NldHVwOmN9LGUuZWFjaChbXCJsZWZ0XCIsXCJ1cFwiLFwiZG93blwiLFwicmlnaHRcIl0sZnVuY3Rpb24oKXtlLmV2ZW50LnNwZWNpYWxbXCJzd2lwZVwiK3RoaXNdPXtzZXR1cDpmdW5jdGlvbigpe2UodGhpcykub24oXCJzd2lwZVwiLGUubm9vcCl9fX0pfX1dKSxlfSgpO3Yuc2V0dXBTcG90U3dpcGU9ZnVuY3Rpb24oZSl7ZS5zcG90U3dpcGU9bmV3IG0oZSl9LHYuc2V0dXBUb3VjaEhhbmRsZXI9ZnVuY3Rpb24oZSl7ZS5mbi5hZGRUb3VjaD1mdW5jdGlvbigpe3RoaXMuZWFjaChmdW5jdGlvbihuLG8pe2UobykuYmluZChcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsXCIsZnVuY3Rpb24oKXt0KGV2ZW50KX0pfSk7dmFyIHQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1lLmNoYW5nZWRUb3VjaGVzLG89blswXSxpPXt0b3VjaHN0YXJ0OlwibW91c2Vkb3duXCIsdG91Y2htb3ZlOlwibW91c2Vtb3ZlXCIsdG91Y2hlbmQ6XCJtb3VzZXVwXCJ9LHU9aVtlLnR5cGVdO1wiTW91c2VFdmVudFwiaW4gd2luZG93JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB3aW5kb3cuTW91c2VFdmVudD90PW5ldyB3aW5kb3cuTW91c2VFdmVudCh1LHtidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsc2NyZWVuWDpvLnNjcmVlblgsc2NyZWVuWTpvLnNjcmVlblksY2xpZW50WDpvLmNsaWVudFgsY2xpZW50WTpvLmNsaWVudFl9KToodD1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRcIiksdC5pbml0TW91c2VFdmVudCh1LCEwLCEwLHdpbmRvdywxLG8uc2NyZWVuWCxvLnNjcmVlblksby5jbGllbnRYLG8uY2xpZW50WSwhMSwhMSwhMSwhMSwwLG51bGwpKSxvLnRhcmdldC5kaXNwYXRjaEV2ZW50KHQpfX19LHYuaW5pdD1mdW5jdGlvbihlKXt2b2lkIDA9PT1lLnNwb3RTd2lwZSYmKHYuc2V0dXBTcG90U3dpcGUoZSksdi5zZXR1cFRvdWNoSGFuZGxlcihlKSl9fX0pOyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwOCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTA4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtNb3Rpb246IHdpbmRvdy5Gb3VuZGF0aW9uLk1vdGlvbiwgTW92ZTogd2luZG93LkZvdW5kYXRpb24uTW92ZX07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA0Mjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfX1tcImFcIiAvKiBUcmlnZ2VycyAqL10uaW5pdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfanF1ZXJ5X19fZGVmYXVsdC5hLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fW1wiRm91bmRhdGlvblwiXSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVHJpZ2dlcnM7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyk7XG5cblxuXG5cblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcmVmaXhlcyA9IFsnV2ViS2l0JywgJ01veicsICdPJywgJ01zJywgJyddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgcmV0dXJuIHdpbmRvd1twcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJ107XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0oKTtcblxudmFyIHRyaWdnZXJzID0gZnVuY3Rpb24gKGVsLCB0eXBlKSB7XG4gIGVsLmRhdGEodHlwZSkuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgaWQpW3R5cGUgPT09ICdjbG9zZScgPyAndHJpZ2dlcicgOiAndHJpZ2dlckhhbmRsZXInXSh0eXBlICsgJy56Zi50cmlnZ2VyJywgW2VsXSk7XG4gIH0pO1xufTtcblxudmFyIFRyaWdnZXJzID0ge1xuICBMaXN0ZW5lcnM6IHtcbiAgICBCYXNpYzoge30sXG4gICAgR2xvYmFsOiB7fVxuICB9LFxuICBJbml0aWFsaXplcnM6IHt9XG59O1xuXG5UcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMgPSB7XG4gIG9wZW5MaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICdvcGVuJyk7XG4gIH0sXG4gIGNsb3NlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICB0cmlnZ2VycyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCAnY2xvc2UnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCdjbG9zZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9LFxuICB0b2dnbGVMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgndG9nZ2xlJyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICB0cmlnZ2VycyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCAndG9nZ2xlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlcigndG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICB9XG4gIH0sXG4gIGNsb3NlYWJsZUxpc3RlbmVyOiBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgnY2xvc2FibGUnKTtcblxuICAgIGlmIChhbmltYXRpb24gIT09ICcnKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcIk1vdGlvblwiXS5hbmltYXRlT3V0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksIGFuaW1hdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZmFkZU91dCgpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlRm9jdXNMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgndG9nZ2xlLWZvY3VzJyk7XG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBpZCkudHJpZ2dlckhhbmRsZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJywgW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyldKTtcbiAgfVxufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1vcGVuXSB3aWxsIHJldmVhbCBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRPcGVuTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbGljay56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLm9wZW5MaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLW9wZW5dJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLm9wZW5MaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NlXSB3aWxsIGNsb3NlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZUxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2VdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGVdIHdpbGwgdG9nZ2xlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zYWJsZV0gd2lsbCByZXNwb25kIHRvIGNsb3NlLnpmLnRyaWdnZXIgZXZlbnRzLlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlYWJsZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xvc2UuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZWFibGVMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbG9zZS56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlYWJsZV0sIFtkYXRhLWNsb3NhYmxlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZWFibGVMaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLXRvZ2dsZS1mb2N1c10gd2lsbCByZXNwb25kIHRvIGNvbWluZyBpbiBhbmQgb3V0IG9mIGZvY3VzXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlRm9jdXNMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUZvY3VzTGlzdGVuZXIpO1xuICAkZWxlbS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVGb2N1c0xpc3RlbmVyKTtcbn07XG5cbi8vIE1vcmUgR2xvYmFsL2NvbXBsZXggbGlzdGVuZXJzIGFuZCB0cmlnZ2Vyc1xuVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbCA9IHtcbiAgcmVzaXplTGlzdGVuZXI6IGZ1bmN0aW9uICgkbm9kZXMpIHtcbiAgICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIC8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSByZXNpemUgZXZlbnRcbiAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInJlc2l6ZVwiKTtcbiAgfSxcbiAgc2Nyb2xsTGlzdGVuZXI6IGZ1bmN0aW9uICgkbm9kZXMpIHtcbiAgICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIC8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBzY3JvbGwgZXZlbnRcbiAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInNjcm9sbFwiKTtcbiAgfSxcbiAgY2xvc2VNZUxpc3RlbmVyOiBmdW5jdGlvbiAoZSwgcGx1Z2luSWQpIHtcbiAgICB2YXIgcGx1Z2luID0gZS5uYW1lc3BhY2Uuc3BsaXQoJy4nKVswXTtcbiAgICB2YXIgcGx1Z2lucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLScgKyBwbHVnaW4gKyAnXScpLm5vdCgnW2RhdGEteWV0aS1ib3g9XCInICsgcGx1Z2luSWQgKyAnXCJdJyk7XG5cbiAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKTtcbiAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBHbG9iYWwsIHBhcnNlcyB3aG9sZSBkb2N1bWVudC5cbn07VHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlbWVMaXN0ZW5lciA9IGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gIHZhciB5ZXRpQm94ZXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZiAocGx1Z2luTmFtZSkge1xuICAgIGlmICh0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBsdWdOYW1lcy5wdXNoKHBsdWdpbk5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z05hbWVzLmNvbmNhdChwbHVnaW5OYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZiAoeWV0aUJveGVzLmxlbmd0aCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSBwbHVnTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gJ2Nsb3NlbWUuemYuJyArIG5hbWU7XG4gICAgfSkuam9pbignICcpO1xuXG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZihsaXN0ZW5lcnMpLm9uKGxpc3RlbmVycywgVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbC5jbG9zZU1lTGlzdGVuZXIpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCB0cmlnZ2VyLCBsaXN0ZW5lcikge1xuICB2YXIgdGltZXIgPSB2b2lkIDAsXG4gICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcbiAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZih0cmlnZ2VyKS5vbih0cmlnZ2VyLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmICh0aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB9XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIGRlYm91bmNlIHx8IDEwKTsgLy9kZWZhdWx0IHRpbWUgdG8gZW1pdCBzY3JvbGwgZXZlbnRcbiAgfSk7XG59XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIChkZWJvdW5jZSkge1xuICB2YXIgJG5vZGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtcmVzaXplXScpO1xuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsICdyZXNpemUuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwucmVzaXplTGlzdGVuZXIsICRub2Rlcyk7XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTY3JvbGxMaXN0ZW5lciA9IGZ1bmN0aW9uIChkZWJvdW5jZSkge1xuICB2YXIgJG5vZGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtc2Nyb2xsXScpO1xuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsICdzY3JvbGwuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwuc2Nyb2xsTGlzdGVuZXIsICRub2Rlcyk7XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRNdXRhdGlvbkV2ZW50c0xpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgJG5vZGVzID0gJGVsZW0uZmluZCgnW2RhdGEtcmVzaXplXSwgW2RhdGEtc2Nyb2xsXSwgW2RhdGEtbXV0YXRlXScpO1xuXG4gIC8vZWxlbWVudCBjYWxsYmFja1xuICB2YXIgbGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiA9IGZ1bmN0aW9uIChtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgdmFyICR0YXJnZXQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udGFyZ2V0KTtcblxuICAgIC8vdHJpZ2dlciB0aGUgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHR5cGVcbiAgICBzd2l0Y2ggKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udHlwZSkge1xuICAgICAgY2FzZSBcImF0dHJpYnV0ZXNcIjpcbiAgICAgICAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInNjcm9sbFwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG4gICAgICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LCB3aW5kb3cucGFnZVlPZmZzZXRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikgPT09IFwicmVzaXplXCIgJiYgbXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtZXZlbnRzXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLCBcIm11dGF0ZVwiKTtcbiAgICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImNoaWxkTGlzdFwiOlxuICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLCBcIm11dGF0ZVwiKTtcbiAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvL25vdGhpbmdcbiAgICB9XG4gIH07XG5cbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICAvL2ZvciBlYWNoIGVsZW1lbnQgdGhhdCBuZWVkcyB0byBsaXN0ZW4gZm9yIHJlc2l6aW5nLCBzY3JvbGxpbmcsIG9yIG11dGF0aW9uIGFkZCBhIHNpbmdsZSBvYnNlcnZlclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9ICRub2Rlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIHZhciBlbGVtZW50T2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uKTtcbiAgICAgIGVsZW1lbnRPYnNlcnZlci5vYnNlcnZlKCRub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6IFtcImRhdGEtZXZlbnRzXCIsIFwic3R5bGVcIl0gfSk7XG4gICAgfVxuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgJGRvY3VtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudCk7XG5cbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE9wZW5MaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlYWJsZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVGb2N1c0xpc3RlbmVyKCRkb2N1bWVudCk7XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgJGRvY3VtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRNdXRhdGlvbkV2ZW50c0xpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lcigpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2Nyb2xsTGlzdGVuZXIoKTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlbWVMaXN0ZW5lcigpO1xufTtcblxuVHJpZ2dlcnMuaW5pdCA9IGZ1bmN0aW9uICgkLCBGb3VuZGF0aW9uKSB7XG4gIGlmICh0eXBlb2YgJC50cmlnZ2Vyc0luaXRpYWxpemVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciAkZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMoKTtcbiAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzKCk7XG4gICAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICQudHJpZ2dlcnNJbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBpZiAoRm91bmRhdGlvbikge1xuICAgIEZvdW5kYXRpb24uVHJpZ2dlcnMgPSBUcmlnZ2VycztcbiAgICAvLyBMZWdhY3kgaW5jbHVkZWQgdG8gYmUgYmFja3dhcmRzIGNvbXBhdGlibGUgZm9yIG5vdy5cbiAgICBGb3VuZGF0aW9uLklIZWFyWW91ID0gVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycztcbiAgfVxufTtcblxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIiFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe2lmKGlbcl0pcmV0dXJuIGlbcl0uZXhwb3J0czt2YXIgbj1pW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKG4uZXhwb3J0cyxuLG4uZXhwb3J0cyx0KSxuLmw9ITAsbi5leHBvcnRzfXZhciBpPXt9O3QubT1lLHQuYz1pLHQuaT1mdW5jdGlvbihlKXtyZXR1cm4gZX0sdC5kPWZ1bmN0aW9uKGUsaSxyKXt0Lm8oZSxpKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsaSx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBpPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQoaSxcImFcIixpKSxpfSx0Lm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHQucD1cIlwiLHQodC5zPTEwOCl9KHswOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWpRdWVyeX0sMTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz17Rm91bmRhdGlvbjp3aW5kb3cuRm91bmRhdGlvbn19LDEwODpmdW5jdGlvbihlLHQsaSl7ZS5leHBvcnRzPWkoNDIpfSw0OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXtNb3Rpb246d2luZG93LkZvdW5kYXRpb24uTW90aW9uLE1vdmU6d2luZG93LkZvdW5kYXRpb24uTW92ZX19LDQyOmZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1pKDEpLG49KGkubihyKSxpKDApKSxzPWkubihuKTtpKDcpLmEuaW5pdChzLmEsci5Gb3VuZGF0aW9uKX0sNzpmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlLHQsaSl7dmFyIHI9dm9pZCAwLG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3MoKSh3aW5kb3cpLm9mZih0KS5vbih0LGZ1bmN0aW9uKHQpe3ImJmNsZWFyVGltZW91dChyKSxyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLmFwcGx5KG51bGwsbil9LGV8fDEwKX0pfWkuZCh0LFwiYVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGN9KTt2YXIgbj1pKDApLHM9aS5uKG4pLGE9aSg0KSxvPShpLm4oYSksZnVuY3Rpb24oKXtmb3IodmFyIGU9W1wiV2ViS2l0XCIsXCJNb3pcIixcIk9cIixcIk1zXCIsXCJcIl0sdD0wO3Q8ZS5sZW5ndGg7dCsrKWlmKGVbdF0rXCJNdXRhdGlvbk9ic2VydmVyXCJpbiB3aW5kb3cpcmV0dXJuIHdpbmRvd1tlW3RdK1wiTXV0YXRpb25PYnNlcnZlclwiXTtyZXR1cm4hMX0oKSksbD1mdW5jdGlvbihlLHQpe2UuZGF0YSh0KS5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihpKXtzKCkoXCIjXCIraSlbXCJjbG9zZVwiPT09dD9cInRyaWdnZXJcIjpcInRyaWdnZXJIYW5kbGVyXCJdKHQrXCIuemYudHJpZ2dlclwiLFtlXSl9KX0sYz17TGlzdGVuZXJzOntCYXNpYzp7fSxHbG9iYWw6e319LEluaXRpYWxpemVyczp7fX07Yy5MaXN0ZW5lcnMuQmFzaWM9e29wZW5MaXN0ZW5lcjpmdW5jdGlvbigpe2wocygpKHRoaXMpLFwib3BlblwiKX0sY2xvc2VMaXN0ZW5lcjpmdW5jdGlvbigpe3MoKSh0aGlzKS5kYXRhKFwiY2xvc2VcIik/bChzKCkodGhpcyksXCJjbG9zZVwiKTpzKCkodGhpcykudHJpZ2dlcihcImNsb3NlLnpmLnRyaWdnZXJcIil9LHRvZ2dsZUxpc3RlbmVyOmZ1bmN0aW9uKCl7cygpKHRoaXMpLmRhdGEoXCJ0b2dnbGVcIik/bChzKCkodGhpcyksXCJ0b2dnbGVcIik6cygpKHRoaXMpLnRyaWdnZXIoXCJ0b2dnbGUuemYudHJpZ2dlclwiKX0sY2xvc2VhYmxlTGlzdGVuZXI6ZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKTt2YXIgdD1zKCkodGhpcykuZGF0YShcImNsb3NhYmxlXCIpO1wiXCIhPT10P2EuTW90aW9uLmFuaW1hdGVPdXQocygpKHRoaXMpLHQsZnVuY3Rpb24oKXtzKCkodGhpcykudHJpZ2dlcihcImNsb3NlZC56ZlwiKX0pOnMoKSh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcihcImNsb3NlZC56ZlwiKX0sdG9nZ2xlRm9jdXNMaXN0ZW5lcjpmdW5jdGlvbigpe3ZhciBlPXMoKSh0aGlzKS5kYXRhKFwidG9nZ2xlLWZvY3VzXCIpO3MoKShcIiNcIitlKS50cmlnZ2VySGFuZGxlcihcInRvZ2dsZS56Zi50cmlnZ2VyXCIsW3MoKSh0aGlzKV0pfX0sYy5Jbml0aWFsaXplcnMuYWRkT3Blbkxpc3RlbmVyPWZ1bmN0aW9uKGUpe2Uub2ZmKFwiY2xpY2suemYudHJpZ2dlclwiLGMuTGlzdGVuZXJzLkJhc2ljLm9wZW5MaXN0ZW5lciksZS5vbihcImNsaWNrLnpmLnRyaWdnZXJcIixcIltkYXRhLW9wZW5dXCIsYy5MaXN0ZW5lcnMuQmFzaWMub3Blbkxpc3RlbmVyKX0sYy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VMaXN0ZW5lcj1mdW5jdGlvbihlKXtlLm9mZihcImNsaWNrLnpmLnRyaWdnZXJcIixjLkxpc3RlbmVycy5CYXNpYy5jbG9zZUxpc3RlbmVyKSxlLm9uKFwiY2xpY2suemYudHJpZ2dlclwiLFwiW2RhdGEtY2xvc2VdXCIsYy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VMaXN0ZW5lcil9LGMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyPWZ1bmN0aW9uKGUpe2Uub2ZmKFwiY2xpY2suemYudHJpZ2dlclwiLGMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUxpc3RlbmVyKSxlLm9uKFwiY2xpY2suemYudHJpZ2dlclwiLFwiW2RhdGEtdG9nZ2xlXVwiLGMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUxpc3RlbmVyKX0sYy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VhYmxlTGlzdGVuZXI9ZnVuY3Rpb24oZSl7ZS5vZmYoXCJjbG9zZS56Zi50cmlnZ2VyXCIsYy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpLGUub24oXCJjbG9zZS56Zi50cmlnZ2VyXCIsXCJbZGF0YS1jbG9zZWFibGVdLCBbZGF0YS1jbG9zYWJsZV1cIixjLkxpc3RlbmVycy5CYXNpYy5jbG9zZWFibGVMaXN0ZW5lcil9LGMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUZvY3VzTGlzdGVuZXI9ZnVuY3Rpb24oZSl7ZS5vZmYoXCJmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlclwiLGMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUZvY3VzTGlzdGVuZXIpLGUub24oXCJmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlclwiLFwiW2RhdGEtdG9nZ2xlLWZvY3VzXVwiLGMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUZvY3VzTGlzdGVuZXIpfSxjLkxpc3RlbmVycy5HbG9iYWw9e3Jlc2l6ZUxpc3RlbmVyOmZ1bmN0aW9uKGUpe298fGUuZWFjaChmdW5jdGlvbigpe3MoKSh0aGlzKS50cmlnZ2VySGFuZGxlcihcInJlc2l6ZW1lLnpmLnRyaWdnZXJcIil9KSxlLmF0dHIoXCJkYXRhLWV2ZW50c1wiLFwicmVzaXplXCIpfSxzY3JvbGxMaXN0ZW5lcjpmdW5jdGlvbihlKXtvfHxlLmVhY2goZnVuY3Rpb24oKXtzKCkodGhpcykudHJpZ2dlckhhbmRsZXIoXCJzY3JvbGxtZS56Zi50cmlnZ2VyXCIpfSksZS5hdHRyKFwiZGF0YS1ldmVudHNcIixcInNjcm9sbFwiKX0sY2xvc2VNZUxpc3RlbmVyOmZ1bmN0aW9uKGUsdCl7dmFyIGk9ZS5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpWzBdO3MoKShcIltkYXRhLVwiK2krXCJdXCIpLm5vdCgnW2RhdGEteWV0aS1ib3g9XCInK3QrJ1wiXScpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1zKCkodGhpcyk7ZS50cmlnZ2VySGFuZGxlcihcImNsb3NlLnpmLnRyaWdnZXJcIixbZV0pfSl9fSxjLkluaXRpYWxpemVycy5hZGRDbG9zZW1lTGlzdGVuZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9cygpKFwiW2RhdGEteWV0aS1ib3hdXCIpLGk9W1wiZHJvcGRvd25cIixcInRvb2x0aXBcIixcInJldmVhbFwiXTtpZihlJiYoXCJzdHJpbmdcIj09dHlwZW9mIGU/aS5wdXNoKGUpOlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcInN0cmluZ1wiPT10eXBlb2YgZVswXT9pLmNvbmNhdChlKTpjb25zb2xlLmVycm9yKFwiUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5nc1wiKSksdC5sZW5ndGgpe3ZhciByPWkubWFwKGZ1bmN0aW9uKGUpe3JldHVyblwiY2xvc2VtZS56Zi5cIitlfSkuam9pbihcIiBcIik7cygpKHdpbmRvdykub2ZmKHIpLm9uKHIsYy5MaXN0ZW5lcnMuR2xvYmFsLmNsb3NlTWVMaXN0ZW5lcil9fSxjLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lcj1mdW5jdGlvbihlKXt2YXIgdD1zKCkoXCJbZGF0YS1yZXNpemVdXCIpO3QubGVuZ3RoJiZyKGUsXCJyZXNpemUuemYudHJpZ2dlclwiLGMuTGlzdGVuZXJzLkdsb2JhbC5yZXNpemVMaXN0ZW5lcix0KX0sYy5Jbml0aWFsaXplcnMuYWRkU2Nyb2xsTGlzdGVuZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9cygpKFwiW2RhdGEtc2Nyb2xsXVwiKTt0Lmxlbmd0aCYmcihlLFwic2Nyb2xsLnpmLnRyaWdnZXJcIixjLkxpc3RlbmVycy5HbG9iYWwuc2Nyb2xsTGlzdGVuZXIsdCl9LGMuSW5pdGlhbGl6ZXJzLmFkZE11dGF0aW9uRXZlbnRzTGlzdGVuZXI9ZnVuY3Rpb24oZSl7aWYoIW8pcmV0dXJuITE7dmFyIHQ9ZS5maW5kKFwiW2RhdGEtcmVzaXplXSwgW2RhdGEtc2Nyb2xsXSwgW2RhdGEtbXV0YXRlXVwiKSxpPWZ1bmN0aW9uKGUpe3ZhciB0PXMoKShlWzBdLnRhcmdldCk7c3dpdGNoKGVbMF0udHlwZSl7Y2FzZVwiYXR0cmlidXRlc1wiOlwic2Nyb2xsXCI9PT10LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSYmXCJkYXRhLWV2ZW50c1wiPT09ZVswXS5hdHRyaWJ1dGVOYW1lJiZ0LnRyaWdnZXJIYW5kbGVyKFwic2Nyb2xsbWUuemYudHJpZ2dlclwiLFt0LHdpbmRvdy5wYWdlWU9mZnNldF0pLFwicmVzaXplXCI9PT10LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSYmXCJkYXRhLWV2ZW50c1wiPT09ZVswXS5hdHRyaWJ1dGVOYW1lJiZ0LnRyaWdnZXJIYW5kbGVyKFwicmVzaXplbWUuemYudHJpZ2dlclwiLFt0XSksXCJzdHlsZVwiPT09ZVswXS5hdHRyaWJ1dGVOYW1lJiYodC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS5hdHRyKFwiZGF0YS1ldmVudHNcIixcIm11dGF0ZVwiKSx0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKFwibXV0YXRlbWUuemYudHJpZ2dlclwiLFt0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSkpO2JyZWFrO2Nhc2VcImNoaWxkTGlzdFwiOnQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsXCJtdXRhdGVcIiksdC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIixbdC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKV0pO2JyZWFrO2RlZmF1bHQ6cmV0dXJuITF9fTtpZih0Lmxlbmd0aClmb3IodmFyIHI9MDtyPD10Lmxlbmd0aC0xO3IrKyl7dmFyIG49bmV3IG8oaSk7bi5vYnNlcnZlKHRbcl0se2F0dHJpYnV0ZXM6ITAsY2hpbGRMaXN0OiEwLGNoYXJhY3RlckRhdGE6ITEsc3VidHJlZTohMCxhdHRyaWJ1dGVGaWx0ZXI6W1wiZGF0YS1ldmVudHNcIixcInN0eWxlXCJdfSl9fSxjLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgZT1zKCkoZG9jdW1lbnQpO2MuSW5pdGlhbGl6ZXJzLmFkZE9wZW5MaXN0ZW5lcihlKSxjLkluaXRpYWxpemVycy5hZGRDbG9zZUxpc3RlbmVyKGUpLGMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyKGUpLGMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlYWJsZUxpc3RlbmVyKGUpLGMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUZvY3VzTGlzdGVuZXIoZSl9LGMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciBlPXMoKShkb2N1bWVudCk7Yy5Jbml0aWFsaXplcnMuYWRkTXV0YXRpb25FdmVudHNMaXN0ZW5lcihlKSxjLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lcigpLGMuSW5pdGlhbGl6ZXJzLmFkZFNjcm9sbExpc3RlbmVyKCksYy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VtZUxpc3RlbmVyKCl9LGMuaW5pdD1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PWUudHJpZ2dlcnNJbml0aWFsaXplZCl7ZShkb2N1bWVudCk7XCJjb21wbGV0ZVwiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZT8oYy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzKCksYy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzKCkpOmUod2luZG93KS5vbihcImxvYWRcIixmdW5jdGlvbigpe2MuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycygpLGMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycygpfSksZS50cmlnZ2Vyc0luaXRpYWxpemVkPSEwfXQmJih0LlRyaWdnZXJzPWMsdC5JSGVhcllvdT1jLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMpfX19KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5NSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7UGx1Z2luOiB3aW5kb3cuRm91bmRhdGlvbi5QbHVnaW59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fc21vb3RoU2Nyb2xsX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fc21vb3RoU2Nyb2xsX19bXCJhXCIgLyogU21vb3RoU2Nyb2xsICovXSwgJ1Ntb290aFNjcm9sbCcpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7cnRsOiB3aW5kb3cuRm91bmRhdGlvbi5ydGwsIEdldFlvRGlnaXRzOiB3aW5kb3cuRm91bmRhdGlvbi5HZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZDogd2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNtb290aFNjcm9sbDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fXyk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cbi8qKlxuICogU21vb3RoU2Nyb2xsIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zbW9vdGgtc2Nyb2xsXG4gKi9cblxudmFyIFNtb290aFNjcm9sbCA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gICAgX2luaGVyaXRzKFNtb290aFNjcm9sbCwgX1BsdWdpbik7XG5cbiAgICBmdW5jdGlvbiBTbW9vdGhTY3JvbGwoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbW9vdGhTY3JvbGwpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU21vb3RoU2Nyb2xsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU21vb3RoU2Nyb2xsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNtb290aFNjcm9sbCwgW3tcbiAgICAgICAga2V5OiAnX3NldHVwJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBTbW9vdGhTY3JvbGwuXG4gICAgICAgICAqIEBjbGFzc1xuICAgICAgICAgKiBAbmFtZSBTbW9vdGhTY3JvbGxcbiAgICAgICAgICogQGZpcmVzIFNtb290aFNjcm9sbCNpbml0XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgU21vb3RoU2Nyb2xsLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdTbW9vdGhTY3JvbGwnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWxpemUgdGhlIFNtb290aFNjcm9sbCBwbHVnaW5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19pbml0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgICAgICAgdmFyIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiR2V0WW9EaWdpdHNcIl0pKDYsICdzbW9vdGgtc2Nyb2xsJyk7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgU21vb3RoU2Nyb2xsLlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2V2ZW50cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgLy8gY2xpY2sgaGFuZGxlciBmdW5jdGlvbi5cbiAgICAgICAgICAgIHZhciBoYW5kbGVMaW5rQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXQgZnVuY3Rpb24gaWYgdGhlIGV2ZW50IHNvdXJjZSBpc24ndCBjb21pbmcgZnJvbSBhbiBhbmNob3Igd2l0aCBocmVmIGF0dHJpYnV0ZSBzdGFydHMgd2l0aCAnIydcbiAgICAgICAgICAgICAgICBpZiAoIV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuaXMoJ2FbaHJlZl49XCIjXCJdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBhcnJpdmFsID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLl9pblRyYW5zaXRpb24gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgU21vb3RoU2Nyb2xsLnNjcm9sbFRvTG9jKGFycml2YWwsIF90aGlzLm9wdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2luVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suemYuc21vb3RoU2Nyb2xsJywgaGFuZGxlTGlua0NsaWNrKTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLnpmLnNtb290aFNjcm9sbCcsICdhW2hyZWZePVwiI1wiXScsIGhhbmRsZUxpbmtDbGljayk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRnVuY3Rpb24gdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gbG9jYXRpb24gb24gdGhlIHBhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsb2MgLSBBIHByb3Blcmx5IGZvcm1hdHRlZCBqUXVlcnkgaWQgc2VsZWN0b3IuIEV4YW1wbGU6ICcjZm9vJ1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIHVzZS5cbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqL1xuXG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ3Njcm9sbFRvTG9jJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvTG9jKGxvYykge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFNtb290aFNjcm9sbC5kZWZhdWx0cztcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1syXTtcblxuICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiB0YXJnZXQgZG9lcyBub3QgZXhpc3QgdG8gcHJldmVudCBlcnJvcnNcbiAgICAgICAgICAgIGlmICghX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShsb2MpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNjcm9sbFBvcyA9IE1hdGgucm91bmQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShsb2MpLm9mZnNldCgpLnRvcCAtIG9wdGlvbnMudGhyZXNob2xkIC8gMiAtIG9wdGlvbnMub2Zmc2V0KTtcblxuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnaHRtbCwgYm9keScpLnN0b3AodHJ1ZSkuYW5pbWF0ZSh7IHNjcm9sbFRvcDogc2Nyb2xsUG9zIH0sIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sIG9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTbW9vdGhTY3JvbGw7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fX1tcIlBsdWdpblwiXSk7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luLlxuICovXG5cblxuU21vb3RoU2Nyb2xsLmRlZmF1bHRzID0ge1xuICAgIC8qKlxuICAgICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgdGhlIGFuaW1hdGVkIHNjcm9sbGluZyBzaG91bGQgdGFrZSBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCA1MDBcbiAgICAgKi9cbiAgICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAgIC8qKlxuICAgICAqIEFuaW1hdGlvbiBzdHlsZSB0byB1c2Ugd2hlbiBzY3JvbGxpbmcgYmV0d2VlbiBsb2NhdGlvbnMuIENhbiBiZSBgJ3N3aW5nJ2Agb3IgYCdsaW5lYXInYC5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAZGVmYXVsdCAnbGluZWFyJ1xuICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vYW5pbWF0ZXxKcXVlcnkgYW5pbWF0ZX1cbiAgICAgKi9cbiAgICBhbmltYXRpb25FYXNpbmc6ICdsaW5lYXInLFxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBwaXhlbHMgdG8gdXNlIGFzIGEgbWFya2VyIGZvciBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDUwXG4gICAgICovXG4gICAgdGhyZXNob2xkOiA1MCxcbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRvIG9mZnNldCB0aGUgc2Nyb2xsIG9mIHRoZSBwYWdlIG9uIGl0ZW0gY2xpY2sgaWYgdXNpbmcgYSBzdGlja3kgbmF2IGJhci5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG59O1xuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtGb3VuZGF0aW9uOiB3aW5kb3cuRm91bmRhdGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9hY2NvcmRpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX1tcIkZvdW5kYXRpb25cIl0ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9hY2NvcmRpb25fX1tcImFcIiAvKiBBY2NvcmRpb24gKi9dLCAnQWNjb3JkaW9uJyk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtQbHVnaW46IHdpbmRvdy5Gb3VuZGF0aW9uLlBsdWdpbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtydGw6IHdpbmRvdy5Gb3VuZGF0aW9uLnJ0bCwgR2V0WW9EaWdpdHM6IHdpbmRvdy5Gb3VuZGF0aW9uLkdldFlvRGlnaXRzLCB0cmFuc2l0aW9uZW5kOiB3aW5kb3cuRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQWNjb3JkaW9uOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fXyk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuLyoqXG4gKiBBY2NvcmRpb24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICovXG5cbnZhciBBY2NvcmRpb24gPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoQWNjb3JkaW9uLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBBY2NvcmRpb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY29yZGlvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEFjY29yZGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFjY29yZGlvbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFjY29yZGlvbiwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgQWNjb3JkaW9uXG4gICAgICogQGZpcmVzIEFjY29yZGlvbiNpbml0XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhIHBsYWluIG9iamVjdCB3aXRoIHNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKHt9LCBBY2NvcmRpb24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnQWNjb3JkaW9uJzsgLy8gaWU5IGJhY2sgY29tcGF0XG4gICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJLZXlib2FyZFwiXS5yZWdpc3RlcignQWNjb3JkaW9uJywge1xuICAgICAgICAnRU5URVInOiAndG9nZ2xlJyxcbiAgICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfVVAnOiAncHJldmlvdXMnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIGJ5IGFuaW1hdGluZyB0aGUgcHJlc2V0IGFjdGl2ZSBwYW5lKHMpLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICAgIHRoaXMuJHRhYnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1hY2NvcmRpb24taXRlbV0nKTtcblxuICAgICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uIChpZHgsIGVsKSB7XG4gICAgICAgIHZhciAkZWwgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGVsKSxcbiAgICAgICAgICAgICRjb250ZW50ID0gJGVsLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKSxcbiAgICAgICAgICAgIGlkID0gJGNvbnRlbnRbMF0uaWQgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcIkdldFlvRGlnaXRzXCJdKSg2LCAnYWNjb3JkaW9uJyksXG4gICAgICAgICAgICBsaW5rSWQgPSBlbC5pZCB8fCBpZCArICctbGFiZWwnO1xuXG4gICAgICAgICRlbC5maW5kKCdhOmZpcnN0JykuYXR0cih7XG4gICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBpZCxcbiAgICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAgICdpZCc6IGxpbmtJZCxcbiAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGNvbnRlbnQuYXR0cih7ICdyb2xlJzogJ3RhYnBhbmVsJywgJ2FyaWEtbGFiZWxsZWRieSc6IGxpbmtJZCwgJ2FyaWEtaGlkZGVuJzogdHJ1ZSwgJ2lkJzogaWQgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciAkaW5pdEFjdGl2ZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIHRoaXMuZmlyc3RUaW1lSW5pdCA9IHRydWU7XG4gICAgICBpZiAoJGluaXRBY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZG93bigkaW5pdEFjdGl2ZSwgdGhpcy5maXJzdFRpbWVJbml0KTtcbiAgICAgICAgdGhpcy5maXJzdFRpbWVJbml0ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NoZWNrRGVlcExpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhbmNob3IgPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgICAgLy9uZWVkIGEgaGFzaCBhbmQgYSByZWxldmFudCBhbmNob3IgaW4gdGhpcyB0YWJzZXRcbiAgICAgICAgaWYgKGFuY2hvci5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgJGxpbmsgPSBfdGhpczMuJGVsZW1lbnQuZmluZCgnW2hyZWYkPVwiJyArIGFuY2hvciArICdcIl0nKSxcbiAgICAgICAgICAgICAgJGFuY2hvciA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoYW5jaG9yKTtcblxuICAgICAgICAgIGlmICgkbGluay5sZW5ndGggJiYgJGFuY2hvcikge1xuICAgICAgICAgICAgaWYgKCEkbGluay5wYXJlbnQoJ1tkYXRhLWFjY29yZGlvbi1pdGVtXScpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICAgICAgICBfdGhpczMuZG93bigkYW5jaG9yLCBfdGhpczMuZmlyc3RUaW1lSW5pdCk7XG4gICAgICAgICAgICAgIF90aGlzMy5maXJzdFRpbWVJbml0ID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL3JvbGwgdXAgYSBsaXR0bGUgdG8gc2hvdyB0aGUgdGl0bGVzXG4gICAgICAgICAgICBpZiAoX3RoaXMzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIF90aGlzID0gX3RoaXMzO1xuICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykubG9hZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IF90aGlzLiRlbGVtZW50Lm9mZnNldCgpO1xuICAgICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBvZmZzZXQudG9wIH0sIF90aGlzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2VEZWxheSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB6cGx1Z2luIGhhcyBkZWVwbGlua2VkIGF0IHBhZ2Vsb2FkXG4gICAgICAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbiNkZWVwbGlua1xuICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX3RoaXMzLiRlbGVtZW50LnRyaWdnZXIoJ2RlZXBsaW5rLnpmLmFjY29yZGlvbicsIFskbGluaywgJGFuY2hvcl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy91c2UgYnJvd3NlciB0byBvcGVuIGEgdGFiLCBpZiBpdCBleGlzdHMgaW4gdGhpcyB0YWJzZXRcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgdGhpcy5fY2hlY2tEZWVwTGluaygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIGFjY29yZGlvbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJHRhYnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWxlbSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyk7XG4gICAgICAgIHZhciAkdGFiQ29udGVudCA9ICRlbGVtLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgICAgaWYgKCR0YWJDb250ZW50Lmxlbmd0aCkge1xuICAgICAgICAgICRlbGVtLmNoaWxkcmVuKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb24ga2V5ZG93bi56Zi5hY2NvcmRpb24nKS5vbignY2xpY2suemYuYWNjb3JkaW9uJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgICAgfSkub24oJ2tleWRvd24uemYuYWNjb3JkaW9uJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJLZXlib2FyZFwiXS5oYW5kbGVLZXkoZSwgJ0FjY29yZGlvbicsIHtcbiAgICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCR0YWJDb250ZW50KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciAkYSA9ICRlbGVtLm5leHQoKS5maW5kKCdhJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQpIHtcbiAgICAgICAgICAgICAgICAgICRhLnRyaWdnZXIoJ2NsaWNrLnpmLmFjY29yZGlvbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5wcmV2KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgICAkYS50cmlnZ2VyKCdjbGljay56Zi5hY2NvcmRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgc2VsZWN0ZWQgY29udGVudCBwYW5lJ3Mgb3Blbi9jbG9zZSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIGpRdWVyeSBvYmplY3Qgb2YgdGhlIHBhbmUgdG8gdG9nZ2xlIChgLmFjY29yZGlvbi1jb250ZW50YCkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZSgkdGFyZ2V0KSB7XG4gICAgICBpZiAoJHRhcmdldC5jbG9zZXN0KCdbZGF0YS1hY2NvcmRpb25dJykuaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgICAgICBjb25zb2xlLmluZm8oJ0Nhbm5vdCB0b2dnbGUgYW4gYWNjb3JkaW9uIHRoYXQgaXMgZGlzYWJsZWQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICgkdGFyZ2V0LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICB0aGlzLnVwKCR0YXJnZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgfVxuICAgICAgLy9laXRoZXIgcmVwbGFjZSBvciB1cGRhdGUgYnJvd3NlciBoaXN0b3J5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIHZhciBhbmNob3IgPSAkdGFyZ2V0LnByZXYoJ2EnKS5hdHRyKCdocmVmJyk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGRhdGVIaXN0b3J5KSB7XG4gICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBhbmNob3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBhY2NvcmRpb24gdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHBhbmUgdG8gb3BlbiAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmlyc3RUaW1lIC0gZmxhZyB0byBkZXRlcm1pbmUgaWYgcmVmbG93IHNob3VsZCBoYXBwZW4uXG4gICAgICogQGZpcmVzIEFjY29yZGlvbiNkb3duXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rvd24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb3duKCR0YXJnZXQsIGZpcnN0VGltZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIC8qKlxuICAgICAgICogY2hlY2tpbmcgZmlyc3RUaW1lIGFsbG93cyBmb3IgaW5pdGlhbCByZW5kZXIgb2YgdGhlIGFjY29yZGlvblxuICAgICAgICogdG8gcmVuZGVyIHByZXNldCBpcy1hY3RpdmUgcGFuZXMuXG4gICAgICAgKi9cbiAgICAgIGlmICgkdGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWFjY29yZGlvbl0nKS5pcygnW2Rpc2FibGVkXScpICYmICFmaXJzdFRpbWUpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdDYW5ub3QgY2FsbCBkb3duIG9uIGFuIGFjY29yZGlvbiB0aGF0IGlzIGRpc2FibGVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkdGFyZ2V0LmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpLnBhcmVudCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuYWRkQmFjaygpLnBhcmVudCgpLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQgJiYgIWZpcnN0VGltZSkge1xuICAgICAgICB2YXIgJGN1cnJlbnRBY3RpdmUgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgICAgICBpZiAoJGN1cnJlbnRBY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy51cCgkY3VycmVudEFjdGl2ZS5ub3QoJHRhcmdldCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQuc2xpZGVEb3duKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBvcGVuaW5nLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI2Rvd25cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzNC4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyAkdGFyZ2V0LmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpKS5hdHRyKHtcbiAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlLFxuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHRhYiB0byBjbG9zZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgICAqIEBmaXJlcyBBY2NvcmRpb24jdXBcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cCgkdGFyZ2V0KSB7XG4gICAgICBpZiAoJHRhcmdldC5jbG9zZXN0KCdbZGF0YS1hY2NvcmRpb25dJykuaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgICAgICBjb25zb2xlLmluZm8oJ0Nhbm5vdCBjYWxsIHVwIG9uIGFuIGFjY29yZGlvbiB0aGF0IGlzIGRpc2FibGVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciAkYXVudHMgPSAkdGFyZ2V0LnBhcmVudCgpLnNpYmxpbmdzKCksXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd0FsbENsb3NlZCAmJiAhJGF1bnRzLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSB8fCAhJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI3VwXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cC56Zi5hY2NvcmRpb24nLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG5cbiAgICAgICR0YXJnZXQuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgJHRhcmdldC5hdHRyKCdhcmlhLWxhYmVsbGVkYnknKSkuYXR0cih7XG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICAgKiBAZmlyZXMgQWNjb3JkaW9uI2Rlc3Ryb3llZFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10YWItY29udGVudF0nKS5zdG9wKHRydWUpLnNsaWRlVXAoMCkuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdhJykub2ZmKCcuemYuYWNjb3JkaW9uJyk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYoJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFjY29yZGlvbjtcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiUGx1Z2luXCJdKTtcblxuQWNjb3JkaW9uLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gYW5pbWF0ZSB0aGUgb3BlbmluZyBvZiBhbiBhY2NvcmRpb24gcGFuZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAyNTBcbiAgICovXG4gIHNsaWRlU3BlZWQ6IDI1MCxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlFeHBhbmQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBjbG9zZSBhbGwgcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbGxvd0FsbENsb3NlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBwYW5lIHNwZWNpZmllZCBieSBoYXNoIGFuY2hvclxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBZGp1c3QgdGhlIGRlZXAgbGluayBzY3JvbGwgdG8gbWFrZSBzdXJlIHRoZSB0b3Agb2YgdGhlIGFjY29yZGlvbiBwYW5lbCBpcyB2aXNpYmxlXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWVwTGlua1NtdWRnZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFuaW1hdGlvbiB0aW1lIChtcykgZm9yIHRoZSBkZWVwIGxpbmsgYWRqdXN0bWVudFxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDMwMFxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2VEZWxheTogMzAwLFxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGJyb3dzZXIgaGlzdG9yeSB3aXRoIHRoZSBvcGVuIGFjY29yZGlvblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdXBkYXRlSGlzdG9yeTogZmFsc2Vcbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7S2V5Ym9hcmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLktleWJvYXJkfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDgwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgxKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtGb3VuZGF0aW9uOiB3aW5kb3cuRm91bmRhdGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9hY2NvcmRpb25NZW51X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fYWNjb3JkaW9uTWVudV9fW1wiYVwiIC8qIEFjY29yZGlvbk1lbnUgKi9dLCAnQWNjb3JkaW9uTWVudScpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7UGx1Z2luOiB3aW5kb3cuRm91bmRhdGlvbi5QbHVnaW59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7cnRsOiB3aW5kb3cuRm91bmRhdGlvbi5ydGwsIEdldFlvRGlnaXRzOiB3aW5kb3cuRm91bmRhdGlvbi5HZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZDogd2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA0NTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEFjY29yZGlvbk1lbnU7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fXyk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG4vKipcbiAqIEFjY29yZGlvbk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvbk1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubmVzdFxuICovXG5cbnZhciBBY2NvcmRpb25NZW51ID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKEFjY29yZGlvbk1lbnUsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIEFjY29yZGlvbk1lbnUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY29yZGlvbk1lbnUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChBY2NvcmRpb25NZW51Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQWNjb3JkaW9uTWVudSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFjY29yZGlvbk1lbnUsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgQWNjb3JkaW9uTWVudVxuICAgICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbiBtZW51LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIEFjY29yZGlvbk1lbnUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0FjY29yZGlvbk1lbnUnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0ucmVnaXN0ZXIoJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAgICdFTlRFUic6ICd0b2dnbGUnLFxuICAgICAgICAnU1BBQ0UnOiAndG9nZ2xlJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ29wZW4nLFxuICAgICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICdkb3duJyxcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAnY2xvc2UnLFxuICAgICAgICAnRVNDQVBFJzogJ2Nsb3NlQWxsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjY29yZGlvbiBtZW51IGJ5IGhpZGluZyBhbGwgbmVzdGVkIG1lbnVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X19bXCJOZXN0XCJdLkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykubm90KCcuaXMtYWN0aXZlJykuc2xpZGVVcCgwKTsgLy8uZmluZCgnYScpLmNzcygncGFkZGluZy1sZWZ0JywgJzFyZW0nKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RyZWUnLFxuICAgICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiB0aGlzLm9wdGlvbnMubXVsdGlPcGVuXG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kbWVudUxpbmtzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgICB0aGlzLiRtZW51TGlua3MuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsaW5rSWQgPSB0aGlzLmlkIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJHZXRZb0RpZ2l0c1wiXSkoNiwgJ2FjYy1tZW51LWxpbmsnKSxcbiAgICAgICAgICAgICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgICRzdWIgPSAkZWxlbS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKSxcbiAgICAgICAgICAgIHN1YklkID0gJHN1YlswXS5pZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiR2V0WW9EaWdpdHNcIl0pKDYsICdhY2MtbWVudScpLFxuICAgICAgICAgICAgaXNBY3RpdmUgPSAkc3ViLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICAgJGVsZW0uYWRkQ2xhc3MoJ2hhcy1zdWJtZW51LXRvZ2dsZScpO1xuICAgICAgICAgICRlbGVtLmNoaWxkcmVuKCdhJykuYWZ0ZXIoJzxidXR0b24gaWQ9XCInICsgbGlua0lkICsgJ1wiIGNsYXNzPVwic3VibWVudS10b2dnbGVcIiBhcmlhLWNvbnRyb2xzPVwiJyArIHN1YklkICsgJ1wiIGFyaWEtZXhwYW5kZWQ9XCInICsgaXNBY3RpdmUgKyAnXCIgdGl0bGU9XCInICsgX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlVGV4dCArICdcIj48c3BhbiBjbGFzcz1cInN1Ym1lbnUtdG9nZ2xlLXRleHRcIj4nICsgX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlVGV4dCArICc8L3NwYW4+PC9idXR0b24+Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW0uYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1jb250cm9scyc6IHN1YklkLFxuICAgICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBpc0FjdGl2ZSxcbiAgICAgICAgICAgICdpZCc6IGxpbmtJZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgICRzdWIuYXR0cih7XG4gICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxpbmtJZCxcbiAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICAgJ3JvbGUnOiAnZ3JvdXAnLFxuICAgICAgICAgICdpZCc6IHN1YklkXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpJykuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RyZWVpdGVtJ1xuICAgICAgfSk7XG4gICAgICB2YXIgaW5pdFBhbmVzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJyk7XG4gICAgICBpZiAoaW5pdFBhbmVzLmxlbmd0aCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpbml0UGFuZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuZG93bihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIG1lbnUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkc3VibWVudSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyk7XG5cbiAgICAgICAgaWYgKCRzdWJtZW51Lmxlbmd0aCkge1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGUpIHtcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuY2hpbGRyZW4oJy5zdWJtZW51LXRvZ2dsZScpLm9mZignY2xpY2suemYuYWNjb3JkaW9uTWVudScpLm9uKCdjbGljay56Zi5hY2NvcmRpb25NZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCRzdWJtZW51KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmNoaWxkcmVuKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb25NZW51Jykub24oJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkc3VibWVudSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdrZXlkb3duLnpmLmFjY29yZGlvbm1lbnUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLFxuICAgICAgICAgICAgJGVsZW1lbnRzID0gJGVsZW1lbnQucGFyZW50KCd1bCcpLmNoaWxkcmVuKCdsaScpLFxuICAgICAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAgICAgJG5leHRFbGVtZW50LFxuICAgICAgICAgICAgJHRhcmdldCA9ICRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaSAtIDEpKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1pbihpICsgMSwgJGVsZW1lbnRzLmxlbmd0aCAtIDEpKS5maW5kKCdhJykuZmlyc3QoKTtcblxuICAgICAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdOnZpc2libGUnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gaGFzIG9wZW4gc3ViIG1lbnVcbiAgICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmlzKCc6Zmlyc3QtY2hpbGQnKSkge1xuICAgICAgICAgICAgICAvLyBpcyBmaXJzdCBlbGVtZW50IG9mIHN1YiBtZW51XG4gICAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHByZXZFbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBpZiBwcmV2aW91cyBlbGVtZW50IGhhcyBvcGVuIHN1YiBtZW51XG4gICAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRwcmV2RWxlbWVudC5wYXJlbnRzKCdsaScpLmZpbmQoJ2xpOmxhc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmlzKCc6bGFzdC1jaGlsZCcpKSB7XG4gICAgICAgICAgICAgIC8vIGlzIGxhc3QgZWxlbWVudCBvZiBzdWIgbWVudVxuICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkubmV4dCgnbGknKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLmhhbmRsZUtleShlLCAnQWNjb3JkaW9uTWVudScsIHtcbiAgICAgICAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICAgIF90aGlzLmRvd24oJHRhcmdldCk7XG4gICAgICAgICAgICAgICR0YXJnZXQuZmluZCgnbGknKS5maXJzdCgpLmZpbmQoJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCR0YXJnZXQubGVuZ3RoICYmICEkdGFyZ2V0LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgLy8gY2xvc2UgYWN0aXZlIHN1YiBvZiB0aGlzIGl0ZW1cbiAgICAgICAgICAgICAgX3RoaXMudXAoJHRhcmdldCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRlbGVtZW50LnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gY2xvc2UgY3VycmVudGx5IG9wZW4gc3ViXG4gICAgICAgICAgICAgIF90aGlzLnVwKCRlbGVtZW50LnBhcmVudCgnW2RhdGEtc3VibWVudV0nKSk7XG4gICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbG9zZUFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuaGlkZUFsbCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24gKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7IC8vLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIGFsbCBwYW5lcyBvZiB0aGUgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaGlkZUFsbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVBbGwoKSB7XG4gICAgICB0aGlzLnVwKHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc3VibWVudV0nKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYWxsIHBhbmVzIG9mIHRoZSBtZW51LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzaG93QWxsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0FsbCgpIHtcbiAgICAgIHRoaXMuZG93bih0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2Ugc3RhdGUgb2YgYSBzdWJtZW51LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gdGhlIHN1Ym1lbnUgdG8gdG9nZ2xlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZSgkdGFyZ2V0KSB7XG4gICAgICBpZiAoISR0YXJnZXQuaXMoJzphbmltYXRlZCcpKSB7XG4gICAgICAgIGlmICghJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgdGhpcy51cCgkdGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBTdWItbWVudSB0byBvcGVuLlxuICAgICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rvd25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZG93bicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvd24oJHRhcmdldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlPcGVuKSB7XG4gICAgICAgIHRoaXMudXAodGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJykubm90KCR0YXJnZXQucGFyZW50c1VudGlsKHRoaXMuJGVsZW1lbnQpLmFkZCgkdGFyZ2V0KSkpO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0LmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogZmFsc2UgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VibWVudVRvZ2dsZSkge1xuICAgICAgICAkdGFyZ2V0LnByZXYoJy5zdWJtZW51LXRvZ2dsZScpLmF0dHIoeyAnYXJpYS1leHBhbmRlZCc6IHRydWUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkdGFyZ2V0LnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoeyAnYXJpYS1leHBhbmRlZCc6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQuc2xpZGVEb3duKF90aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgICAqIEBldmVudCBBY2NvcmRpb25NZW51I2Rvd25cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLiBBbGwgc3ViLW1lbnVzIGluc2lkZSB0aGUgdGFyZ2V0IHdpbGwgYmUgY2xvc2VkIGFzIHdlbGwuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBTdWItbWVudSB0byBjbG9zZS5cbiAgICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSN1cFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1cCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwKCR0YXJnZXQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtZW51IGlzIGRvbmUgY29sbGFwc2luZyB1cC5cbiAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbk1lbnUjdXBcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwLnpmLmFjY29yZGlvbk1lbnUnLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciAkbWVudXMgPSAkdGFyZ2V0LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVVcCgwKS5hZGRCYWNrKCkuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICRtZW51cy5wcmV2KCcuc3VibWVudS10b2dnbGUnKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJG1lbnVzLnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYWNjb3JkaW9uIG1lbnUuXG4gICAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZGVzdHJveWVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVEb3duKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnYScpLm9mZignY2xpY2suemYuYWNjb3JkaW9uTWVudScpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGUpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCcuaGFzLXN1Ym1lbnUtdG9nZ2xlJykucmVtb3ZlQ2xhc3MoJ2hhcy1zdWJtZW51LXRvZ2dsZScpO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJy5zdWJtZW51LXRvZ2dsZScpLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X19bXCJOZXN0XCJdLkJ1cm4odGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBY2NvcmRpb25NZW51O1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJQbHVnaW5cIl0pO1xuXG5BY2NvcmRpb25NZW51LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gYW5pbWF0ZSB0aGUgb3BlbmluZyBvZiBhIHN1Ym1lbnUgaW4gbXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMjUwXG4gICAqL1xuICBzbGlkZVNwZWVkOiAyNTAsXG4gIC8qKlxuICAgKiBBZGRzIGEgc2VwYXJhdGUgc3VibWVudSB0b2dnbGUgYnV0dG9uLiBUaGlzIGFsbG93cyB0aGUgcGFyZW50IGl0ZW0gdG8gaGF2ZSBhIGxpbmsuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgc3VibWVudVRvZ2dsZTogZmFsc2UsXG4gIC8qKlxuICAgKiBUaGUgdGV4dCB1c2VkIGZvciB0aGUgc3VibWVudSB0b2dnbGUgaWYgZW5hYmxlZC4gVGhpcyBpcyB1c2VkIGZvciBzY3JlZW4gcmVhZGVycyBvbmx5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHN1Ym1lbnVUb2dnbGVUZXh0OiAnVG9nZ2xlIG1lbnUnLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBtdWx0aU9wZW46IHRydWVcbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7S2V5Ym9hcmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLktleWJvYXJkfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDgxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtOZXN0OiB3aW5kb3cuRm91bmRhdGlvbi5OZXN0fTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOTApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0ZvdW5kYXRpb246IHdpbmRvdy5Gb3VuZGF0aW9ufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge1BsdWdpbjogd2luZG93LkZvdW5kYXRpb24uUGx1Z2lufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3Jlc3BvbnNpdmVBY2NvcmRpb25UYWJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcmVzcG9uc2l2ZUFjY29yZGlvblRhYnNfX1tcImFcIiAvKiBSZXNwb25zaXZlQWNjb3JkaW9uVGFicyAqL10sICdSZXNwb25zaXZlQWNjb3JkaW9uVGFicycpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7cnRsOiB3aW5kb3cuRm91bmRhdGlvbi5ydGwsIEdldFlvRGlnaXRzOiB3aW5kb3cuRm91bmRhdGlvbi5HZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZDogd2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1NDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX2FjY29yZGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX2FjY29yZGlvbl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX2FjY29yZGlvbl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdGFic19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Nyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3RhYnNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl90YWJzX18pO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG5cbi8vIFRoZSBwbHVnaW4gbWF0Y2hlcyB0aGUgcGx1Z2luIGNsYXNzZXMgd2l0aCB0aGVzZSBwbHVnaW4gaW5zdGFuY2VzLlxudmFyIE1lbnVQbHVnaW5zID0ge1xuICB0YWJzOiB7XG4gICAgY3NzQ2xhc3M6ICd0YWJzJyxcbiAgICBwbHVnaW46IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl90YWJzX19bXCJUYWJzXCJdXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uJyxcbiAgICBwbHVnaW46IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9hY2NvcmRpb25fX1tcIkFjY29yZGlvblwiXVxuICB9XG59O1xuXG4vKipcbiAqIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlQWNjb3JkaW9uVGFic1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLmFjY29yZGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udGFic1xuICovXG5cbnZhciBSZXNwb25zaXZlQWNjb3JkaW9uVGFicyA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhSZXNwb25zaXZlQWNjb3JkaW9uVGFicywgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZXNwb25zaXZlQWNjb3JkaW9uVGFicykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgcmVzcG9uc2l2ZSBhY2NvcmRpb24gdGFicy5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBSZXNwb25zaXZlQWNjb3JkaW9uVGFic1xuICAgICAqIEBmaXJlcyBSZXNwb25zaXZlQWNjb3JkaW9uVGFicyNpbml0XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBSZXNwb25zaXZlIEFjY29yZGlvbiBUYWJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGVsZW1lbnQpO1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMucnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtYWNjb3JkaW9uLXRhYnMnKTtcbiAgICAgIHRoaXMuY3VycmVudE1xID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG51bGw7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdSZXNwb25zaXZlQWNjb3JkaW9uVGFicyc7IC8vIGllOSBiYWNrIGNvbXBhdFxuICAgICAgaWYgKCF0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcsIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJHZXRZb0RpZ2l0c1wiXSkoNiwgJ3Jlc3BvbnNpdmVhY2NvcmRpb250YWJzJykpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIE1lbnUgYnkgcGFyc2luZyB0aGUgY2xhc3NlcyBmcm9tIHRoZSAnZGF0YS1yZXNwb25zaXZlLWFjY29yZGlvbi10YWJzJyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcIk1lZGlhUXVlcnlcIl0uX2luaXQoKTtcblxuICAgICAgLy8gVGhlIGZpcnN0IHRpbWUgYW4gSW50ZXJjaGFuZ2UgcGx1Z2luIGlzIGluaXRpYWxpemVkLCB0aGlzLnJ1bGVzIGlzIGNvbnZlcnRlZCBmcm9tIGEgc3RyaW5nIG9mIFwiY2xhc3Nlc1wiIHRvIGFuIG9iamVjdCBvZiBydWxlc1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgcnVsZXNUcmVlID0ge307XG5cbiAgICAgICAgLy8gUGFyc2UgcnVsZXMgZnJvbSBcImNsYXNzZXNcIiBwdWxsZWQgZnJvbSBkYXRhIGF0dHJpYnV0ZVxuICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLnJ1bGVzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5IHJ1bGUgZm91bmRcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc3BsaXQoJy0nKTtcbiAgICAgICAgICB2YXIgcnVsZVNpemUgPSBydWxlLmxlbmd0aCA+IDEgPyBydWxlWzBdIDogJ3NtYWxsJztcbiAgICAgICAgICB2YXIgcnVsZVBsdWdpbiA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMV0gOiBydWxlWzBdO1xuXG4gICAgICAgICAgaWYgKE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dICE9PSBudWxsKSB7XG4gICAgICAgICAgICBydWxlc1RyZWVbcnVsZVNpemVdID0gTWVudVBsdWdpbnNbcnVsZVBsdWdpbl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzVHJlZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZ2V0QWxsT3B0aW9ucygpO1xuXG4gICAgICBpZiAoIV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuaXNFbXB0eU9iamVjdCh0aGlzLnJ1bGVzKSkge1xuICAgICAgICB0aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXRBbGxPcHRpb25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEFsbE9wdGlvbnMoKSB7XG4gICAgICAvL2dldCBhbGwgZGVmYXVsdHMgYW5kIG9wdGlvbnNcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBfdGhpcy5hbGxPcHRpb25zID0ge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gTWVudVBsdWdpbnMpIHtcbiAgICAgICAgaWYgKE1lbnVQbHVnaW5zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICB2YXIgb2JqID0gTWVudVBsdWdpbnNba2V5XTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGR1bW15UGx1Z2luID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnPHVsPjwvdWw+Jyk7XG4gICAgICAgICAgICB2YXIgdG1wUGx1Z2luID0gbmV3IG9iai5wbHVnaW4oZHVtbXlQbHVnaW4sIF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5S2V5IGluIHRtcFBsdWdpbi5vcHRpb25zKSB7XG4gICAgICAgICAgICAgIGlmICh0bXBQbHVnaW4ub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXlLZXkpICYmIGtleUtleSAhPT0gJ3pmUGx1Z2luJykge1xuICAgICAgICAgICAgICAgIHZhciBvYmpPYmogPSB0bXBQbHVnaW4ub3B0aW9uc1trZXlLZXldO1xuICAgICAgICAgICAgICAgIF90aGlzLmFsbE9wdGlvbnNba2V5S2V5XSA9IG9iak9iajtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG1wUGx1Z2luLmRlc3Ryb3koKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgTWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGUgY3VycmVudCBzY3JlZW4gd2lkdGggYWdhaW5zdCBhdmFpbGFibGUgbWVkaWEgcXVlcmllcy4gSWYgdGhlIG1lZGlhIHF1ZXJ5IGhhcyBjaGFuZ2VkLCBhbmQgdGhlIHBsdWdpbiBuZWVkZWQgaGFzIGNoYW5nZWQsIHRoZSBwbHVnaW5zIHdpbGwgc3dhcCBvdXQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2NoZWNrTWVkaWFRdWVyaWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NoZWNrTWVkaWFRdWVyaWVzKCkge1xuICAgICAgdmFyIG1hdGNoZWRNcSxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlIGFuZCBmaW5kIHRoZSBsYXN0IG1hdGNoaW5nIHJ1bGVcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZWFjaCh0aGlzLnJ1bGVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLmF0TGVhc3Qoa2V5KSkge1xuICAgICAgICAgIG1hdGNoZWRNcSA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIE5vIG1hdGNoPyBObyBkaWNlXG4gICAgICBpZiAoIW1hdGNoZWRNcSkgcmV0dXJuO1xuXG4gICAgICAvLyBQbHVnaW4gYWxyZWFkeSBpbml0aWFsaXplZD8gV2UgZ29vZFxuICAgICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbiBpbnN0YW5jZW9mIHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4pIHJldHVybjtcblxuICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHBsdWdpbi1zcGVjaWZpYyBDU1MgY2xhc3Nlc1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5lYWNoKE1lbnVQbHVnaW5zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh2YWx1ZS5jc3NDbGFzcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQWRkIHRoZSBDU1MgY2xhc3MgZm9yIHRoZSBuZXcgcGx1Z2luXG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5jc3NDbGFzcyk7XG5cbiAgICAgIC8vIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgbmV3IHBsdWdpblxuICAgICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbikge1xuICAgICAgICAvL2Rvbid0IGtub3cgd2h5IGJ1dCBvbiBuZXN0ZWQgZWxlbWVudHMgZGF0YSB6ZlBsdWdpbiBnZXQncyBsb3N0XG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50UGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykgJiYgdGhpcy5zdG9yZXpmRGF0YSkgdGhpcy5jdXJyZW50UGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJywgdGhpcy5zdG9yZXpmRGF0YSk7XG4gICAgICAgIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9oYW5kbGVNYXJrdXAodGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcbiAgICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG5ldyB0aGlzLnJ1bGVzW21hdGNoZWRNcV0ucGx1Z2luKHRoaXMuJGVsZW1lbnQsIHt9KTtcbiAgICAgIHRoaXMuc3RvcmV6ZkRhdGEgPSB0aGlzLmN1cnJlbnRQbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfaGFuZGxlTWFya3VwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZU1hcmt1cCh0b1NldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBmcm9tU3RyaW5nID0gJ2FjY29yZGlvbic7XG4gICAgICB2YXIgJHBhbmVscyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXRhYnMtY29udGVudD0nICsgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpICsgJ10nKTtcbiAgICAgIGlmICgkcGFuZWxzLmxlbmd0aCkgZnJvbVN0cmluZyA9ICd0YWJzJztcbiAgICAgIGlmIChmcm9tU3RyaW5nID09PSB0b1NldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9O1xuXG4gICAgICB2YXIgdGFic1RpdGxlID0gX3RoaXMuYWxsT3B0aW9ucy5saW5rQ2xhc3MgPyBfdGhpcy5hbGxPcHRpb25zLmxpbmtDbGFzcyA6ICd0YWJzLXRpdGxlJztcbiAgICAgIHZhciB0YWJzUGFuZWwgPSBfdGhpcy5hbGxPcHRpb25zLnBhbmVsQ2xhc3MgPyBfdGhpcy5hbGxPcHRpb25zLnBhbmVsQ2xhc3MgOiAndGFicy1wYW5lbCc7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQXR0cigncm9sZScpO1xuICAgICAgdmFyICRsaUhlYWRzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLicgKyB0YWJzVGl0bGUgKyAnLFtkYXRhLWFjY29yZGlvbi1pdGVtXScpLnJlbW92ZUNsYXNzKHRhYnNUaXRsZSkucmVtb3ZlQ2xhc3MoJ2FjY29yZGlvbi1pdGVtJykucmVtb3ZlQXR0cignZGF0YS1hY2NvcmRpb24taXRlbScpO1xuICAgICAgdmFyICRsaUhlYWRzQSA9ICRsaUhlYWRzLmNoaWxkcmVuKCdhJykucmVtb3ZlQ2xhc3MoJ2FjY29yZGlvbi10aXRsZScpO1xuXG4gICAgICBpZiAoZnJvbVN0cmluZyA9PT0gJ3RhYnMnKSB7XG4gICAgICAgICRwYW5lbHMgPSAkcGFuZWxzLmNoaWxkcmVuKCcuJyArIHRhYnNQYW5lbCkucmVtb3ZlQ2xhc3ModGFic1BhbmVsKS5yZW1vdmVBdHRyKCdyb2xlJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgICAgJHBhbmVscy5jaGlsZHJlbignYScpLnJlbW92ZUF0dHIoJ3JvbGUnKS5yZW1vdmVBdHRyKCdhcmlhLWNvbnRyb2xzJykucmVtb3ZlQXR0cignYXJpYS1zZWxlY3RlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHBhbmVscyA9ICRsaUhlYWRzLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKS5yZW1vdmVDbGFzcygnYWNjb3JkaW9uLWNvbnRlbnQnKTtcbiAgICAgIH07XG5cbiAgICAgICRwYW5lbHMuY3NzKHsgZGlzcGxheTogJycsIHZpc2liaWxpdHk6ICcnIH0pO1xuICAgICAgJGxpSGVhZHMuY3NzKHsgZGlzcGxheTogJycsIHZpc2liaWxpdHk6ICcnIH0pO1xuICAgICAgaWYgKHRvU2V0ID09PSAnYWNjb3JkaW9uJykge1xuICAgICAgICAkcGFuZWxzLmVhY2goZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHZhbHVlKS5hcHBlbmRUbygkbGlIZWFkcy5nZXQoa2V5KSkuYWRkQ2xhc3MoJ2FjY29yZGlvbi1jb250ZW50JykuYXR0cignZGF0YS10YWItY29udGVudCcsICcnKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJykuY3NzKHsgaGVpZ2h0OiAnJyB9KTtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS10YWJzLWNvbnRlbnQ9JyArIF90aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykgKyAnXScpLmFmdGVyKCc8ZGl2IGlkPVwidGFicy1wbGFjZWhvbGRlci0nICsgX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSArICdcIj48L2Rpdj4nKS5kZXRhY2goKTtcbiAgICAgICAgICAkbGlIZWFkcy5hZGRDbGFzcygnYWNjb3JkaW9uLWl0ZW0nKS5hdHRyKCdkYXRhLWFjY29yZGlvbi1pdGVtJywgJycpO1xuICAgICAgICAgICRsaUhlYWRzQS5hZGRDbGFzcygnYWNjb3JkaW9uLXRpdGxlJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0b1NldCA9PT0gJ3RhYnMnKSB7XG4gICAgICAgIHZhciAkdGFic0NvbnRlbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS10YWJzLWNvbnRlbnQ9JyArIF90aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykgKyAnXScpO1xuICAgICAgICB2YXIgJHBsYWNlaG9sZGVyID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnI3RhYnMtcGxhY2Vob2xkZXItJyArIF90aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgICAgICBpZiAoJHBsYWNlaG9sZGVyLmxlbmd0aCkge1xuICAgICAgICAgICR0YWJzQ29udGVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJzxkaXYgY2xhc3M9XCJ0YWJzLWNvbnRlbnRcIj48L2Rpdj4nKS5pbnNlcnRBZnRlcigkcGxhY2Vob2xkZXIpLmF0dHIoJ2RhdGEtdGFicy1jb250ZW50JywgX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSk7XG4gICAgICAgICAgJHBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICR0YWJzQ29udGVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJzxkaXYgY2xhc3M9XCJ0YWJzLWNvbnRlbnRcIj48L2Rpdj4nKS5pbnNlcnRBZnRlcihfdGhpcy4kZWxlbWVudCkuYXR0cignZGF0YS10YWJzLWNvbnRlbnQnLCBfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICAgICAgfTtcbiAgICAgICAgJHBhbmVscy5lYWNoKGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHRlbXBWYWx1ZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodmFsdWUpLmFwcGVuZFRvKCR0YWJzQ29udGVudCkuYWRkQ2xhc3ModGFic1BhbmVsKTtcbiAgICAgICAgICB2YXIgaGFzaCA9ICRsaUhlYWRzQS5nZXQoa2V5KS5oYXNoLnNsaWNlKDEpO1xuICAgICAgICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodmFsdWUpLmF0dHIoJ2lkJykgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcIkdldFlvRGlnaXRzXCJdKSg2LCAnYWNjb3JkaW9uJyk7XG4gICAgICAgICAgaWYgKGhhc2ggIT09IGlkKSB7XG4gICAgICAgICAgICBpZiAoaGFzaCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh2YWx1ZSkuYXR0cignaWQnLCBoYXNoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGhhc2ggPSBpZDtcbiAgICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh2YWx1ZSkuYXR0cignaWQnLCBoYXNoKTtcbiAgICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgkbGlIZWFkc0EuZ2V0KGtleSkpLmF0dHIoJ2hyZWYnLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCRsaUhlYWRzQS5nZXQoa2V5KSkuYXR0cignaHJlZicpLnJlcGxhY2UoJyMnLCAnJykgKyAnIycgKyBoYXNoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgaXNBY3RpdmUgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCRsaUhlYWRzLmdldChrZXkpKS5oYXNDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICB0ZW1wVmFsdWUuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICAkbGlIZWFkcy5hZGRDbGFzcyh0YWJzVGl0bGUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgcGx1Z2luIG9uIHRoaXMgZWxlbWVudCwgYXMgd2VsbCBhcyB0aGUgd2luZG93IHJlc2l6ZSBoYW5kbGVyIHRoYXQgc3dpdGNoZXMgdGhlIHBsdWdpbnMgb3V0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbikgdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYoJy56Zi5SZXNwb25zaXZlQWNjb3JkaW9uVGFicycpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXNwb25zaXZlQWNjb3JkaW9uVGFicztcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiUGx1Z2luXCJdKTtcblxuUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMuZGVmYXVsdHMgPSB7fTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtNZWRpYVF1ZXJ5OiB3aW5kb3cuRm91bmRhdGlvbi5NZWRpYVF1ZXJ5fTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDcyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtBY2NvcmRpb246IHdpbmRvdy5Gb3VuZGF0aW9uLkFjY29yZGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA3Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7VGFiczogd2luZG93LkZvdW5kYXRpb24uVGFic307XG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4Mik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fZHJpbGxkb3duX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fZHJpbGxkb3duX19bXCJhXCIgLyogRHJpbGxkb3duICovXSwgJ0RyaWxsZG93bicpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7UGx1Z2luOiB3aW5kb3cuRm91bmRhdGlvbi5QbHVnaW59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7cnRsOiB3aW5kb3cuRm91bmRhdGlvbi5ydGwsIEdldFlvRGlnaXRzOiB3aW5kb3cuRm91bmRhdGlvbi5HZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZDogd2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA0Njpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIERyaWxsZG93bjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9uZXN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2JveF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2JveF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl9wbHVnaW5fXyk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogRHJpbGxkb3duIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcmlsbGRvd25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubmVzdFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqL1xuXG52YXIgRHJpbGxkb3duID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKERyaWxsZG93biwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gRHJpbGxkb3duKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcmlsbGRvd24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEcmlsbGRvd24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEcmlsbGRvd24pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcmlsbGRvd24sIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcmlsbGRvd24gbWVudS5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBEcmlsbGRvd25cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbiBtZW51LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIERyaWxsZG93bi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnRHJpbGxkb3duJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLnJlZ2lzdGVyKCdEcmlsbGRvd24nLCB7XG4gICAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAgICdBUlJPV19VUCc6ICd1cCcsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cycsXG4gICAgICAgICdFU0NBUEUnOiAnY2xvc2UnLFxuICAgICAgICAnVEFCJzogJ2Rvd24nLFxuICAgICAgICAnU0hJRlRfVEFCJzogJ3VwJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGRyaWxsZG93biBieSBjcmVhdGluZyBqUXVlcnkgY29sbGVjdGlvbnMgb2YgZWxlbWVudHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fW1wiTmVzdFwiXS5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsICdkcmlsbGRvd24nKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvQXBwbHlDbGFzcykge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdkcmlsbGRvd24nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndHJlZScsXG4gICAgICAgICdhcmlhLW11bHRpc2VsZWN0YWJsZSc6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHRoaXMuJHN1Ym1lbnVBbmNob3JzID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaS5pcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignYScpO1xuICAgICAgdGhpcy4kc3VibWVudXMgPSB0aGlzLiRzdWJtZW51QW5jaG9ycy5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuYXR0cigncm9sZScsICdncm91cCcpO1xuICAgICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLm5vdCgnLmpzLWRyaWxsZG93bi1iYWNrJykuYXR0cigncm9sZScsICd0cmVlaXRlbScpLmZpbmQoJ2EnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1tdXRhdGUnLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtZHJpbGxkb3duJykgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcIkdldFlvRGlnaXRzXCJdKSg2LCAnZHJpbGxkb3duJykpO1xuXG4gICAgICB0aGlzLl9wcmVwYXJlTWVudSgpO1xuICAgICAgdGhpcy5fcmVnaXN0ZXJFdmVudHMoKTtcblxuICAgICAgdGhpcy5fa2V5Ym9hcmRFdmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwcmVwYXJlcyBkcmlsbGRvd24gbWVudSBieSBzZXR0aW5nIGF0dHJpYnV0ZXMgdG8gbGlua3MgYW5kIGVsZW1lbnRzXG4gICAgICogc2V0cyBhIG1pbiBoZWlnaHQgdG8gcHJldmVudCBjb250ZW50IGp1bXBpbmdcbiAgICAgKiB3cmFwcyB0aGUgZWxlbWVudCBpZiBub3QgYWxyZWFkeSB3cmFwcGVkXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3ByZXBhcmVNZW51JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVNZW51KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIC8vIGlmKCF0aGlzLm9wdGlvbnMuaG9sZE9wZW4pe1xuICAgICAgLy8gICB0aGlzLl9tZW51TGlua0V2ZW50cygpO1xuICAgICAgLy8gfVxuICAgICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkbGluayA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyk7XG4gICAgICAgIHZhciAkc3ViID0gJGxpbmsucGFyZW50KCk7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnBhcmVudExpbmspIHtcbiAgICAgICAgICAkbGluay5jbG9uZSgpLnByZXBlbmRUbygkc3ViLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpKS53cmFwKCc8bGkgY2xhc3M9XCJpcy1zdWJtZW51LXBhcmVudC1pdGVtIGlzLXN1Ym1lbnUtaXRlbSBpcy1kcmlsbGRvd24tc3VibWVudS1pdGVtXCIgcm9sZT1cIm1lbnVpdGVtXCI+PC9saT4nKTtcbiAgICAgICAgfVxuICAgICAgICAkbGluay5kYXRhKCdzYXZlZEhyZWYnLCAkbGluay5hdHRyKCdocmVmJykpLnJlbW92ZUF0dHIoJ2hyZWYnKS5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgICAgICAkbGluay5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKS5hdHRyKHtcbiAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAgICd0YWJpbmRleCc6IDAsXG4gICAgICAgICAgJ3JvbGUnOiAnZ3JvdXAnXG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fZXZlbnRzKCRsaW5rKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kc3VibWVudXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkbWVudSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgICAkYmFjayA9ICRtZW51LmZpbmQoJy5qcy1kcmlsbGRvd24tYmFjaycpO1xuICAgICAgICBpZiAoISRiYWNrLmxlbmd0aCkge1xuICAgICAgICAgIHN3aXRjaCAoX3RoaXMub3B0aW9ucy5iYWNrQnV0dG9uUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgICAgICAgICAgJG1lbnUuYXBwZW5kKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICAgICAgICAkbWVudS5wcmVwZW5kKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuc3VwcG9ydGVkIGJhY2tCdXR0b25Qb3NpdGlvbiB2YWx1ZSAnXCIgKyBfdGhpcy5vcHRpb25zLmJhY2tCdXR0b25Qb3NpdGlvbiArIFwiJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX2JhY2soJG1lbnUpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJHN1Ym1lbnVzLmFkZENsYXNzKCdpbnZpc2libGUnKTtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgdGhpcy4kc3VibWVudXMuYWRkQ2xhc3MoJ2RyaWxsZG93bi1zdWJtZW51LWNvdmVyLXByZXZpb3VzJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNyZWF0ZSBhIHdyYXBwZXIgb24gZWxlbWVudCBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgaWYgKCF0aGlzLiRlbGVtZW50LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24nKSkge1xuICAgICAgICB0aGlzLiR3cmFwcGVyID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzLm9wdGlvbnMud3JhcHBlcikuYWRkQ2xhc3MoJ2lzLWRyaWxsZG93bicpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGVIZWlnaHQpIHRoaXMuJHdyYXBwZXIuYWRkQ2xhc3MoJ2FuaW1hdGUtaGVpZ2h0Jyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQud3JhcCh0aGlzLiR3cmFwcGVyKTtcbiAgICAgIH1cbiAgICAgIC8vIHNldCB3cmFwcGVyXG4gICAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgIHRoaXMuJHdyYXBwZXIuY3NzKHRoaXMuX2dldE1heERpbXMoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3Jlc2l6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNpemUoKSB7XG4gICAgICB0aGlzLiR3cmFwcGVyLmNzcyh7ICdtYXgtd2lkdGgnOiAnbm9uZScsICdtaW4taGVpZ2h0JzogJ25vbmUnIH0pO1xuICAgICAgLy8gX2dldE1heERpbXMgaGFzIHNpZGUgZWZmZWN0cyAoYm9vKSBidXQgY2FsbGluZyBpdCBzaG91bGQgdXBkYXRlIGFsbCBvdGhlciBuZWNlc3NhcnkgaGVpZ2h0cyAmIHdpZHRoc1xuICAgICAgdGhpcy4kd3JhcHBlci5jc3ModGhpcy5fZ2V0TWF4RGltcygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIGVsZW1lbnRzIGluIHRoZSBtZW51LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgbWVudSBpdGVtIHRvIGFkZCBoYW5kbGVycyB0by5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoJGVsZW0pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICRlbGVtLm9mZignY2xpY2suemYuZHJpbGxkb3duJykub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgJ2xpJykuaGFzQ2xhc3MoJ2lzLWRyaWxsZG93bi1zdWJtZW51LXBhcmVudCcpKSB7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZihlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0LmZpcnN0RWxlbWVudENoaWxkKXtcbiAgICAgICAgLy8gICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIH1cbiAgICAgICAgX3RoaXMuX3Nob3coJGVsZW0ucGFyZW50KCdsaScpKTtcblxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICAgICB2YXIgJGJvZHkgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdib2R5Jyk7XG4gICAgICAgICAgJGJvZHkub2ZmKCcuemYuZHJpbGxkb3duJykub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5faGlkZUFsbCgpO1xuICAgICAgICAgICAgJGJvZHkub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG1lbnUgZWxlbWVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVnaXN0ZXJFdmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNjcm9sbFRvcCkge1xuICAgICAgICB0aGlzLl9iaW5kSGFuZGxlciA9IHRoaXMuX3Njcm9sbFRvcC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdvcGVuLnpmLmRyaWxsZG93biBoaWRlLnpmLmRyaWxsZG93biBjbG9zZWQuemYuZHJpbGxkb3duJywgdGhpcy5fYmluZEhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5vbignbXV0YXRlbWUuemYudHJpZ2dlcicsIHRoaXMuX3Jlc2l6ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY3JvbGwgdG8gVG9wIG9mIEVsZW1lbnQgb3IgZGF0YS1zY3JvbGwtdG9wLWVsZW1lbnRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJpbGxkb3duI3Njcm9sbG1lXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zY3JvbGxUb3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2Nyb2xsVG9wKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciAkc2Nyb2xsVG9wRWxlbWVudCA9IF90aGlzLm9wdGlvbnMuc2Nyb2xsVG9wRWxlbWVudCAhPSAnJyA/IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoX3RoaXMub3B0aW9ucy5zY3JvbGxUb3BFbGVtZW50KSA6IF90aGlzLiRlbGVtZW50LFxuICAgICAgICAgIHNjcm9sbFBvcyA9IHBhcnNlSW50KCRzY3JvbGxUb3BFbGVtZW50Lm9mZnNldCgpLnRvcCArIF90aGlzLm9wdGlvbnMuc2Nyb2xsVG9wT2Zmc2V0LCAxMCk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdodG1sLCBib2R5Jykuc3RvcCh0cnVlKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBzY3JvbGxQb3MgfSwgX3RoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbiwgX3RoaXMub3B0aW9ucy5hbmltYXRpb25FYXNpbmcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAgKiBGaXJlcyBhZnRlciB0aGUgbWVudSBoYXMgc2Nyb2xsZWRcbiAgICAgICAgICAqIEBldmVudCBEcmlsbGRvd24jc2Nyb2xsbWVcbiAgICAgICAgICAqL1xuICAgICAgICBpZiAodGhpcyA9PT0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnaHRtbCcpWzBdKSBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzY3JvbGxtZS56Zi5kcmlsbGRvd24nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMga2V5ZG93biBldmVudCBsaXN0ZW5lciB0byBgbGlgJ3MgaW4gdGhlIG1lbnUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2tleWJvYXJkRXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2tleWJvYXJkRXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kbWVudUl0ZW1zLmFkZCh0aGlzLiRlbGVtZW50LmZpbmQoJy5qcy1kcmlsbGRvd24tYmFjayA+IGEsIC5pcy1zdWJtZW51LXBhcmVudC1pdGVtID4gYScpKS5vbigna2V5ZG93bi56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLFxuICAgICAgICAgICAgJGVsZW1lbnRzID0gJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKS5jaGlsZHJlbignYScpLFxuICAgICAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaSAtIDEpKTtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1pbihpICsgMSwgJGVsZW1lbnRzLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJLZXlib2FyZFwiXS5oYW5kbGVLZXkoZSwgJ0RyaWxsZG93bicsIHtcbiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbWVudC5wYXJlbnQoJ2xpJykpO1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJ0cmFuc2l0aW9uZW5kXCJdKSgkZWxlbWVudCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykuZmluZCgndWwgbGkgYScpLmZpbHRlcihfdGhpcy4kbWVudUl0ZW1zKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJ0cmFuc2l0aW9uZW5kXCJdKSgkZWxlbWVudCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIC8vIERvbid0IHRhcCBmb2N1cyBvbiBmaXJzdCBlbGVtZW50IGluIHJvb3QgdWxcbiAgICAgICAgICAgIHJldHVybiAhJGVsZW1lbnQuaXMoX3RoaXMuJGVsZW1lbnQuZmluZCgnPiBsaTpmaXJzdC1jaGlsZCA+IGEnKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIC8vIERvbid0IHRhcCBmb2N1cyBvbiBsYXN0IGVsZW1lbnQgaW4gcm9vdCB1bFxuICAgICAgICAgICAgcmV0dXJuICEkZWxlbWVudC5pcyhfdGhpcy4kZWxlbWVudC5maW5kKCc+IGxpOmxhc3QtY2hpbGQgPiBhJykpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIERvbid0IGNsb3NlIG9uIGVsZW1lbnQgaW4gcm9vdCB1bFxuICAgICAgICAgICAgaWYgKCEkZWxlbWVudC5pcyhfdGhpcy4kZWxlbWVudC5maW5kKCc+IGxpID4gYScpKSkge1xuICAgICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoKS5wYXJlbnQoKSk7XG4gICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgpLnBhcmVudCgpLnNpYmxpbmdzKCdhJykuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghJGVsZW1lbnQuaXMoX3RoaXMuJG1lbnVJdGVtcykpIHtcbiAgICAgICAgICAgICAgLy8gbm90IG1lbnUgaXRlbSBtZWFucyBiYWNrIGJ1dHRvblxuICAgICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpKTtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5vbmUoX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcInRyYW5zaXRpb25lbmRcIl0pKCRlbGVtZW50KSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbWVudC5wYXJlbnQoJ2xpJykpO1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJ0cmFuc2l0aW9uZW5kXCJdKSgkZWxlbWVudCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykuZmluZCgndWwgbGkgYScpLmZpbHRlcihfdGhpcy4kbWVudUl0ZW1zKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pOyAvLyBlbmQga2V5Ym9hcmRBY2Nlc3NcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgYWxsIG9wZW4gZWxlbWVudHMsIGFuZCByZXR1cm5zIHRvIHJvb3QgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJpbGxkb3duI2Nsb3NlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaGlkZUFsbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlQWxsKCkge1xuICAgICAgdmFyICRlbGVtID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUuaXMtYWN0aXZlJykuYWRkQ2xhc3MoJ2lzLWNsb3NpbmcnKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkgdGhpcy4kd3JhcHBlci5jc3MoeyBoZWlnaHQ6ICRlbGVtLnBhcmVudCgpLmNsb3Nlc3QoJ3VsJykuZGF0YSgnY2FsY0hlaWdodCcpIH0pO1xuICAgICAgJGVsZW0ub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJ0cmFuc2l0aW9uZW5kXCJdKSgkZWxlbSksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICRlbGVtLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZycpO1xuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZnVsbHkgY2xvc2VkLlxuICAgICAgICogQGV2ZW50IERyaWxsZG93biNjbG9zZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZWQuemYuZHJpbGxkb3duJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBsaXN0ZW5lciBmb3IgZWFjaCBgYmFja2AgYnV0dG9uLCBhbmQgY2xvc2VzIG9wZW4gbWVudXMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyaWxsZG93biNiYWNrXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgc3ViLW1lbnUgdG8gYWRkIGBiYWNrYCBldmVudC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2JhY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYmFjaygkZWxlbSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICRlbGVtLm9mZignY2xpY2suemYuZHJpbGxkb3duJyk7XG4gICAgICAkZWxlbS5jaGlsZHJlbignLmpzLWRyaWxsZG93bi1iYWNrJykub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtb3VzZXVwIG9uIGJhY2snKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGEgcGFyZW50IHN1Ym1lbnUsIGNhbGwgc2hvd1xuICAgICAgICB2YXIgcGFyZW50U3ViTWVudSA9ICRlbGVtLnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpO1xuICAgICAgICBpZiAocGFyZW50U3ViTWVudS5sZW5ndGgpIHtcbiAgICAgICAgICBfdGhpcy5fc2hvdyhwYXJlbnRTdWJNZW51KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBsaXN0ZW5lciB0byBtZW51IGl0ZW1zIHcvbyBzdWJtZW51cyB0byBjbG9zZSBvcGVuIG1lbnVzIG9uIGNsaWNrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19tZW51TGlua0V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9tZW51TGlua0V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLiRtZW51SXRlbXMubm90KCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50Jykub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgLy8gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuX2hpZGVBbGwoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIHN1Ym1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyaWxsZG93biNvcGVuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBvcGVuLCBpLmUuIHRoZSBgbGlgIHRhZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvdygkZWxlbSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB0aGlzLiR3cmFwcGVyLmNzcyh7IGhlaWdodDogJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuZGF0YSgnY2FsY0hlaWdodCcpIH0pO1xuICAgICAgJGVsZW0uYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdpbnZpc2libGUnKS5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgc3VibWVudSBoYXMgb3BlbmVkLlxuICAgICAgICogQGV2ZW50IERyaWxsZG93biNvcGVuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb3Blbi56Zi5kcmlsbGRvd24nLCBbJGVsZW1dKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfaGlkZScsXG5cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIGEgc3VibWVudVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBmaXJlcyBEcmlsbGRvd24jaGlkZVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IHN1Yi1tZW51IHRvIGhpZGUsIGkuZS4gdGhlIGB1bGAgdGFnLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGlkZSgkZWxlbSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB0aGlzLiR3cmFwcGVyLmNzcyh7IGhlaWdodDogJGVsZW0ucGFyZW50KCkuY2xvc2VzdCgndWwnKS5kYXRhKCdjYWxjSGVpZ2h0JykgfSk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgJGVsZW0ucGFyZW50KCdsaScpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICAkZWxlbS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpLmFkZENsYXNzKCdpcy1jbG9zaW5nJyk7XG4gICAgICAkZWxlbS5hZGRDbGFzcygnaXMtY2xvc2luZycpLm9uZShfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1widHJhbnNpdGlvbmVuZFwiXSkoJGVsZW0pLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRlbGVtLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZycpO1xuICAgICAgICAkZWxlbS5ibHVyKCkuYWRkQ2xhc3MoJ2ludmlzaWJsZScpO1xuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIGNsb3NlZC5cbiAgICAgICAqIEBldmVudCBEcmlsbGRvd24jaGlkZVxuICAgICAgICovXG4gICAgICAkZWxlbS50cmlnZ2VyKCdoaWRlLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIHRocm91Z2ggdGhlIG5lc3RlZCBtZW51cyB0byBjYWxjdWxhdGUgdGhlIG1pbi1oZWlnaHQsIGFuZCBtYXgtd2lkdGggZm9yIHRoZSBtZW51LlxuICAgICAqIFByZXZlbnRzIGNvbnRlbnQganVtcGluZy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0TWF4RGltcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRNYXhEaW1zKCkge1xuICAgICAgdmFyIG1heEhlaWdodCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0ge30sXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy4kc3VibWVudXMuYWRkKHRoaXMuJGVsZW1lbnQpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbnVtT2ZFbGVtcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuY2hpbGRyZW4oJ2xpJykubGVuZ3RoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJCb3hcIl0uR2V0RGltZW5zaW9ucyh0aGlzKS5oZWlnaHQ7XG4gICAgICAgIG1heEhlaWdodCA9IGhlaWdodCA+IG1heEhlaWdodCA/IGhlaWdodCA6IG1heEhlaWdodDtcbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgnY2FsY0hlaWdodCcsIGhlaWdodCk7XG4gICAgICAgICAgaWYgKCFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24tc3VibWVudScpKSByZXN1bHRbJ2hlaWdodCddID0gaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkgcmVzdWx0WydtaW4taGVpZ2h0J10gPSBtYXhIZWlnaHQgKyAncHgnO1xuXG4gICAgICByZXN1bHRbJ21heC13aWR0aCddID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCArICdweCc7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIERyaWxsZG93biBNZW51XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNjcm9sbFRvcCkgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5kcmlsbGRvd24nLCB0aGlzLl9iaW5kSGFuZGxlcik7XG4gICAgICB0aGlzLl9oaWRlQWxsKCk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fW1wiTmVzdFwiXS5CdXJuKHRoaXMuJGVsZW1lbnQsICdkcmlsbGRvd24nKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQudW53cmFwKCkuZmluZCgnLmpzLWRyaWxsZG93bi1iYWNrLCAuaXMtc3VibWVudS1wYXJlbnQtaXRlbScpLnJlbW92ZSgpLmVuZCgpLmZpbmQoJy5pcy1hY3RpdmUsIC5pcy1jbG9zaW5nLCAuaXMtZHJpbGxkb3duLXN1Ym1lbnUnKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWNsb3NpbmcgaXMtZHJpbGxkb3duLXN1Ym1lbnUnKS5lbmQoKS5maW5kKCdbZGF0YS1zdWJtZW51XScpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4IHJvbGUnKTtcbiAgICAgIHRoaXMuJHN1Ym1lbnVBbmNob3JzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLm9mZignLnpmLmRyaWxsZG93bicpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJHN1Ym1lbnVzLnJlbW92ZUNsYXNzKCdkcmlsbGRvd24tc3VibWVudS1jb3Zlci1wcmV2aW91cyBpbnZpc2libGUnKTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdhJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkbGluayA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyk7XG4gICAgICAgICRsaW5rLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICAgIGlmICgkbGluay5kYXRhKCdzYXZlZEhyZWYnKSkge1xuICAgICAgICAgICRsaW5rLmF0dHIoJ2hyZWYnLCAkbGluay5kYXRhKCdzYXZlZEhyZWYnKSkucmVtb3ZlRGF0YSgnc2F2ZWRIcmVmJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJpbGxkb3duO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJQbHVnaW5cIl0pO1xuXG5EcmlsbGRvd24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBEcmlsbGRvd25zIGRlcGVuZCBvbiBzdHlsZXMgaW4gb3JkZXIgdG8gZnVuY3Rpb24gcHJvcGVybHk7IGluIHRoZSBkZWZhdWx0IGJ1aWxkIG9mIEZvdW5kYXRpb24gdGhlc2UgYXJlXG4gICAqIG9uIHRoZSBgZHJpbGxkb3duYCBjbGFzcy4gVGhpcyBvcHRpb24gYXV0by1hcHBsaWVzIHRoaXMgY2xhc3MgdG8gdGhlIGRyaWxsZG93biB1cG9uIGluaXRpYWxpemF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29saWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhdXRvQXBwbHlDbGFzczogdHJ1ZSxcbiAgLyoqXG4gICAqIE1hcmt1cCB1c2VkIGZvciBKUyBnZW5lcmF0ZWQgYmFjayBidXR0b24uIFByZXBlbmRlZCAgb3IgYXBwZW5kZWQgKHNlZSBiYWNrQnV0dG9uUG9zaXRpb24pIHRvIHN1Ym1lbnUgbGlzdHMgYW5kIGRlbGV0ZWQgb24gYGRlc3Ryb3lgIG1ldGhvZCwgJ2pzLWRyaWxsZG93bi1iYWNrJyBjbGFzcyByZXF1aXJlZC4gUmVtb3ZlIHRoZSBiYWNrc2xhc2ggKGBcXGApIGlmIGNvcHkgYW5kIHBhc3RpbmcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJzxsaSBjbGFzcz1cImpzLWRyaWxsZG93bi1iYWNrXCI+PGEgdGFiaW5kZXg9XCIwXCI+QmFjazwvYT48L2xpPidcbiAgICovXG4gIGJhY2tCdXR0b246ICc8bGkgY2xhc3M9XCJqcy1kcmlsbGRvd24tYmFja1wiPjxhIHRhYmluZGV4PVwiMFwiPkJhY2s8L2E+PC9saT4nLFxuICAvKipcbiAgICogUG9zaXRpb24gdGhlIGJhY2sgYnV0dG9uIGVpdGhlciBhdCB0aGUgdG9wIG9yIGJvdHRvbSBvZiBkcmlsbGRvd24gc3VibWVudXMuIENhbiBiZSBgJ2xlZnQnYCBvciBgJ2JvdHRvbSdgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IHRvcFxuICAgKi9cbiAgYmFja0J1dHRvblBvc2l0aW9uOiAndG9wJyxcbiAgLyoqXG4gICAqIE1hcmt1cCB1c2VkIHRvIHdyYXAgZHJpbGxkb3duIG1lbnUuIFVzZSBhIGNsYXNzIG5hbWUgZm9yIGluZGVwZW5kZW50IHN0eWxpbmc7IHRoZSBKUyBhcHBsaWVkIGNsYXNzOiBgaXMtZHJpbGxkb3duYCBpcyByZXF1aXJlZC4gUmVtb3ZlIHRoZSBiYWNrc2xhc2ggKGBcXGApIGlmIGNvcHkgYW5kIHBhc3RpbmcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJzxkaXY+PC9kaXY+J1xuICAgKi9cbiAgd3JhcHBlcjogJzxkaXY+PC9kaXY+JyxcbiAgLyoqXG4gICAqIEFkZHMgdGhlIHBhcmVudCBsaW5rIHRvIHRoZSBzdWJtZW51LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcGFyZW50TGluazogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgbWVudSB0byByZXR1cm4gdG8gcm9vdCBsaXN0IG9uIGJvZHkgY2xpY2suXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gYXV0byBhZGp1c3QgaGVpZ2h0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbmltYXRlIHRoZSBhdXRvIGFkanVzdCBoZWlnaHQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbmltYXRlSGVpZ2h0OiBmYWxzZSxcbiAgLyoqXG4gICAqIFNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBtZW51IGFmdGVyIG9wZW5pbmcgYSBzdWJtZW51IG9yIG5hdmlnYXRpbmcgYmFjayB1c2luZyB0aGUgbWVudSBiYWNrIGJ1dHRvblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2Nyb2xsVG9wOiBmYWxzZSxcbiAgLyoqXG4gICAqIFN0cmluZyBqcXVlcnkgc2VsZWN0b3IgKGZvciBleGFtcGxlICdib2R5Jykgb2YgZWxlbWVudCB0byB0YWtlIG9mZnNldCgpLnRvcCBmcm9tLCBpZiBlbXB0eSBzdHJpbmcgdGhlIGRyaWxsZG93biBtZW51IG9mZnNldCgpLnRvcCBpcyB0YWtlblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBzY3JvbGxUb3BFbGVtZW50OiAnJyxcbiAgLyoqXG4gICAqIFNjcm9sbFRvcCBvZmZzZXRcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBzY3JvbGxUb3BPZmZzZXQ6IDAsXG4gIC8qKlxuICAgKiBTY3JvbGwgYW5pbWF0aW9uIGR1cmF0aW9uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTAwXG4gICAqL1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAvKipcbiAgICogU2Nyb2xsIGFuaW1hdGlvbiBlYXNpbmcuIENhbiBiZSBgJ3N3aW5nJ2Agb3IgYCdsaW5lYXInYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2FuaW1hdGV8SlF1ZXJ5IGFuaW1hdGV9XG4gICAqIEBkZWZhdWx0ICdzd2luZydcbiAgICovXG4gIGFuaW1hdGlvbkVhc2luZzogJ3N3aW5nJ1xuICAvLyBob2xkT3BlbjogZmFsc2Vcbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7S2V5Ym9hcmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLktleWJvYXJkfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0JveDogd2luZG93LkZvdW5kYXRpb24uQm94fTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDgyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtOZXN0OiB3aW5kb3cuRm91bmRhdGlvbi5OZXN0fTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODMpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0ZvdW5kYXRpb246IHdpbmRvdy5Gb3VuZGF0aW9ufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDExOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUG9zaXRpb25hYmxlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcGx1Z2luX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcGx1Z2luX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxudmFyIFBPU0lUSU9OUyA9IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ107XG52YXIgVkVSVElDQUxfQUxJR05NRU5UUyA9IFsndG9wJywgJ2JvdHRvbScsICdjZW50ZXInXTtcbnZhciBIT1JJWk9OVEFMX0FMSUdOTUVOVFMgPSBbJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJ107XG5cbnZhciBBTElHTk1FTlRTID0ge1xuICAnbGVmdCc6IFZFUlRJQ0FMX0FMSUdOTUVOVFMsXG4gICdyaWdodCc6IFZFUlRJQ0FMX0FMSUdOTUVOVFMsXG4gICd0b3AnOiBIT1JJWk9OVEFMX0FMSUdOTUVOVFMsXG4gICdib3R0b20nOiBIT1JJWk9OVEFMX0FMSUdOTUVOVFNcbn07XG5cbmZ1bmN0aW9uIG5leHRJdGVtKGl0ZW0sIGFycmF5KSB7XG4gIHZhciBjdXJyZW50SWR4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgaWYgKGN1cnJlbnRJZHggPT09IGFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICByZXR1cm4gYXJyYXlbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFycmF5W2N1cnJlbnRJZHggKyAxXTtcbiAgfVxufVxuXG52YXIgUG9zaXRpb25hYmxlID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFBvc2l0aW9uYWJsZSwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gUG9zaXRpb25hYmxlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3NpdGlvbmFibGUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb3NpdGlvbmFibGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3NpdGlvbmFibGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3NpdGlvbmFibGUsIFt7XG4gICAga2V5OiAnX2luaXQnLFxuXG4gICAgLyoqXG4gICAgICogQWJzdHJhY3QgY2xhc3MgZW5jYXBzdWxhdGluZyB0aGUgdGV0aGVyLWxpa2UgZXhwbGljaXQgcG9zaXRpb25pbmcgbG9naWNcbiAgICAgKiBpbmNsdWRpbmcgcmVwb3NpdGlvbmluZyBiYXNlZCBvbiBvdmVybGFwLlxuICAgICAqIEV4cGVjdHMgY2xhc3NlcyB0byBkZWZpbmUgZGVmYXVsdHMgZm9yIHZPZmZzZXQsIGhPZmZzZXQsIHBvc2l0aW9uLFxuICAgICAqIGFsaWdubWVudCwgYWxsb3dPdmVybGFwLCBhbmQgYWxsb3dCb3R0b21PdmVybGFwLiBUaGV5IGNhbiBkbyB0aGlzIGJ5XG4gICAgICogZXh0ZW5kaW5nIHRoZSBkZWZhdWx0cywgb3IgKGZvciBub3cgcmVjb21tZW5kZWQgZHVlIHRvIHRoZSB3YXkgZG9jcyBhcmVcbiAgICAgKiBnZW5lcmF0ZWQpIGJ5IGV4cGxpY2l0bHkgZGVjbGFyaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiovXG5cbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB0aGlzLnRyaWVkUG9zaXRpb25zID0ge307XG4gICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAnYXV0bycgPyB0aGlzLl9nZXREZWZhdWx0UG9zaXRpb24oKSA6IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgIHRoaXMuYWxpZ25tZW50ID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2F1dG8nID8gdGhpcy5fZ2V0RGVmYXVsdEFsaWdubWVudCgpIDogdGhpcy5vcHRpb25zLmFsaWdubWVudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0RGVmYXVsdFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERlZmF1bHRQb3NpdGlvbigpIHtcbiAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0RGVmYXVsdEFsaWdubWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXREZWZhdWx0QWxpZ25tZW50KCkge1xuICAgICAgc3dpdGNoICh0aGlzLnBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJydGxcIl0pKCkgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGp1c3RzIHRoZSBwb3NpdGlvbmFibGUgcG9zc2libGUgcG9zaXRpb25zIGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGFsaWdubWVudHNcbiAgICAgKiBhbmQgcG9zaXRpb25zLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZXBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlcG9zaXRpb24oKSB7XG4gICAgICBpZiAodGhpcy5fYWxpZ25tZW50c0V4aGF1c3RlZCh0aGlzLnBvc2l0aW9uKSkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gbmV4dEl0ZW0odGhpcy5wb3NpdGlvbiwgUE9TSVRJT05TKTtcbiAgICAgICAgdGhpcy5hbGlnbm1lbnQgPSBBTElHTk1FTlRTW3RoaXMucG9zaXRpb25dWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVhbGlnbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdHMgdGhlIGRyb3Bkb3duIHBhbmUgcG9zc2libGUgcG9zaXRpb25zIGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGFsaWdubWVudHNcbiAgICAgKiBvbiB0aGUgY3VycmVudCBwb3NpdGlvbi5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVhbGlnbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWFsaWduKCkge1xuICAgICAgdGhpcy5fYWRkVHJpZWRQb3NpdGlvbih0aGlzLnBvc2l0aW9uLCB0aGlzLmFsaWdubWVudCk7XG4gICAgICB0aGlzLmFsaWdubWVudCA9IG5leHRJdGVtKHRoaXMuYWxpZ25tZW50LCBBTElHTk1FTlRTW3RoaXMucG9zaXRpb25dKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfYWRkVHJpZWRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRUcmllZFBvc2l0aW9uKHBvc2l0aW9uLCBhbGlnbm1lbnQpIHtcbiAgICAgIHRoaXMudHJpZWRQb3NpdGlvbnNbcG9zaXRpb25dID0gdGhpcy50cmllZFBvc2l0aW9uc1twb3NpdGlvbl0gfHwgW107XG4gICAgICB0aGlzLnRyaWVkUG9zaXRpb25zW3Bvc2l0aW9uXS5wdXNoKGFsaWdubWVudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3Bvc2l0aW9uc0V4aGF1c3RlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wb3NpdGlvbnNFeGhhdXN0ZWQoKSB7XG4gICAgICB2YXIgaXNFeGhhdXN0ZWQgPSB0cnVlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBQT1NJVElPTlMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXNFeGhhdXN0ZWQgPSBpc0V4aGF1c3RlZCAmJiB0aGlzLl9hbGlnbm1lbnRzRXhoYXVzdGVkKFBPU0lUSU9OU1tpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNFeGhhdXN0ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2FsaWdubWVudHNFeGhhdXN0ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxpZ25tZW50c0V4aGF1c3RlZChwb3NpdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMudHJpZWRQb3NpdGlvbnNbcG9zaXRpb25dICYmIHRoaXMudHJpZWRQb3NpdGlvbnNbcG9zaXRpb25dLmxlbmd0aCA9PSBBTElHTk1FTlRTW3Bvc2l0aW9uXS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gV2hlbiB3ZSdyZSB0cnlpbmcgdG8gY2VudGVyLCB3ZSBkb24ndCB3YW50IHRvIGFwcGx5IG9mZnNldCB0aGF0J3MgZ29pbmcgdG9cbiAgICAvLyB0YWtlIHVzIGp1c3Qgb2ZmIGNlbnRlciwgc28gd3JhcCBhcm91bmQgdG8gcmV0dXJuIDAgZm9yIHRoZSBhcHByb3ByaWF0ZVxuICAgIC8vIG9mZnNldCBpbiB0aG9zZSBhbGlnbm1lbnRzLiAgVE9ETzogRmlndXJlIG91dCBpZiB3ZSB3YW50IHRvIG1ha2UgdGhpc1xuICAgIC8vIGNvbmZpZ3VyYWJsZSBiZWhhdmlvci4uLiBpdCBmZWVscyBtb3JlIGludHVpdGl2ZSwgZXNwZWNpYWxseSBmb3IgdG9vbHRpcHMsIGJ1dFxuICAgIC8vIGl0J3MgcG9zc2libGUgc29tZW9uZSBtaWdodCBhY3R1YWxseSB3YW50IHRvIHN0YXJ0IGZyb20gY2VudGVyIGFuZCB0aGVuIG51ZGdlXG4gICAgLy8gc2xpZ2h0bHkgb2ZmLlxuXG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0Vk9mZnNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRWT2Zmc2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52T2Zmc2V0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXRIT2Zmc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEhPZmZzZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhPZmZzZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3NldFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFBvc2l0aW9uKCRhbmNob3IsICRlbGVtZW50LCAkcGFyZW50KSB7XG4gICAgICBpZiAoJGFuY2hvci5hdHRyKCdhcmlhLWV4cGFuZGVkJykgPT09ICdmYWxzZScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyICRlbGVEaW1zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJCb3hcIl0uR2V0RGltZW5zaW9ucygkZWxlbWVudCksXG4gICAgICAgICAgJGFuY2hvckRpbXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX1tcIkJveFwiXS5HZXREaW1lbnNpb25zKCRhbmNob3IpO1xuXG4gICAgICAkZWxlbWVudC5vZmZzZXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJCb3hcIl0uR2V0RXhwbGljaXRPZmZzZXRzKCRlbGVtZW50LCAkYW5jaG9yLCB0aGlzLnBvc2l0aW9uLCB0aGlzLmFsaWdubWVudCwgdGhpcy5fZ2V0Vk9mZnNldCgpLCB0aGlzLl9nZXRIT2Zmc2V0KCkpKTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dPdmVybGFwKSB7XG4gICAgICAgIHZhciBvdmVybGFwcyA9IHt9O1xuICAgICAgICB2YXIgbWluT3ZlcmxhcCA9IDEwMDAwMDAwMDtcbiAgICAgICAgLy8gZGVmYXVsdCBjb29yZGluYXRlcyB0byBob3cgd2Ugc3RhcnQsIGluIGNhc2Ugd2UgY2FuJ3QgZmlndXJlIG91dCBiZXR0ZXJcbiAgICAgICAgdmFyIG1pbkNvb3JkaW5hdGVzID0geyBwb3NpdGlvbjogdGhpcy5wb3NpdGlvbiwgYWxpZ25tZW50OiB0aGlzLmFsaWdubWVudCB9O1xuICAgICAgICB3aGlsZSAoIXRoaXMuX3Bvc2l0aW9uc0V4aGF1c3RlZCgpKSB7XG4gICAgICAgICAgdmFyIG92ZXJsYXAgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX1tcIkJveFwiXS5PdmVybGFwQXJlYSgkZWxlbWVudCwgJHBhcmVudCwgZmFsc2UsIGZhbHNlLCB0aGlzLm9wdGlvbnMuYWxsb3dCb3R0b21PdmVybGFwKTtcbiAgICAgICAgICBpZiAob3ZlcmxhcCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvdmVybGFwIDwgbWluT3ZlcmxhcCkge1xuICAgICAgICAgICAgbWluT3ZlcmxhcCA9IG92ZXJsYXA7XG4gICAgICAgICAgICBtaW5Db29yZGluYXRlcyA9IHsgcG9zaXRpb246IHRoaXMucG9zaXRpb24sIGFsaWdubWVudDogdGhpcy5hbGlnbm1lbnQgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9yZXBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAkZWxlbWVudC5vZmZzZXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJCb3hcIl0uR2V0RXhwbGljaXRPZmZzZXRzKCRlbGVtZW50LCAkYW5jaG9yLCB0aGlzLnBvc2l0aW9uLCB0aGlzLmFsaWdubWVudCwgdGhpcy5fZ2V0Vk9mZnNldCgpLCB0aGlzLl9nZXRIT2Zmc2V0KCkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBnZXQgdGhyb3VnaCB0aGUgZW50aXJlIGxvb3AsIHRoZXJlIHdhcyBubyBub24tb3ZlcmxhcHBpbmdcbiAgICAgICAgLy8gcG9zaXRpb24gYXZhaWxhYmxlLiBQaWNrIHRoZSB2ZXJzaW9uIHdpdGggbGVhc3Qgb3ZlcmxhcC5cbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG1pbkNvb3JkaW5hdGVzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFsaWdubWVudCA9IG1pbkNvb3JkaW5hdGVzLmFsaWdubWVudDtcbiAgICAgICAgJGVsZW1lbnQub2Zmc2V0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2JveF9fW1wiQm94XCJdLkdldEV4cGxpY2l0T2Zmc2V0cygkZWxlbWVudCwgJGFuY2hvciwgdGhpcy5wb3NpdGlvbiwgdGhpcy5hbGlnbm1lbnQsIHRoaXMuX2dldFZPZmZzZXQoKSwgdGhpcy5fZ2V0SE9mZnNldCgpKSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvc2l0aW9uYWJsZTtcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiUGx1Z2luXCJdKTtcblxuUG9zaXRpb25hYmxlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9zaXRpb24gb2YgcG9zaXRpb25hYmxlIHJlbGF0aXZlIHRvIGFuY2hvci4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgb3IgYXV0by5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHBvc2l0aW9uOiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGlnbm1lbnQgb2YgcG9zaXRpb25hYmxlIHJlbGF0aXZlIHRvIGFuY2hvci4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgY2VudGVyLCBvciBhdXRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgYWxpZ25tZW50OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIGNvbnRhaW5lci93aW5kb3cuIElmIGZhbHNlLCBkcm9wZG93biBwb3NpdGlvbmFibGUgZmlyc3RcbiAgICogdHJ5IHRvIHBvc2l0aW9uIGFzIGRlZmluZWQgYnkgZGF0YS1wb3NpdGlvbiBhbmQgZGF0YS1hbGlnbm1lbnQsIGJ1dFxuICAgKiByZXBvc2l0aW9uIGlmIGl0IHdvdWxkIGNhdXNlIGFuIG92ZXJmbG93LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dPdmVybGFwOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IG92ZXJsYXAgb2Ygb25seSB0aGUgYm90dG9tIG9mIHRoZSBjb250YWluZXIuIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uXG4gICAqIGJlaGF2aW9yIGZvciBkcm9wZG93bnMsIGFsbG93aW5nIHRoZSBkcm9wZG93biB0byBleHRlbmQgdGhlIGJvdHRvbSBvZiB0aGVcbiAgICogc2NyZWVuIGJ1dCBub3Qgb3RoZXJ3aXNlIGluZmx1ZW5jZSBvciBicmVhayBvdXQgb2YgdGhlIGNvbnRhaW5lci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYWxsb3dCb3R0b21PdmVybGFwOiB0cnVlLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0aGUgcG9zaXRpb25hYmxlIHNob3VsZCBiZSBzZXBhcmF0ZWQgdmVydGljYWxseSBmcm9tIGFuY2hvclxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHZPZmZzZXQ6IDAsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRoZSBwb3NpdGlvbmFibGUgc2hvdWxkIGJlIHNlcGFyYXRlZCBob3Jpem9udGFsbHkgZnJvbSBhbmNob3JcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBoT2Zmc2V0OiAwXG59O1xuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX2Ryb3Bkb3duX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fZHJvcGRvd25fX1tcImFcIiAvKiBEcm9wZG93biAqL10sICdEcm9wZG93bicpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7UGx1Z2luOiB3aW5kb3cuRm91bmRhdGlvbi5QbHVnaW59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7cnRsOiB3aW5kb3cuRm91bmRhdGlvbi5ydGwsIEdldFlvRGlnaXRzOiB3aW5kb3cuRm91bmRhdGlvbi5HZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZDogd2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtNb3Rpb246IHdpbmRvdy5Gb3VuZGF0aW9uLk1vdGlvbiwgTW92ZTogd2luZG93LkZvdW5kYXRpb24uTW92ZX07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA0Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIERyb3Bkb3duOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcG9zaXRpb25hYmxlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIERyb3Bkb3duIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG52YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoX1Bvc2l0aW9uYWJsZSkge1xuICBfaW5oZXJpdHMoRHJvcGRvd24sIF9Qb3NpdGlvbmFibGUpO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wZG93bik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERyb3Bkb3duLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRHJvcGRvd24pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyb3Bkb3duLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIERyb3Bkb3duXG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duLlxuICAgICAqICAgICAgICBPYmplY3Qgc2hvdWxkIGJlIG9mIHRoZSBkcm9wZG93biBwYW5lbCwgcmF0aGVyIHRoYW4gaXRzIGFuY2hvci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKHt9LCBEcm9wZG93bi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnRHJvcGRvd24nOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgLy8gVHJpZ2dlcnMgaW5pdCBpcyBpZGVtcG90ZW50LCBqdXN0IG5lZWQgdG8gbWFrZSBzdXJlIGl0IGlzIGluaXRpYWxpemVkXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fW1wiYVwiIC8qIFRyaWdnZXJzICovXS5pbml0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEpO1xuXG4gICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJLZXlib2FyZFwiXS5yZWdpc3RlcignRHJvcGRvd24nLCB7XG4gICAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiBieSBzZXR0aW5nL2NoZWNraW5nIG9wdGlvbnMgYW5kIGF0dHJpYnV0ZXMsIGFkZGluZyBoZWxwZXIgdmFyaWFibGVzLCBhbmQgc2F2aW5nIHRoZSBhbmNob3IuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciAkaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICAgIHRoaXMuJGFuY2hvcnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS10b2dnbGU9XCInICsgJGlkICsgJ1wiXScpLmxlbmd0aCA/IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXRvZ2dsZT1cIicgKyAkaWQgKyAnXCJdJykgOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS1vcGVuPVwiJyArICRpZCArICdcIl0nKTtcbiAgICAgIHRoaXMuJGFuY2hvcnMuYXR0cih7XG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogJGlkLFxuICAgICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fc2V0Q3VycmVudEFuY2hvcih0aGlzLiRhbmNob3JzLmZpcnN0KCkpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBhcmVudENsYXNzKSB7XG4gICAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLicgKyB0aGlzLm9wdGlvbnMucGFyZW50Q2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kcGFyZW50ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogJGlkLFxuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy4kY3VycmVudEFuY2hvci5pZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiR2V0WW9EaWdpdHNcIl0pKDYsICdkZC1hbmNob3InKVxuICAgICAgfSk7XG4gICAgICBfZ2V0KERyb3Bkb3duLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyb3Bkb3duLnByb3RvdHlwZSksICdfaW5pdCcsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0RGVmYXVsdFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERlZmF1bHRQb3NpdGlvbigpIHtcbiAgICAgIC8vIGhhbmRsZSBsZWdhY3kgY2xhc3NuYW1lc1xuICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goLyh0b3B8bGVmdHxyaWdodHxib3R0b20pL2cpO1xuICAgICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBwb3NpdGlvblswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0RGVmYXVsdEFsaWdubWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXREZWZhdWx0QWxpZ25tZW50KCkge1xuICAgICAgLy8gaGFuZGxlIGxlZ2FjeSBmbG9hdCBhcHByb2FjaFxuICAgICAgdmFyIGhvcml6b250YWxQb3NpdGlvbiA9IC9mbG9hdC0oXFxTKykvLmV4ZWModGhpcy4kY3VycmVudEFuY2hvci5jbGFzc05hbWUpO1xuICAgICAgaWYgKGhvcml6b250YWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaG9yaXpvbnRhbFBvc2l0aW9uWzFdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2dldChEcm9wZG93bi5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEcm9wZG93bi5wcm90b3R5cGUpLCAnX2dldERlZmF1bHRBbGlnbm1lbnQnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbiBvZiB0aGUgZHJvcGRvd24gcGFuZSwgY2hlY2tzIGZvciBjb2xsaXNpb25zIGlmIGFsbG93LW92ZXJsYXAgaXMgbm90IHRydWUuXG4gICAgICogUmVjdXJzaXZlbHkgY2FsbHMgaXRzZWxmIGlmIGEgY29sbGlzaW9uIGlzIGRldGVjdGVkLCB3aXRoIGEgbmV3IHBvc2l0aW9uIGNsYXNzLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRQb3NpdGlvbigpIHtcbiAgICAgIF9nZXQoRHJvcGRvd24ucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRHJvcGRvd24ucHJvdG90eXBlKSwgJ19zZXRQb3NpdGlvbicsIHRoaXMpLmNhbGwodGhpcywgdGhpcy4kY3VycmVudEFuY2hvciwgdGhpcy4kZWxlbWVudCwgdGhpcy4kcGFyZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIGl0IGEgY3VycmVudCBhbmNob3IuXG4gICAgICogQ3VycmVudCBhbmNob3IgYXMgdGhlIHJlZmVyZW5jZSBmb3IgdGhlIHBvc2l0aW9uIG9mIERyb3Bkb3duIHBhbmVzLlxuICAgICAqIEBwYXJhbSB7SFRNTH0gZWwgLSBET00gZWxlbWVudCBvZiB0aGUgYW5jaG9yLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRDdXJyZW50QW5jaG9yJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEN1cnJlbnRBbmNob3IoZWwpIHtcbiAgICAgIHRoaXMuJGN1cnJlbnRBbmNob3IgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGVsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgZWxlbWVudCB1dGlsaXppbmcgdGhlIHRyaWdnZXJzIHV0aWxpdHkgbGlicmFyeS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuY2xvc2UuYmluZCh0aGlzKSxcbiAgICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9zZXRQb3NpdGlvbi5iaW5kKHRoaXMpXG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kYW5jaG9ycy5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInKS5vbignY2xpY2suemYudHJpZ2dlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX3NldEN1cnJlbnRBbmNob3IodGhpcyk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ob3Zlcikge1xuICAgICAgICB0aGlzLiRhbmNob3JzLm9mZignbW91c2VlbnRlci56Zi5kcm9wZG93biBtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJykub24oJ21vdXNlZW50ZXIuemYuZHJvcGRvd24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuX3NldEN1cnJlbnRBbmNob3IodGhpcyk7XG5cbiAgICAgICAgICB2YXIgYm9keURhdGEgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdib2R5JykuZGF0YSgpO1xuICAgICAgICAgIGlmICh0eXBlb2YgYm9keURhdGEud2hhdGlucHV0ID09PSAndW5kZWZpbmVkJyB8fCBib2R5RGF0YS53aGF0aW5wdXQgPT09ICdtb3VzZScpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9ycy5kYXRhKCdob3ZlcicsIHRydWUpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgX3RoaXMuJGFuY2hvcnMuZGF0YSgnaG92ZXInLCBmYWxzZSk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaG92ZXJQYW5lKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ21vdXNlZW50ZXIuemYuZHJvcGRvd24gbW91c2VsZWF2ZS56Zi5kcm9wZG93bicpLm9uKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9ycy5kYXRhKCdob3ZlcicsIGZhbHNlKTtcbiAgICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuJGFuY2hvcnMuYWRkKHRoaXMuJGVsZW1lbnQpLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICB2YXIgJHRhcmdldCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0uZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLmhhbmRsZUtleShlLCAnRHJvcGRvd24nLCB7XG4gICAgICAgICAgb3BlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCR0YXJnZXQuaXMoX3RoaXMuJGFuY2hvcnMpKSB7XG4gICAgICAgICAgICAgIF90aGlzLm9wZW4oKTtcbiAgICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAtMSkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICBfdGhpcy4kYW5jaG9ycy5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19hZGRCb2R5SGFuZGxlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICAgIHZhciAkYm9keSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQuYm9keSkubm90KHRoaXMuJGVsZW1lbnQpLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKS5vbignY2xpY2suemYuZHJvcGRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoX3RoaXMuJGFuY2hvcnMuaXMoZS50YXJnZXQpIHx8IF90aGlzLiRhbmNob3JzLmZpbmQoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZChlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBkcm9wZG93biBwYW5lLCBhbmQgZmlyZXMgYSBidWJibGluZyBldmVudCB0byBjbG9zZSBvdGhlciBkcm9wZG93bnMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyb3Bkb3duI2Nsb3NlbWVcbiAgICAgKiBAZmlyZXMgRHJvcGRvd24jc2hvd1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvcGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgIC8vIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHRvIGNsb3NlIG90aGVyIG9wZW4gZHJvcGRvd25zLCB0eXBpY2FsbHkgd2hlbiBkcm9wZG93biBpcyBvcGVuaW5nXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd24jY2xvc2VtZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYuZHJvcGRvd24nLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgICAgdGhpcy4kYW5jaG9ycy5hZGRDbGFzcygnaG92ZXInKS5hdHRyKHsgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlIH0pO1xuICAgICAgLy8gdGhpcy4kZWxlbWVudC8qLnNob3coKSovO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1vcGVuaW5nJyk7XG4gICAgICB0aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbmluZycpLmFkZENsYXNzKCdpcy1vcGVuJykuYXR0cih7ICdhcmlhLWhpZGRlbic6IGZhbHNlIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cykge1xuICAgICAgICB2YXIgJGZvY3VzYWJsZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJLZXlib2FyZFwiXS5maW5kRm9jdXNhYmxlKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgICBpZiAoJGZvY3VzYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAkZm9jdXNhYmxlLmVxKDApLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICAgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFwRm9jdXMpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBvbmNlIHRoZSBkcm9wZG93biBpcyB2aXNpYmxlLlxuICAgICAgICogQGV2ZW50IERyb3Bkb3duI3Nob3dcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG9wZW4gZHJvcGRvd24gcGFuZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJvcGRvd24jaGlkZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpLmF0dHIoeyAnYXJpYS1oaWRkZW4nOiB0cnVlIH0pO1xuXG4gICAgICB0aGlzLiRhbmNob3JzLnJlbW92ZUNsYXNzKCdob3ZlcicpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgbm8gbG9uZ2VyIHZpc2libGUuXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd24jaGlkZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd24nLCBbdGhpcy4kZWxlbWVudF0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0ucmVsZWFzZUZvY3VzKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIGRyb3Bkb3duIHBhbmUncyB2aXNpYmlsaXR5LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b2dnbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgIGlmICh0aGlzLiRhbmNob3JzLmRhdGEoJ2hvdmVyJykpIHJldHVybjtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGRyb3Bkb3duLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyJykuaGlkZSgpO1xuICAgICAgdGhpcy4kYW5jaG9ycy5vZmYoJy56Zi5kcm9wZG93bicpO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudC5ib2R5KS5vZmYoJ2NsaWNrLnpmLmRyb3Bkb3duJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERyb3Bkb3duO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcG9zaXRpb25hYmxlX19bXCJhXCIgLyogUG9zaXRpb25hYmxlICovXSk7XG5cbkRyb3Bkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQ2xhc3MgdGhhdCBkZXNpZ25hdGVzIGJvdW5kaW5nIGNvbnRhaW5lciBvZiBEcm9wZG93biAoZGVmYXVsdDogd2luZG93KVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBwYXJlbnRDbGFzczogbnVsbCxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IG9wZW5pbmcgYSBzdWJtZW51IG9uIGhvdmVyIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDI1MFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjUwLFxuICAvKipcbiAgICogQWxsb3cgc3VibWVudXMgdG8gb3BlbiBvbiBob3ZlciBldmVudHNcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIERvbid0IGNsb3NlIGRyb3Bkb3duIHdoZW4gaG92ZXJpbmcgb3ZlciBkcm9wZG93biBwYW5lXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBob3ZlclBhbmU6IGZhbHNlLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyBiZXR3ZWVuIHRoZSBkcm9wZG93biBwYW5lIGFuZCB0aGUgdHJpZ2dlcmluZyBlbGVtZW50IG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdk9mZnNldDogMCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgYmV0d2VlbiB0aGUgZHJvcGRvd24gcGFuZSBhbmQgdGhlIHRyaWdnZXJpbmcgZWxlbWVudCBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGhPZmZzZXQ6IDAsXG4gIC8qKlxuICAgKiBERVBSRUNBVEVEOiBDbGFzcyBhcHBsaWVkIHRvIGFkanVzdCBvcGVuIHBvc2l0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcblxuICAvKipcbiAgICogUG9zaXRpb24gb2YgZHJvcGRvd24uIENhbiBiZSBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG9yIGF1dG8uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICBwb3NpdGlvbjogJ2F1dG8nLFxuICAvKipcbiAgICogQWxpZ25tZW50IG9mIGRyb3Bkb3duIHJlbGF0aXZlIHRvIGFuY2hvci4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgY2VudGVyLCBvciBhdXRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgYWxpZ25tZW50OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIGNvbnRhaW5lci93aW5kb3cuIElmIGZhbHNlLCBkcm9wZG93biB3aWxsIGZpcnN0IHRyeSB0byBwb3NpdGlvbiBhcyBkZWZpbmVkIGJ5IGRhdGEtcG9zaXRpb24gYW5kIGRhdGEtYWxpZ25tZW50LCBidXQgcmVwb3NpdGlvbiBpZiBpdCB3b3VsZCBjYXVzZSBhbiBvdmVyZmxvdy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFsbG93T3ZlcmxhcDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIG9ubHkgdGhlIGJvdHRvbSBvZiB0aGUgY29udGFpbmVyLiBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vblxuICAgKiBiZWhhdmlvciBmb3IgZHJvcGRvd25zLCBhbGxvd2luZyB0aGUgZHJvcGRvd24gdG8gZXh0ZW5kIHRoZSBib3R0b20gb2YgdGhlXG4gICAqIHNjcmVlbiBidXQgbm90IG90aGVyd2lzZSBpbmZsdWVuY2Ugb3IgYnJlYWsgb3V0IG9mIHRoZSBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFsbG93Qm90dG9tT3ZlcmxhcDogdHJ1ZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gdHJhcCBmb2N1cyB0byB0aGUgZHJvcGRvd24gcGFuZSBpZiBvcGVuZWQgd2l0aCBrZXlib2FyZCBjb21tYW5kcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRyYXBGb2N1czogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgcGx1Z2luIHRvIHNldCBmb2N1cyB0byB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgd2l0aGluIHRoZSBwYW5lLCByZWdhcmRsZXNzIG9mIG1ldGhvZCBvZiBvcGVuaW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyBhIGNsaWNrIG9uIHRoZSBib2R5IHRvIGNsb3NlIHRoZSBkcm9wZG93bi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNsb3NlT25DbGljazogZmFsc2Vcbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7S2V5Ym9hcmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLktleWJvYXJkfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUcmlnZ2VyczsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fKTtcblxuXG5cblxuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHByZWZpeGVzID0gWydXZWJLaXQnLCAnTW96JywgJ08nLCAnTXMnLCAnJ107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93W3ByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSgpO1xuXG52YXIgdHJpZ2dlcnMgPSBmdW5jdGlvbiAoZWwsIHR5cGUpIHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBpZClbdHlwZSA9PT0gJ2Nsb3NlJyA/ICd0cmlnZ2VyJyA6ICd0cmlnZ2VySGFuZGxlciddKHR5cGUgKyAnLnpmLnRyaWdnZXInLCBbZWxdKTtcbiAgfSk7XG59O1xuXG52YXIgVHJpZ2dlcnMgPSB7XG4gIExpc3RlbmVyczoge1xuICAgIEJhc2ljOiB7fSxcbiAgICBHbG9iYWw6IHt9XG4gIH0sXG4gIEluaXRpYWxpemVyczoge31cbn07XG5cblRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYyA9IHtcbiAgb3Blbkxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdHJpZ2dlcnMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgJ29wZW4nKTtcbiAgfSxcbiAgY2xvc2VMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgnY2xvc2UnKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICdjbG9zZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlLnpmLnRyaWdnZXInKTtcbiAgICB9XG4gIH0sXG4gIHRvZ2dsZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd0b2dnbGUnKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICd0b2dnbGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCd0b2dnbGUuemYudHJpZ2dlcicpO1xuICAgIH1cbiAgfSxcbiAgY2xvc2VhYmxlTGlzdGVuZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgYW5pbWF0aW9uID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCdjbG9zYWJsZScpO1xuXG4gICAgaWYgKGFuaW1hdGlvbiAhPT0gJycpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiTW90aW9uXCJdLmFuaW1hdGVPdXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgYW5pbWF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gICAgfVxuICB9LFxuICB0b2dnbGVGb2N1c0xpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd0b2dnbGUtZm9jdXMnKTtcbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIGlkKS50cmlnZ2VySGFuZGxlcigndG9nZ2xlLnpmLnRyaWdnZXInLCBbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKV0pO1xuICB9XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLW9wZW5dIHdpbGwgcmV2ZWFsIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE9wZW5MaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMub3Blbkxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtb3Blbl0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMub3Blbkxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2VdIHdpbGwgY2xvc2UgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG4vLyBJZiB1c2VkIHdpdGhvdXQgYSB2YWx1ZSBvbiBbZGF0YS1jbG9zZV0sIHRoZSBldmVudCB3aWxsIGJ1YmJsZSwgYWxsb3dpbmcgaXQgdG8gY2xvc2UgYSBwYXJlbnQgY29tcG9uZW50LlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbGljay56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1jbG9zZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VMaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLXRvZ2dsZV0gd2lsbCB0b2dnbGUgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbGljay56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVMaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NhYmxlXSB3aWxsIHJlc3BvbmQgdG8gY2xvc2UuemYudHJpZ2dlciBldmVudHMuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VhYmxlTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbG9zZS56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlYWJsZUxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2Nsb3NlLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2VhYmxlXSwgW2RhdGEtY2xvc2FibGVdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlYWJsZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlLWZvY3VzXSB3aWxsIHJlc3BvbmQgdG8gY29taW5nIGluIGFuZCBvdXQgb2YgZm9jdXNcblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVGb2N1c0xpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlRm9jdXNMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGUtZm9jdXNdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUZvY3VzTGlzdGVuZXIpO1xufTtcblxuLy8gTW9yZSBHbG9iYWwvY29tcGxleCBsaXN0ZW5lcnMgYW5kIHRyaWdnZXJzXG5UcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsID0ge1xuICByZXNpemVMaXN0ZW5lcjogZnVuY3Rpb24gKCRub2Rlcykge1xuICAgIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgLy9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwicmVzaXplXCIpO1xuICB9LFxuICBzY3JvbGxMaXN0ZW5lcjogZnVuY3Rpb24gKCRub2Rlcykge1xuICAgIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgLy9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHNjcm9sbCBldmVudFxuICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwic2Nyb2xsXCIpO1xuICB9LFxuICBjbG9zZU1lTGlzdGVuZXI6IGZ1bmN0aW9uIChlLCBwbHVnaW5JZCkge1xuICAgIHZhciBwbHVnaW4gPSBlLm5hbWVzcGFjZS5zcGxpdCgnLicpWzBdO1xuICAgIHZhciBwbHVnaW5zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtJyArIHBsdWdpbiArICddJykubm90KCdbZGF0YS15ZXRpLWJveD1cIicgKyBwbHVnaW5JZCArICdcIl0nKTtcblxuICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpO1xuICAgICAgX3RoaXMudHJpZ2dlckhhbmRsZXIoJ2Nsb3NlLnpmLnRyaWdnZXInLCBbX3RoaXNdKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEdsb2JhbCwgcGFyc2VzIHdob2xlIGRvY3VtZW50LlxufTtUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VtZUxpc3RlbmVyID0gZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcbiAgdmFyIHlldGlCb3hlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXlldGktYm94XScpLFxuICAgICAgcGx1Z05hbWVzID0gWydkcm9wZG93bicsICd0b29sdGlwJywgJ3JldmVhbCddO1xuXG4gIGlmIChwbHVnaW5OYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z05hbWVzLnB1c2gocGx1Z2luTmFtZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHBsdWdpbk5hbWVbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBwbHVnTmFtZXMuY29uY2F0KHBsdWdpbk5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdQbHVnaW4gbmFtZXMgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICB9XG4gIGlmICh5ZXRpQm94ZXMubGVuZ3RoKSB7XG4gICAgdmFyIGxpc3RlbmVycyA9IHBsdWdOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiAnY2xvc2VtZS56Zi4nICsgbmFtZTtcbiAgICB9KS5qb2luKCcgJyk7XG5cbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKGxpc3RlbmVycykub24obGlzdGVuZXJzLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLmNsb3NlTWVMaXN0ZW5lcik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsIHRyaWdnZXIsIGxpc3RlbmVyKSB7XG4gIHZhciB0aW1lciA9IHZvaWQgMCxcbiAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpO1xuICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKHRyaWdnZXIpLm9uKHRyaWdnZXIsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIH1cbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgbGlzdGVuZXIuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgZGVib3VuY2UgfHwgMTApOyAvL2RlZmF1bHQgdGltZSB0byBlbWl0IHNjcm9sbCBldmVudFxuICB9KTtcbn1cblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFJlc2l6ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGRlYm91bmNlKSB7XG4gIHZhciAkbm9kZXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS1yZXNpemVdJyk7XG4gIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgZGVib3VuY2VHbG9iYWxMaXN0ZW5lcihkZWJvdW5jZSwgJ3Jlc2l6ZS56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbC5yZXNpemVMaXN0ZW5lciwgJG5vZGVzKTtcbiAgfVxufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNjcm9sbExpc3RlbmVyID0gZnVuY3Rpb24gKGRlYm91bmNlKSB7XG4gIHZhciAkbm9kZXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS1zY3JvbGxdJyk7XG4gIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgZGVib3VuY2VHbG9iYWxMaXN0ZW5lcihkZWJvdW5jZSwgJ3Njcm9sbC56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbC5zY3JvbGxMaXN0ZW5lciwgJG5vZGVzKTtcbiAgfVxufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE11dGF0aW9uRXZlbnRzTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciAkbm9kZXMgPSAkZWxlbS5maW5kKCdbZGF0YS1yZXNpemVdLCBbZGF0YS1zY3JvbGxdLCBbZGF0YS1tdXRhdGVdJyk7XG5cbiAgLy9lbGVtZW50IGNhbGxiYWNrXG4gIHZhciBsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uID0gZnVuY3Rpb24gKG11dGF0aW9uUmVjb3Jkc0xpc3QpIHtcbiAgICB2YXIgJHRhcmdldCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkobXV0YXRpb25SZWNvcmRzTGlzdFswXS50YXJnZXQpO1xuXG4gICAgLy90cmlnZ2VyIHRoZSBldmVudCBoYW5kbGVyIGZvciB0aGUgZWxlbWVudCBkZXBlbmRpbmcgb24gdHlwZVxuICAgIHN3aXRjaCAobXV0YXRpb25SZWNvcmRzTGlzdFswXS50eXBlKSB7XG4gICAgICBjYXNlIFwiYXR0cmlidXRlc1wiOlxuICAgICAgICBpZiAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikgPT09IFwic2Nyb2xsXCIgJiYgbXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtZXZlbnRzXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQsIHdpbmRvdy5wYWdlWU9mZnNldF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJyZXNpemVcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuICAgICAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwic3R5bGVcIikge1xuICAgICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsIFwibXV0YXRlXCIpO1xuICAgICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlckhhbmRsZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKV0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiY2hpbGRMaXN0XCI6XG4gICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsIFwibXV0YXRlXCIpO1xuICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vbm90aGluZ1xuICAgIH1cbiAgfTtcblxuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgb3IgbXV0YXRpb24gYWRkIGEgc2luZ2xlIG9ic2VydmVyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gJG5vZGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgdmFyIGVsZW1lbnRPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24pO1xuICAgICAgZWxlbWVudE9ic2VydmVyLm9ic2VydmUoJG5vZGVzW2ldLCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6IHRydWUsIGF0dHJpYnV0ZUZpbHRlcjogW1wiZGF0YS1ldmVudHNcIiwgXCJzdHlsZVwiXSB9KTtcbiAgICB9XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciAkZG9jdW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGRvY3VtZW50KTtcblxuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkT3Blbkxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VhYmxlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUZvY3VzTGlzdGVuZXIoJGRvY3VtZW50KTtcbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciAkZG9jdW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE11dGF0aW9uRXZlbnRzTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFJlc2l6ZUxpc3RlbmVyKCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTY3JvbGxMaXN0ZW5lcigpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VtZUxpc3RlbmVyKCk7XG59O1xuXG5UcmlnZ2Vycy5pbml0ID0gZnVuY3Rpb24gKCQsIEZvdW5kYXRpb24pIHtcbiAgaWYgKHR5cGVvZiAkLnRyaWdnZXJzSW5pdGlhbGl6ZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyICRkb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIikge1xuICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycygpO1xuICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgJC50cmlnZ2Vyc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChGb3VuZGF0aW9uKSB7XG4gICAgRm91bmRhdGlvbi5UcmlnZ2VycyA9IFRyaWdnZXJzO1xuICAgIC8vIExlZ2FjeSBpbmNsdWRlZCB0byBiZSBiYWNrd2FyZHMgY29tcGF0aWJsZSBmb3Igbm93LlxuICAgIEZvdW5kYXRpb24uSUhlYXJZb3UgPSBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzO1xuICB9XG59O1xuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0JveDogd2luZG93LkZvdW5kYXRpb24uQm94fTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDgzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDg0KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtGb3VuZGF0aW9uOiB3aW5kb3cuRm91bmRhdGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9kcm9wZG93bk1lbnVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX1tcIkZvdW5kYXRpb25cIl0ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9kcm9wZG93bk1lbnVfX1tcImFcIiAvKiBEcm9wZG93bk1lbnUgKi9dLCAnRHJvcGRvd25NZW51Jyk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtQbHVnaW46IHdpbmRvdy5Gb3VuZGF0aW9uLlBsdWdpbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtydGw6IHdpbmRvdy5Gb3VuZGF0aW9uLnJ0bCwgR2V0WW9EaWdpdHM6IHdpbmRvdy5Gb3VuZGF0aW9uLkdldFlvRGlnaXRzLCB0cmFuc2l0aW9uZW5kOiB3aW5kb3cuRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRHJvcGRvd25NZW51OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbmVzdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9ib3hfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfYm94X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9ib3hfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3BsdWdpbl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX3BsdWdpbl9fKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBEcm9wZG93bk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyb3Bkb3duLW1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG52YXIgRHJvcGRvd25NZW51ID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKERyb3Bkb3duTWVudSwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25NZW51KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEcm9wZG93bk1lbnUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEcm9wZG93bk1lbnUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEcm9wZG93bk1lbnUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcm9wZG93bk1lbnUsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRHJvcGRvd25NZW51LlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIERyb3Bkb3duTWVudVxuICAgICAqIEBmaXJlcyBEcm9wZG93bk1lbnUjaW5pdFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIERyb3Bkb3duTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnRHJvcGRvd25NZW51JzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLnJlZ2lzdGVyKCdEcm9wZG93bk1lbnUnLCB7XG4gICAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAgICdBUlJPV19VUCc6ICd1cCcsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cycsXG4gICAgICAgICdFU0NBUEUnOiAnY2xvc2UnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLCBhbmQgY2FsbHMgX3ByZXBhcmVNZW51XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfX1tcIk5lc3RcIl0uRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcblxuICAgICAgdmFyIHN1YnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcygnZmlyc3Qtc3ViJyk7XG5cbiAgICAgIHRoaXMuJG1lbnVJdGVtcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW3JvbGU9XCJtZW51aXRlbVwiXScpO1xuICAgICAgdGhpcy4kdGFicyA9IHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICAgIHRoaXMuJHRhYnMuZmluZCgndWwuaXMtZHJvcGRvd24tc3VibWVudScpLmFkZENsYXNzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbENsYXNzKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdhdXRvJykge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRDbGFzcykgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcInJ0bFwiXSkoKSB8fCB0aGlzLiRlbGVtZW50LnBhcmVudHMoJy50b3AtYmFyLXJpZ2h0JykuaXMoJyonKSkge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPSAncmlnaHQnO1xuICAgICAgICAgIHN1YnMuYWRkQ2xhc3MoJ29wZW5zLWxlZnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID0gJ2xlZnQnO1xuICAgICAgICAgIHN1YnMuYWRkQ2xhc3MoJ29wZW5zLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtbGVmdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1YnMuYWRkQ2xhc3MoJ29wZW5zLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2lzVmVydGljYWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNWZXJ0aWNhbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLiR0YWJzLmNzcygnZGlzcGxheScpID09PSAnYmxvY2snIHx8IHRoaXMuJGVsZW1lbnQuY3NzKCdmbGV4LWRpcmVjdGlvbicpID09PSAnY29sdW1uJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfaXNSdGwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNSdGwoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWxpZ24tcmlnaHQnKSB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wicnRsXCJdKSgpICYmICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhbGlnbi1sZWZ0Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gZWxlbWVudHMgd2l0aGluIHRoZSBtZW51XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIGhhc1RvdWNoID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHR5cGVvZiB3aW5kb3cub250b3VjaHN0YXJ0ICE9PSAndW5kZWZpbmVkJyxcbiAgICAgICAgICBwYXJDbGFzcyA9ICdpcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCc7XG5cbiAgICAgIC8vIHVzZWQgZm9yIG9uQ2xpY2sgYW5kIGluIHRoZSBrZXlib2FyZCBoYW5kbGVyc1xuICAgICAgdmFyIGhhbmRsZUNsaWNrRm4gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgJGVsZW0gPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgJy4nICsgcGFyQ2xhc3MpLFxuICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpLFxuICAgICAgICAgICAgaGFzQ2xpY2tlZCA9ICRlbGVtLmF0dHIoJ2RhdGEtaXMtY2xpY2snKSA9PT0gJ3RydWUnLFxuICAgICAgICAgICAgJHN1YiA9ICRlbGVtLmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudScpO1xuXG4gICAgICAgIGlmIChoYXNTdWIpIHtcbiAgICAgICAgICBpZiAoaGFzQ2xpY2tlZCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayB8fCAhX3RoaXMub3B0aW9ucy5jbGlja09wZW4gJiYgIWhhc1RvdWNoIHx8IF90aGlzLm9wdGlvbnMuZm9yY2VGb2xsb3cgJiYgaGFzVG91Y2gpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBfdGhpcy5fc2hvdygkc3ViKTtcbiAgICAgICAgICAgICRlbGVtLmFkZCgkZWxlbS5wYXJlbnRzVW50aWwoX3RoaXMuJGVsZW1lbnQsICcuJyArIHBhckNsYXNzKSkuYXR0cignZGF0YS1pcy1jbGljaycsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGlja09wZW4gfHwgaGFzVG91Y2gpIHtcbiAgICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdjbGljay56Zi5kcm9wZG93bm1lbnUgdG91Y2hzdGFydC56Zi5kcm9wZG93bm1lbnUnLCBoYW5kbGVDbGlja0ZuKTtcbiAgICAgIH1cblxuICAgICAgLy8gSGFuZGxlIExlYWYgZWxlbWVudCBDbGlja3NcbiAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNsb3NlT25DbGlja0luc2lkZSkge1xuICAgICAgICB0aGlzLiRtZW51SXRlbXMub24oJ2NsaWNrLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuICAgICAgICAgIGlmICghaGFzU3ViKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVIb3Zlcikge1xuICAgICAgICB0aGlzLiRtZW51SXRlbXMub24oJ21vdXNlZW50ZXIuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgJGVsZW0gPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLFxuICAgICAgICAgICAgICBoYXNTdWIgPSAkZWxlbS5oYXNDbGFzcyhwYXJDbGFzcyk7XG5cbiAgICAgICAgICBpZiAoaGFzU3ViKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoJGVsZW0uZGF0YSgnX2RlbGF5JykpO1xuICAgICAgICAgICAgJGVsZW0uZGF0YSgnX2RlbGF5Jywgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzLl9zaG93KCRlbGVtLmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudScpKTtcbiAgICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgJGVsZW0gPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLFxuICAgICAgICAgICAgICBoYXNTdWIgPSAkZWxlbS5oYXNDbGFzcyhwYXJDbGFzcyk7XG4gICAgICAgICAgaWYgKGhhc1N1YiAmJiBfdGhpcy5vcHRpb25zLmF1dG9jbG9zZSkge1xuICAgICAgICAgICAgaWYgKCRlbGVtLmF0dHIoJ2RhdGEtaXMtY2xpY2snKSA9PT0gJ3RydWUnICYmIF90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCRlbGVtLmRhdGEoJ19kZWxheScpKTtcbiAgICAgICAgICAgICRlbGVtLmRhdGEoJ19kZWxheScsIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG4gICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmNsb3NpbmdUaW1lKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbigna2V5ZG93bi56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgJ1tyb2xlPVwibWVudWl0ZW1cIl0nKSxcbiAgICAgICAgICAgIGlzVGFiID0gX3RoaXMuJHRhYnMuaW5kZXgoJGVsZW1lbnQpID4gLTEsXG4gICAgICAgICAgICAkZWxlbWVudHMgPSBpc1RhYiA/IF90aGlzLiR0YWJzIDogJGVsZW1lbnQuc2libGluZ3MoJ2xpJykuYWRkKCRlbGVtZW50KSxcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAgICRuZXh0RWxlbWVudDtcblxuICAgICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKGkgLSAxKTtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShpICsgMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJG5leHRFbGVtZW50LmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2U2libGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIG9wZW5TdWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyICRzdWIgPSAkZWxlbWVudC5jaGlsZHJlbigndWwuaXMtZHJvcGRvd24tc3VibWVudScpO1xuICAgICAgICAgIGlmICgkc3ViLmxlbmd0aCkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgICAkZWxlbWVudC5maW5kKCdsaSA+IGE6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAgICAgY2xvc2VTdWIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy9pZiAoJGVsZW1lbnQuaXMoJzpmaXJzdC1jaGlsZCcpKSB7XG4gICAgICAgICAgdmFyIGNsb3NlID0gJGVsZW1lbnQucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKTtcbiAgICAgICAgICBjbG9zZS5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hpZGUoY2xvc2UpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAvL31cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGZ1bmN0aW9ucyA9IHtcbiAgICAgICAgICBvcGVuOiBvcGVuU3ViLFxuICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgICBfdGhpcy4kbWVudUl0ZW1zLmVxKDApLmNoaWxkcmVuKCdhJykuZm9jdXMoKTsgLy8gZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGlzVGFiKSB7XG4gICAgICAgICAgaWYgKF90aGlzLl9pc1ZlcnRpY2FsKCkpIHtcbiAgICAgICAgICAgIC8vIHZlcnRpY2FsIG1lbnVcbiAgICAgICAgICAgIGlmIChfdGhpcy5faXNSdGwoKSkge1xuICAgICAgICAgICAgICAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgICAgICBwcmV2aW91czogb3BlblN1YlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgICB1cDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgICAgbmV4dDogb3BlblN1YixcbiAgICAgICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhvcml6b250YWwgbWVudVxuICAgICAgICAgICAgaWYgKF90aGlzLl9pc1J0bCgpKSB7XG4gICAgICAgICAgICAgIC8vIHJpZ2h0IGFsaWduZWRcbiAgICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgICAgbmV4dDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgICAgcHJldmlvdXM6IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgIGRvd246IG9wZW5TdWIsXG4gICAgICAgICAgICAgICAgdXA6IGNsb3NlU3ViXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbGVmdCBhbGlnbmVkXG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICAgIG5leHQ6IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgICBkb3duOiBvcGVuU3ViLFxuICAgICAgICAgICAgICAgIHVwOiBjbG9zZVN1YlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm90IHRhYnMgLT4gb25lIHN1YlxuICAgICAgICAgIGlmIChfdGhpcy5faXNSdGwoKSkge1xuICAgICAgICAgICAgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIG5leHQ6IGNsb3NlU3ViLFxuICAgICAgICAgICAgICBwcmV2aW91czogb3BlblN1YixcbiAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIG5leHQ6IG9wZW5TdWIsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBjbG9zZVN1YixcbiAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJLZXlib2FyZFwiXS5oYW5kbGVLZXkoZSwgJ0Ryb3Bkb3duTWVudScsIGZ1bmN0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19hZGRCb2R5SGFuZGxlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICAgIHZhciAkYm9keSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQuYm9keSksXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgJGJvZHkub2ZmKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnKS5vbignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyICRsaW5rID0gX3RoaXMuJGVsZW1lbnQuZmluZChlLnRhcmdldCk7XG4gICAgICAgIGlmICgkbGluay5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5faGlkZSgpO1xuICAgICAgICAkYm9keS5vZmYoJ21vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudScpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBkcm9wZG93biBwYW5lLCBhbmQgY2hlY2tzIGZvciBjb2xsaXNpb25zIGZpcnN0LlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkc3ViIC0gdWwgZWxlbWVudCB0aGF0IGlzIGEgc3VibWVudSB0byBzaG93XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I3Nob3dcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvdygkc3ViKSB7XG4gICAgICB2YXIgaWR4ID0gdGhpcy4kdGFicy5pbmRleCh0aGlzLiR0YWJzLmZpbHRlcihmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZWwpLmZpbmQoJHN1YikubGVuZ3RoID4gMDtcbiAgICAgIH0pKTtcbiAgICAgIHZhciAkc2licyA9ICRzdWIucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLnNpYmxpbmdzKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgICAgdGhpcy5faGlkZSgkc2licywgaWR4KTtcbiAgICAgICRzdWIuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpLmFkZENsYXNzKCdqcy1kcm9wZG93bi1hY3RpdmUnKS5wYXJlbnQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50JykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgdmFyIGNsZWFyID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJCb3hcIl0uSW1Ob3RUb3VjaGluZ1lvdSgkc3ViLCBudWxsLCB0cnVlKTtcbiAgICAgIGlmICghY2xlYXIpIHtcbiAgICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJy1yaWdodCcgOiAnLWxlZnQnLFxuICAgICAgICAgICAgJHBhcmVudExpID0gJHN1Yi5wYXJlbnQoJy5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgICAgICAkcGFyZW50TGkucmVtb3ZlQ2xhc3MoJ29wZW5zJyArIG9sZENsYXNzKS5hZGRDbGFzcygnb3BlbnMtJyArIHRoaXMub3B0aW9ucy5hbGlnbm1lbnQpO1xuICAgICAgICBjbGVhciA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2JveF9fW1wiQm94XCJdLkltTm90VG91Y2hpbmdZb3UoJHN1YiwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgIGlmICghY2xlYXIpIHtcbiAgICAgICAgICAkcGFyZW50TGkucmVtb3ZlQ2xhc3MoJ29wZW5zLScgKyB0aGlzLm9wdGlvbnMuYWxpZ25tZW50KS5hZGRDbGFzcygnb3BlbnMtaW5uZXInKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgJHN1Yi5jc3MoJ3Zpc2liaWxpdHknLCAnJyk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgICB0aGlzLl9hZGRCb2R5SGFuZGxlcigpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBuZXcgZHJvcGRvd24gcGFuZSBpcyB2aXNpYmxlLlxuICAgICAgICogQGV2ZW50IERyb3Bkb3duTWVudSNzaG93XG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi5kcm9wZG93bm1lbnUnLCBbJHN1Yl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIGEgc2luZ2xlLCBjdXJyZW50bHkgb3BlbiBkcm9wZG93biBwYW5lLCBpZiBwYXNzZWQgYSBwYXJhbWV0ZXIsIG90aGVyd2lzZSwgaGlkZXMgZXZlcnl0aGluZy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSBlbGVtZW50IHdpdGggYSBzdWJtZW51IHRvIGhpZGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gaW5kZXggb2YgdGhlICR0YWJzIGNvbGxlY3Rpb24gdG8gaGlkZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19oaWRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hpZGUoJGVsZW0sIGlkeCkge1xuICAgICAgdmFyICR0b0Nsb3NlO1xuICAgICAgaWYgKCRlbGVtICYmICRlbGVtLmxlbmd0aCkge1xuICAgICAgICAkdG9DbG9zZSA9ICRlbGVtO1xuICAgICAgfSBlbHNlIGlmIChpZHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAkdG9DbG9zZSA9IHRoaXMuJHRhYnMubm90KGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICAgIHJldHVybiBpID09PSBpZHg7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHRvQ2xvc2UgPSB0aGlzLiRlbGVtZW50O1xuICAgICAgfVxuICAgICAgdmFyIHNvbWV0aGluZ1RvQ2xvc2UgPSAkdG9DbG9zZS5oYXNDbGFzcygnaXMtYWN0aXZlJykgfHwgJHRvQ2xvc2UuZmluZCgnLmlzLWFjdGl2ZScpLmxlbmd0aCA+IDA7XG5cbiAgICAgIGlmIChzb21ldGhpbmdUb0Nsb3NlKSB7XG4gICAgICAgICR0b0Nsb3NlLmZpbmQoJ2xpLmlzLWFjdGl2ZScpLmFkZCgkdG9DbG9zZSkuYXR0cih7XG4gICAgICAgICAgJ2RhdGEtaXMtY2xpY2snOiBmYWxzZVxuICAgICAgICB9KS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgICAgJHRvQ2xvc2UuZmluZCgndWwuanMtZHJvcGRvd24tYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2pzLWRyb3Bkb3duLWFjdGl2ZScpO1xuXG4gICAgICAgIGlmICh0aGlzLmNoYW5nZWQgfHwgJHRvQ2xvc2UuZmluZCgnb3BlbnMtaW5uZXInKS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgb2xkQ2xhc3MgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnbGVmdCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAgICR0b0Nsb3NlLmZpbmQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50JykuYWRkKCR0b0Nsb3NlKS5yZW1vdmVDbGFzcygnb3BlbnMtaW5uZXIgb3BlbnMtJyArIHRoaXMub3B0aW9ucy5hbGlnbm1lbnQpLmFkZENsYXNzKCdvcGVucy0nICsgb2xkQ2xhc3MpO1xuICAgICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvcGVuIG1lbnVzIGFyZSBjbG9zZWQuXG4gICAgICAgICAqIEBldmVudCBEcm9wZG93bk1lbnUjaGlkZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3dubWVudScsIFskdG9DbG9zZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRtZW51SXRlbXMub2ZmKCcuemYuZHJvcGRvd25tZW51JykucmVtb3ZlQXR0cignZGF0YS1pcy1jbGljaycpLnJlbW92ZUNsYXNzKCdpcy1yaWdodC1hcnJvdyBpcy1sZWZ0LWFycm93IGlzLWRvd24tYXJyb3cgb3BlbnMtcmlnaHQgb3BlbnMtbGVmdCBvcGVucy1pbm5lcicpO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudC5ib2R5KS5vZmYoJy56Zi5kcm9wZG93bm1lbnUnKTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX25lc3RfX1tcIk5lc3RcIl0uQnVybih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcGRvd25NZW51O1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJQbHVnaW5cIl0pO1xuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5cblxuRHJvcGRvd25NZW51LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRGlzYWxsb3dzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgc3VibWVudXNcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVIb3ZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyBhIHN1Ym1lbnUgdG8gYXV0b21hdGljYWxseSBjbG9zZSBvbiBhIG1vdXNlbGVhdmUgZXZlbnQsIGlmIG5vdCBjbGlja2VkIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGF1dG9jbG9zZTogdHJ1ZSxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IG9wZW5pbmcgYSBzdWJtZW51IG9uIGhvdmVyIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwXG4gICAqL1xuICBob3ZlckRlbGF5OiA1MCxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBvcGVuL3JlbWFpbiBvcGVuIG9uIHBhcmVudCBjbGljayBldmVudC4gQWxsb3dzIGN1cnNvciB0byBtb3ZlIGF3YXkgZnJvbSBtZW51LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2xpY2tPcGVuOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IGNsb3NpbmcgYSBzdWJtZW51IG9uIGEgbW91c2VsZWF2ZSBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCA1MDBcbiAgICovXG5cbiAgY2xvc2luZ1RpbWU6IDUwMCxcbiAgLyoqXG4gICAqIFBvc2l0aW9uIG9mIHRoZSBtZW51IHJlbGF0aXZlIHRvIHdoYXQgZGlyZWN0aW9uIHRoZSBzdWJtZW51cyBzaG91bGQgb3Blbi4gSGFuZGxlZCBieSBKUy4gQ2FuIGJlIGAnYXV0bydgLCBgJ2xlZnQnYCBvciBgJ3JpZ2h0J2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICBhbGlnbm1lbnQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsbG93IGNsaWNrcyBvbiB0aGUgYm9keSB0byBjbG9zZSBhbnkgb3BlbiBzdWJtZW51cy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICAvKipcbiAgICogQWxsb3cgY2xpY2tzIG9uIGxlYWYgYW5jaG9yIGxpbmtzIHRvIGNsb3NlIGFueSBvcGVuIHN1Ym1lbnVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2tJbnNpZGU6IHRydWUsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHZlcnRpY2FsIG9yaWVudGVkIG1lbnVzLCBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgYHZlcnRpY2FsYC4gVXBkYXRlIHRoaXMgaWYgdXNpbmcgeW91ciBvd24gY2xhc3MuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3ZlcnRpY2FsJ1xuICAgKi9cbiAgdmVydGljYWxDbGFzczogJ3ZlcnRpY2FsJyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gcmlnaHQtc2lkZSBvcmllbnRlZCBtZW51cywgRm91bmRhdGlvbiBkZWZhdWx0IGlzIGBhbGlnbi1yaWdodGAuIFVwZGF0ZSB0aGlzIGlmIHVzaW5nIHlvdXIgb3duIGNsYXNzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhbGlnbi1yaWdodCdcbiAgICovXG4gIHJpZ2h0Q2xhc3M6ICdhbGlnbi1yaWdodCcsXG4gIC8qKlxuICAgKiBCb29sZWFuIHRvIGZvcmNlIG92ZXJpZGUgdGhlIGNsaWNraW5nIG9mIGxpbmtzIHRvIHBlcmZvcm0gZGVmYXVsdCBhY3Rpb24sIG9uIHNlY29uZCB0b3VjaCBldmVudCBmb3IgbW9iaWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBmb3JjZUZvbGxvdzogdHJ1ZVxufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtLZXlib2FyZDogd2luZG93LkZvdW5kYXRpb24uS2V5Ym9hcmR9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Qm94OiB3aW5kb3cuRm91bmRhdGlvbi5Cb3h9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gODQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge05lc3Q6IHdpbmRvdy5Gb3VuZGF0aW9uLk5lc3R9O1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4NSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge29uSW1hZ2VzTG9hZGVkOiB3aW5kb3cuRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9lcXVhbGl6ZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX1tcIkZvdW5kYXRpb25cIl0ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9lcXVhbGl6ZXJfX1tcImFcIiAvKiBFcXVhbGl6ZXIgKi9dLCAnRXF1YWxpemVyJyk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtQbHVnaW46IHdpbmRvdy5Gb3VuZGF0aW9uLlBsdWdpbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtydGw6IHdpbmRvdy5Gb3VuZGF0aW9uLnJ0bCwgR2V0WW9EaWdpdHM6IHdpbmRvdy5Gb3VuZGF0aW9uLkdldFlvRGlnaXRzLCB0cmFuc2l0aW9uZW5kOiB3aW5kb3cuRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRXF1YWxpemVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9pbWFnZUxvYWRlcl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfaW1hZ2VMb2FkZXJfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuXG5cbi8qKlxuICogRXF1YWxpemVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5lcXVhbGl6ZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5pbWFnZUxvYWRlciBpZiBlcXVhbGl6ZXIgY29udGFpbnMgaW1hZ2VzXG4gKi9cblxudmFyIEVxdWFsaXplciA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhFcXVhbGl6ZXIsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIEVxdWFsaXplcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXF1YWxpemVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRXF1YWxpemVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRXF1YWxpemVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRXF1YWxpemVyLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEVxdWFsaXplci5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBFcXVhbGl6ZXJcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI2luaXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIEVxdWFsaXplci5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnRXF1YWxpemVyJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgRXF1YWxpemVyIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBlcXVhbGl6ZXIgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgdmFyIGVxSWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtZXF1YWxpemVyJykgfHwgJyc7XG4gICAgICB2YXIgJHdhdGNoZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplci13YXRjaD1cIicgKyBlcUlkICsgJ1wiXScpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLl9pbml0KCk7XG5cbiAgICAgIHRoaXMuJHdhdGNoZWQgPSAkd2F0Y2hlZC5sZW5ndGggPyAkd2F0Y2hlZCA6IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyLXdhdGNoXScpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLXJlc2l6ZScsIGVxSWQgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcIkdldFlvRGlnaXRzXCJdKSg2LCAnZXEnKSk7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtbXV0YXRlJywgZXFJZCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiR2V0WW9EaWdpdHNcIl0pKDYsICdlcScpKTtcblxuICAgICAgdGhpcy5oYXNOZXN0ZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplcl0nKS5sZW5ndGggPiAwO1xuICAgICAgdGhpcy5pc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQucGFyZW50c1VudGlsKGRvY3VtZW50LmJvZHksICdbZGF0YS1lcXVhbGl6ZXJdJykubGVuZ3RoID4gMDtcbiAgICAgIHRoaXMuaXNPbiA9IGZhbHNlO1xuICAgICAgdGhpcy5fYmluZEhhbmRsZXIgPSB7XG4gICAgICAgIG9uUmVzaXplTWVCb3VuZDogdGhpcy5fb25SZXNpemVNZS5iaW5kKHRoaXMpLFxuICAgICAgICBvblBvc3RFcXVhbGl6ZWRCb3VuZDogdGhpcy5fb25Qb3N0RXF1YWxpemVkLmJpbmQodGhpcylcbiAgICAgIH07XG5cbiAgICAgIHZhciBpbWdzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKTtcbiAgICAgIHZhciB0b29TbWFsbDtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXF1YWxpemVPbikge1xuICAgICAgICB0b29TbWFsbCA9IHRoaXMuX2NoZWNrTVEoKTtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9jaGVja01RLmJpbmQodGhpcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgICB9XG4gICAgICBpZiAodG9vU21hbGwgIT09IHVuZGVmaW5lZCAmJiB0b29TbWFsbCA9PT0gZmFsc2UgfHwgdG9vU21hbGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaW1ncy5sZW5ndGgpIHtcbiAgICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfaW1hZ2VMb2FkZXJfX1tcIm9uSW1hZ2VzTG9hZGVkXCJdKShpbWdzLCB0aGlzLl9yZWZsb3cuYmluZCh0aGlzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBpZiB0aGUgYnJlYWtwb2ludCBpcyB0b28gc21hbGwuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3BhdXNlRXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BhdXNlRXZlbnRzKCkge1xuICAgICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZih7XG4gICAgICAgICcuemYuZXF1YWxpemVyJzogdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQsXG4gICAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kLFxuICAgICAgICAnbXV0YXRlbWUuemYudHJpZ2dlcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyByZXNpemVtZS56Zi50cmlnZ2VyLCB3aXRoIGJvdW5kIHRoaXMgb24gX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19vblJlc2l6ZU1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVzaXplTWUoZSkge1xuICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyBwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19vblBvc3RFcXVhbGl6ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Qb3N0RXF1YWxpemVkKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcy4kZWxlbWVudFswXSkge1xuICAgICAgICB0aGlzLl9yZWZsb3coKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEVxdWFsaXplci5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgaWYgKHRoaXMuaGFzTmVzdGVkKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJywgdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZCk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmQpO1xuICAgICAgfVxuICAgICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCB0byB0aGUgbWluaW11bSByZXF1aXJlZCBzaXplLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19jaGVja01RJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NoZWNrTVEoKSB7XG4gICAgICB2YXIgdG9vU21hbGwgPSAhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiTWVkaWFRdWVyeVwiXS5pcyh0aGlzLm9wdGlvbnMuZXF1YWxpemVPbik7XG4gICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNPbikge1xuICAgICAgICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5pc09uKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0b29TbWFsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIG5vb3AgdmVyc2lvbiBmb3IgdGhlIHBsdWdpblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19raWxsc3dpdGNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2tpbGxzd2l0Y2goKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgRXF1YWxpemVyIHVwb24gRE9NIGNoYW5nZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZWZsb3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVmbG93KCkge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZXF1YWxpemVPblN0YWNrKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1N0YWNrZWQoKSkge1xuICAgICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lcXVhbGl6ZUJ5Um93KSB7XG4gICAgICAgIHRoaXMuZ2V0SGVpZ2h0c0J5Um93KHRoaXMuYXBwbHlIZWlnaHRCeVJvdy5iaW5kKHRoaXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2V0SGVpZ2h0cyh0aGlzLmFwcGx5SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hbnVhbGx5IGRldGVybWluZXMgaWYgdGhlIGZpcnN0IDIgZWxlbWVudHMgYXJlICpOT1QqIHN0YWNrZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2lzU3RhY2tlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1N0YWNrZWQoKSB7XG4gICAgICBpZiAoIXRoaXMuJHdhdGNoZWRbMF0gfHwgIXRoaXMuJHdhdGNoZWRbMV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kd2F0Y2hlZFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgIT09IHRoaXMuJHdhdGNoZWRbMV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBvdXRlciBoZWlnaHRzIG9mIGNoaWxkcmVuIGNvbnRhaW5lZCB3aXRoaW4gYW4gRXF1YWxpemVyIHBhcmVudCBhbmQgcmV0dXJucyB0aGVtIGluIGFuIGFycmF5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBBIG5vbi1vcHRpb25hbCBjYWxsYmFjayB0byByZXR1cm4gdGhlIGhlaWdodHMgYXJyYXkgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBoZWlnaHRzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRIZWlnaHRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVpZ2h0cyhjYikge1xuICAgICAgdmFyIGhlaWdodHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLiR3YXRjaGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMuJHdhdGNoZWRbaV0uc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICBoZWlnaHRzLnB1c2godGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRIZWlnaHQpO1xuICAgICAgfVxuICAgICAgY2IoaGVpZ2h0cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIG91dGVyIGhlaWdodHMgb2YgY2hpbGRyZW4gY29udGFpbmVkIHdpdGhpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IGFuZCByZXR1cm5zIHRoZW0gaW4gYW4gYXJyYXlcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIEEgbm9uLW9wdGlvbmFsIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgaGVpZ2h0cyBhcnJheSB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGdyb3VwcyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXIgZ3JvdXBlZCBieSByb3cgd2l0aCBlbGVtZW50LGhlaWdodCBhbmQgbWF4IGFzIGxhc3QgY2hpbGRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0SGVpZ2h0c0J5Um93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVpZ2h0c0J5Um93KGNiKSB7XG4gICAgICB2YXIgbGFzdEVsVG9wT2Zmc2V0ID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGggPyB0aGlzLiR3YXRjaGVkLmZpcnN0KCkub2Zmc2V0KCkudG9wIDogMCxcbiAgICAgICAgICBncm91cHMgPSBbXSxcbiAgICAgICAgICBncm91cCA9IDA7XG4gICAgICAvL2dyb3VwIGJ5IFJvd1xuICAgICAgZ3JvdXBzW2dyb3VwXSA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGhpcy4kd2F0Y2hlZFtpXS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAgIC8vbWF5YmUgY291bGQgdXNlIHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0VG9wXG4gICAgICAgIHZhciBlbE9mZnNldFRvcCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcy4kd2F0Y2hlZFtpXSkub2Zmc2V0KCkudG9wO1xuICAgICAgICBpZiAoZWxPZmZzZXRUb3AgIT0gbGFzdEVsVG9wT2Zmc2V0KSB7XG4gICAgICAgICAgZ3JvdXArKztcbiAgICAgICAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgICAgICAgbGFzdEVsVG9wT2Zmc2V0ID0gZWxPZmZzZXRUb3A7XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzW2dyb3VwXS5wdXNoKFt0aGlzLiR3YXRjaGVkW2ldLCB0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodF0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgbG4gPSBncm91cHMubGVuZ3RoOyBqIDwgbG47IGorKykge1xuICAgICAgICB2YXIgaGVpZ2h0cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZ3JvdXBzW2pdKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgICAgICB9KS5nZXQoKTtcbiAgICAgICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuICAgICAgICBncm91cHNbal0ucHVzaChtYXgpO1xuICAgICAgfVxuICAgICAgY2IoZ3JvdXBzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBDU1MgaGVpZ2h0IHByb3BlcnR5IG9mIGVhY2ggY2hpbGQgaW4gYW4gRXF1YWxpemVyIHBhcmVudCB0byBtYXRjaCB0aGUgdGFsbGVzdFxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGhlaWdodHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyXG4gICAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXBwbHlIZWlnaHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUhlaWdodChoZWlnaHRzKSB7XG4gICAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG5cbiAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCBtYXgpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgQ1NTIGhlaWdodCBwcm9wZXJ0eSBvZiBlYWNoIGNoaWxkIGluIGFuIEVxdWFsaXplciBwYXJlbnQgdG8gbWF0Y2ggdGhlIHRhbGxlc3QgYnkgcm93XG4gICAgICogQHBhcmFtIHthcnJheX0gZ3JvdXBzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lciBncm91cGVkIGJ5IHJvdyB3aXRoIGVsZW1lbnQsaGVpZ2h0IGFuZCBtYXggYXMgbGFzdCBjaGlsZFxuICAgICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRyb3dcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRyb3dcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXBwbHlIZWlnaHRCeVJvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5SGVpZ2h0QnlSb3coZ3JvdXBzKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBncm91cHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGdyb3Vwc0lMZW5ndGggPSBncm91cHNbaV0ubGVuZ3RoLFxuICAgICAgICAgICAgbWF4ID0gZ3JvdXBzW2ldW2dyb3Vwc0lMZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGdyb3Vwc0lMZW5ndGggPD0gMikge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZ3JvdXBzW2ldWzBdWzBdKS5jc3MoeyAnaGVpZ2h0JzogJ2F1dG8nIH0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIHBlciByb3cgYXJlIGFwcGxpZWRcbiAgICAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkcm93XG4gICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWRyb3cuemYuZXF1YWxpemVyJyk7XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBsZW5KID0gZ3JvdXBzSUxlbmd0aCAtIDE7IGogPCBsZW5KOyBqKyspIHtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGdyb3Vwc1tpXVtqXVswXSkuY3NzKHsgJ2hlaWdodCc6IG1heCB9KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgcGVyIHJvdyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkcm93XG4gICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVxdWFsaXplcjtcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiUGx1Z2luXCJdKTtcblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuXG5cbkVxdWFsaXplci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEVuYWJsZSBoZWlnaHQgZXF1YWxpemF0aW9uIHdoZW4gc3RhY2tlZCBvbiBzbWFsbGVyIHNjcmVlbnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlcXVhbGl6ZU9uU3RhY2s6IGZhbHNlLFxuICAvKipcbiAgICogRW5hYmxlIGhlaWdodCBlcXVhbGl6YXRpb24gcm93IGJ5IHJvdy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVxdWFsaXplQnlSb3c6IGZhbHNlLFxuICAvKipcbiAgICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWluaW11bSBicmVha3BvaW50IHNpemUgdGhlIHBsdWdpbiBzaG91bGQgZXF1YWxpemUgaGVpZ2h0cyBvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgZXF1YWxpemVPbjogJydcbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TWVkaWFRdWVyeTogd2luZG93LkZvdW5kYXRpb24uTWVkaWFRdWVyeX07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4Nik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7UGx1Z2luOiB3aW5kb3cuRm91bmRhdGlvbi5QbHVnaW59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25faW50ZXJjaGFuZ2VfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX1tcIkZvdW5kYXRpb25cIl0ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9pbnRlcmNoYW5nZV9fW1wiYVwiIC8qIEludGVyY2hhbmdlICovXSwgJ0ludGVyY2hhbmdlJyk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtydGw6IHdpbmRvdy5Gb3VuZGF0aW9uLnJ0bCwgR2V0WW9EaWdpdHM6IHdpbmRvdy5Gb3VuZGF0aW9uLkdldFlvRGlnaXRzLCB0cmFuc2l0aW9uZW5kOiB3aW5kb3cuRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDUwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gSW50ZXJjaGFuZ2U7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuXG4vKipcbiAqIEludGVyY2hhbmdlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5pbnRlcmNoYW5nZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxudmFyIEludGVyY2hhbmdlID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKEludGVyY2hhbmdlLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBJbnRlcmNoYW5nZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW50ZXJjaGFuZ2UpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbnRlcmNoYW5nZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEludGVyY2hhbmdlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSW50ZXJjaGFuZ2UsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgSW50ZXJjaGFuZ2UuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgSW50ZXJjaGFuZ2VcbiAgICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjaW5pdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgSW50ZXJjaGFuZ2UuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgICAgdGhpcy5jdXJyZW50UGF0aCA9ICcnO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnSW50ZXJjaGFuZ2UnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIEludGVyY2hhbmdlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBpbnRlcmNoYW5nZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLl9pbml0KCk7XG5cbiAgICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcIkdldFlvRGlnaXRzXCJdKSg2LCAnaW50ZXJjaGFuZ2UnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdkYXRhLXJlc2l6ZSc6IGlkLFxuICAgICAgICAnaWQnOiBpZFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2FkZEJyZWFrcG9pbnRzKCk7XG4gICAgICB0aGlzLl9nZW5lcmF0ZVJ1bGVzKCk7XG4gICAgICB0aGlzLl9yZWZsb3coKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEludGVyY2hhbmdlLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJykub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuX3JlZmxvdygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgSW50ZXJjaGFuZ2UgdXBvbiBET00gY2hhbmdlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3JlZmxvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWZsb3coKSB7XG4gICAgICB2YXIgbWF0Y2g7XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUsIGJ1dCBvbmx5IHNhdmUgdGhlIGxhc3QgbWF0Y2hcbiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5ydWxlcykge1xuICAgICAgICBpZiAodGhpcy5ydWxlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlc1tpXTtcbiAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocnVsZS5xdWVyeSkubWF0Y2hlcykge1xuICAgICAgICAgICAgbWF0Y2ggPSBydWxlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlKG1hdGNoLnBhdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIEZvdW5kYXRpb24gYnJlYWtwb2ludHMgYW5kIGFkZHMgdGhlbSB0byB0aGUgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTIG9iamVjdC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRkQnJlYWtwb2ludHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkQnJlYWtwb2ludHMoKSB7XG4gICAgICBmb3IgKHZhciBpIGluIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcIk1lZGlhUXVlcnlcIl0ucXVlcmllcykge1xuICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiTWVkaWFRdWVyeVwiXS5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgdmFyIHF1ZXJ5ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiTWVkaWFRdWVyeVwiXS5xdWVyaWVzW2ldO1xuICAgICAgICAgIEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeS5uYW1lXSA9IHF1ZXJ5LnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBJbnRlcmNoYW5nZSBlbGVtZW50IGZvciB0aGUgcHJvdmlkZWQgbWVkaWEgcXVlcnkgKyBjb250ZW50IHBhaXJpbmdzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdGhhdCBpcyBhbiBJbnRlcmNoYW5nZSBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gc2NlbmFyaW9zIC0gQXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGhhdmUgJ21xJyBhbmQgJ3BhdGgnIGtleXMgd2l0aCBjb3JyZXNwb25kaW5nIGtleXNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2dlbmVyYXRlUnVsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2VuZXJhdGVSdWxlcyhlbGVtZW50KSB7XG4gICAgICB2YXIgcnVsZXNMaXN0ID0gW107XG4gICAgICB2YXIgcnVsZXM7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucnVsZXMpIHtcbiAgICAgICAgcnVsZXMgPSB0aGlzLm9wdGlvbnMucnVsZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnaW50ZXJjaGFuZ2UnKTtcbiAgICAgIH1cblxuICAgICAgcnVsZXMgPSB0eXBlb2YgcnVsZXMgPT09ICdzdHJpbmcnID8gcnVsZXMubWF0Y2goL1xcWy4qP1xcXS9nKSA6IHJ1bGVzO1xuXG4gICAgICBmb3IgKHZhciBpIGluIHJ1bGVzKSB7XG4gICAgICAgIGlmIChydWxlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc2xpY2UoMSwgLTEpLnNwbGl0KCcsICcpO1xuICAgICAgICAgIHZhciBwYXRoID0gcnVsZS5zbGljZSgwLCAtMSkuam9pbignJyk7XG4gICAgICAgICAgdmFyIHF1ZXJ5ID0gcnVsZVtydWxlLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV0pIHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBydWxlc0xpc3QucHVzaCh7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzTGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGBzcmNgIHByb3BlcnR5IG9mIGFuIGltYWdlLCBvciBjaGFuZ2UgdGhlIEhUTUwgb2YgYSBjb250YWluZXIsIHRvIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCAtIFBhdGggdG8gdGhlIGltYWdlIG9yIEhUTUwgcGFydGlhbC5cbiAgICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVwbGFjZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFBhdGggPT09IHBhdGgpIHJldHVybjtcblxuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICB0cmlnZ2VyID0gJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJztcblxuICAgICAgLy8gUmVwbGFjaW5nIGltYWdlc1xuICAgICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0ubm9kZU5hbWUgPT09ICdJTUcnKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignc3JjJywgcGF0aCkub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgICB9KS50cmlnZ2VyKHRyaWdnZXIpO1xuICAgICAgfVxuICAgICAgLy8gUmVwbGFjaW5nIGJhY2tncm91bmQgaW1hZ2VzXG4gICAgICBlbHNlIGlmIChwYXRoLm1hdGNoKC9cXC4oZ2lmfGpwZ3xqcGVnfHBuZ3xzdmd8dGlmZikoWz8jXS4qKT8vaSkpIHtcbiAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCgvZywgJyUyOCcpLnJlcGxhY2UoL1xcKS9nLCAnJTI5Jyk7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoJyArIHBhdGggKyAnKScgfSkudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXBsYWNpbmcgSFRNTFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZ2V0KHBhdGgsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5odG1sKHJlc3BvbnNlKS50cmlnZ2VyKHRyaWdnZXIpO1xuICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHJlc3BvbnNlKS5mb3VuZGF0aW9uKCk7XG4gICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRQYXRoID0gcGF0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIGNvbnRlbnQgaW4gYW4gSW50ZXJjaGFuZ2UgZWxlbWVudCBpcyBkb25lIGJlaW5nIGxvYWRlZC5cbiAgICAgICAqIEBldmVudCBJbnRlcmNoYW5nZSNyZXBsYWNlZFxuICAgICAgICovXG4gICAgICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgaW50ZXJjaGFuZ2UuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZigncmVzaXplbWUuemYudHJpZ2dlcicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbnRlcmNoYW5nZTtcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiUGx1Z2luXCJdKTtcblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuXG5cbkludGVyY2hhbmdlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogUnVsZXMgdG8gYmUgYXBwbGllZCB0byBJbnRlcmNoYW5nZSBlbGVtZW50cy4gU2V0IHdpdGggdGhlIGBkYXRhLWludGVyY2hhbmdlYCBhcnJheSBub3RhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7P2FycmF5fVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBydWxlczogbnVsbFxufTtcblxuSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTID0ge1xuICAnbGFuZHNjYXBlJzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgJ3BvcnRyYWl0JzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAncmV0aW5hJzogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TWVkaWFRdWVyeTogd2luZG93LkZvdW5kYXRpb24uTWVkaWFRdWVyeX07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA4Njpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4Nyk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7UGx1Z2luOiB3aW5kb3cuRm91bmRhdGlvbi5QbHVnaW59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fbWFnZWxsYW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpO1xuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX1tcIkZvdW5kYXRpb25cIl0ucGx1Z2luKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9tYWdlbGxhbl9fW1wiYVwiIC8qIE1hZ2VsbGFuICovXSwgJ01hZ2VsbGFuJyk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtydGw6IHdpbmRvdy5Gb3VuZGF0aW9uLnJ0bCwgR2V0WW9EaWdpdHM6IHdpbmRvdy5Gb3VuZGF0aW9uLkdldFlvRGlnaXRzLCB0cmFuc2l0aW9uZW5kOiB3aW5kb3cuRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDUxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWFnZWxsYW47IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9zbW9vdGhTY3JvbGxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9zbW9vdGhTY3JvbGxfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9zbW9vdGhTY3JvbGxfXyk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuLyoqXG4gKiBNYWdlbGxhbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubWFnZWxsYW5cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnNtb290aFNjcm9sbFxuICovXG5cbnZhciBNYWdlbGxhbiA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhNYWdlbGxhbiwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gTWFnZWxsYW4oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hZ2VsbGFuKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTWFnZWxsYW4uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNYWdlbGxhbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1hZ2VsbGFuLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIE1hZ2VsbGFuLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIE1hZ2VsbGFuXG4gICAgICogQGZpcmVzIE1hZ2VsbGFuI2luaXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5leHRlbmQoe30sIE1hZ2VsbGFuLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdNYWdlbGxhbic7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICB0aGlzLmNhbGNQb2ludHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgTWFnZWxsYW4gcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGVxdWFsaXplciBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJHZXRZb0RpZ2l0c1wiXSkoNiwgJ21hZ2VsbGFuJyk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy4kdGFyZ2V0cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLW1hZ2VsbGFuLXRhcmdldF0nKTtcbiAgICAgIHRoaXMuJGxpbmtzID0gdGhpcy4kZWxlbWVudC5maW5kKCdhJyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAnZGF0YS1yZXNpemUnOiBpZCxcbiAgICAgICAgJ2RhdGEtc2Nyb2xsJzogaWQsXG4gICAgICAgICdpZCc6IGlkXG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGFjdGl2ZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoKTtcbiAgICAgIHRoaXMuc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCk7XG5cbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgYW4gYXJyYXkgb2YgcGl4ZWwgdmFsdWVzIHRoYXQgYXJlIHRoZSBkZW1hcmNhdGlvbiBsaW5lcyBiZXR3ZWVuIGxvY2F0aW9ucyBvbiB0aGUgcGFnZS5cbiAgICAgKiBDYW4gYmUgaW52b2tlZCBpZiBuZXcgZWxlbWVudHMgYXJlIGFkZGVkIG9yIHRoZSBzaXplIG9mIGEgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2FsY1BvaW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGNQb2ludHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIGJvZHkgPSBkb2N1bWVudC5ib2R5LFxuICAgICAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgICB0aGlzLndpbkhlaWdodCA9IE1hdGgucm91bmQoTWF0aC5tYXgod2luZG93LmlubmVySGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCkpO1xuICAgICAgdGhpcy5kb2NIZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCkpO1xuXG4gICAgICB0aGlzLiR0YXJnZXRzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJHRhciA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksXG4gICAgICAgICAgICBwdCA9IE1hdGgucm91bmQoJHRhci5vZmZzZXQoKS50b3AgLSBfdGhpcy5vcHRpb25zLnRocmVzaG9sZCk7XG4gICAgICAgICR0YXIudGFyZ2V0UG9pbnQgPSBwdDtcbiAgICAgICAgX3RoaXMucG9pbnRzLnB1c2gocHQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBNYWdlbGxhbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgJGJvZHkgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdodG1sLCBib2R5JyksXG4gICAgICAgICAgb3B0cyA9IHtcbiAgICAgICAgZHVyYXRpb246IF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgIGVhc2luZzogX3RoaXMub3B0aW9ucy5hbmltYXRpb25FYXNpbmdcbiAgICAgIH07XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub25lKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kZWVwTGlua2luZykge1xuICAgICAgICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxUb0xvYyhsb2NhdGlvbi5oYXNoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuY2FsY1BvaW50cygpO1xuICAgICAgICBfdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbih7XG4gICAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5yZWZsb3cuYmluZCh0aGlzKSxcbiAgICAgICAgJ3Njcm9sbG1lLnpmLnRyaWdnZXInOiB0aGlzLl91cGRhdGVBY3RpdmUuYmluZCh0aGlzKVxuICAgICAgfSkub24oJ2NsaWNrLnpmLm1hZ2VsbGFuJywgJ2FbaHJlZl49XCIjXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgYXJyaXZhbCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGFycml2YWwpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2RlZXBMaW5rU2Nyb2xsID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpIHtcbiAgICAgICAgICBfdGhpcy5zY3JvbGxUb0xvYyh3aW5kb3cubG9jYXRpb24uaGFzaCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aGlzLl9kZWVwTGlua1Njcm9sbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gbG9jYXRpb24gb24gdGhlIHBhZ2UuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGxvYyAtIGEgcHJvcGVybHkgZm9ybWF0dGVkIGpRdWVyeSBpZCBzZWxlY3Rvci4gRXhhbXBsZTogJyNmb28nXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Njcm9sbFRvTG9jJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG9Mb2MobG9jKSB7XG4gICAgICB0aGlzLl9pblRyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGFuaW1hdGlvbkVhc2luZzogdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZyxcbiAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IHRoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgdGhyZXNob2xkOiB0aGlzLm9wdGlvbnMudGhyZXNob2xkLFxuICAgICAgICBvZmZzZXQ6IHRoaXMub3B0aW9ucy5vZmZzZXRcbiAgICAgIH07XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9zbW9vdGhTY3JvbGxfX1tcIlNtb290aFNjcm9sbFwiXS5zY3JvbGxUb0xvYyhsb2MsIG9wdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX2luVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBNYWdlbGxhbiB1cG9uIERPTSBjaGFuZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVmbG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmbG93KCkge1xuICAgICAgdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgICB0aGlzLl91cGRhdGVBY3RpdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB2aXNpYmlsaXR5IG9mIGFuIGFjdGl2ZSBsb2NhdGlvbiBsaW5rLCBhbmQgdXBkYXRlcyB0aGUgdXJsIGhhc2ggZm9yIHRoZSBwYWdlLCBpZiBkZWVwTGlua2luZyBlbmFibGVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIE1hZ2VsbGFuI3VwZGF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlQWN0aXZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZUFjdGl2ZSgpIC8qZXZ0LCBlbGVtLCBzY3JvbGxQb3MqL3tcbiAgICAgIGlmICh0aGlzLl9pblRyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHdpblBvcyA9IC8qc2Nyb2xsUG9zIHx8Ki9wYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQsIDEwKSxcbiAgICAgICAgICBjdXJJZHg7XG5cbiAgICAgIGlmICh3aW5Qb3MgKyB0aGlzLndpbkhlaWdodCA9PT0gdGhpcy5kb2NIZWlnaHQpIHtcbiAgICAgICAgY3VySWR4ID0gdGhpcy5wb2ludHMubGVuZ3RoIC0gMTtcbiAgICAgIH0gZWxzZSBpZiAod2luUG9zIDwgdGhpcy5wb2ludHNbMF0pIHtcbiAgICAgICAgY3VySWR4ID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlzRG93biA9IHRoaXMuc2Nyb2xsUG9zIDwgd2luUG9zLFxuICAgICAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgY3VyVmlzaWJsZSA9IHRoaXMucG9pbnRzLmZpbHRlcihmdW5jdGlvbiAocCwgaSkge1xuICAgICAgICAgIHJldHVybiBpc0Rvd24gPyBwIC0gX3RoaXMub3B0aW9ucy5vZmZzZXQgPD0gd2luUG9zIDogcCAtIF90aGlzLm9wdGlvbnMub2Zmc2V0IC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQgPD0gd2luUG9zO1xuICAgICAgICB9KTtcbiAgICAgICAgY3VySWR4ID0gY3VyVmlzaWJsZS5sZW5ndGggPyBjdXJWaXNpYmxlLmxlbmd0aCAtIDEgOiAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRhY3RpdmUucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcbiAgICAgIHRoaXMuJGFjdGl2ZSA9IHRoaXMuJGxpbmtzLmZpbHRlcignW2hyZWY9XCIjJyArIHRoaXMuJHRhcmdldHMuZXEoY3VySWR4KS5kYXRhKCdtYWdlbGxhbi10YXJnZXQnKSArICdcIl0nKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKSB7XG4gICAgICAgIHZhciBoYXNoID0gXCJcIjtcbiAgICAgICAgaWYgKGN1cklkeCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBoYXNoID0gdGhpcy4kYWN0aXZlWzBdLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNoICE9PSB3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuICAgICAgICAgIGlmICh3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcm9sbFBvcyA9IHdpblBvcztcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiBtYWdlbGxhbiBpcyBmaW5pc2hlZCB1cGRhdGluZyB0byB0aGUgbmV3IGFjdGl2ZSBlbGVtZW50LlxuICAgICAgICogQGV2ZW50IE1hZ2VsbGFuI3VwZGF0ZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwZGF0ZS56Zi5tYWdlbGxhbicsIFt0aGlzLiRhY3RpdmVdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBNYWdlbGxhbiBhbmQgcmVzZXRzIHRoZSB1cmwgb2YgdGhlIHdpbmRvdy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYubWFnZWxsYW4nKS5maW5kKCcuJyArIHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZykge1xuICAgICAgICB2YXIgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZShoYXNoLCAnJyk7XG4gICAgICB9XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdwb3BzdGF0ZScsIHRoaXMuX2RlZXBMaW5rU2Nyb2xsKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWFnZWxsYW47XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fX1tcIlBsdWdpblwiXSk7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cblxuXG5NYWdlbGxhbi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgdGhlIGFuaW1hdGVkIHNjcm9sbGluZyBzaG91bGQgdGFrZSBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCA1MDBcbiAgICovXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAsXG4gIC8qKlxuICAgKiBBbmltYXRpb24gc3R5bGUgdG8gdXNlIHdoZW4gc2Nyb2xsaW5nIGJldHdlZW4gbG9jYXRpb25zLiBDYW4gYmUgYCdzd2luZydgIG9yIGAnbGluZWFyJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2xpbmVhcidcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hbmltYXRlfEpxdWVyeSBhbmltYXRlfVxuICAgKi9cbiAgYW5pbWF0aW9uRWFzaW5nOiAnbGluZWFyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gdXNlIGFzIGEgbWFya2VyIGZvciBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwXG4gICAqL1xuICB0aHJlc2hvbGQ6IDUwLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGxvY2F0aW9ucyBsaW5rIG9uIHRoZSBtYWdlbGxhbiBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLWFjdGl2ZSdcbiAgICovXG4gIGFjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgc2NyaXB0IHRvIG1hbmlwdWxhdGUgdGhlIHVybCBvZiB0aGUgY3VycmVudCBwYWdlLCBhbmQgaWYgc3VwcG9ydGVkLCBhbHRlciB0aGUgaGlzdG9yeS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5raW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIG9mZnNldDogMFxufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3Njpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7U21vb3RoU2Nyb2xsOiB3aW5kb3cuRm91bmRhdGlvbi5TbW9vdGhTY3JvbGx9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gODc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODgpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0ZvdW5kYXRpb246IHdpbmRvdy5Gb3VuZGF0aW9ufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge1BsdWdpbjogd2luZG93LkZvdW5kYXRpb24uUGx1Z2lufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDIyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX29mZmNhbnZhc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Mik7XG5cblxuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fW1wiRm91bmRhdGlvblwiXS5wbHVnaW4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX29mZmNhbnZhc19fW1wiYVwiIC8qIE9mZkNhbnZhcyAqL10sICdPZmZDYW52YXMnKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge3J0bDogd2luZG93LkZvdW5kYXRpb24ucnRsLCBHZXRZb0RpZ2l0czogd2luZG93LkZvdW5kYXRpb24uR2V0WW9EaWdpdHMsIHRyYW5zaXRpb25lbmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLnRyYW5zaXRpb25lbmR9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TW90aW9uOiB3aW5kb3cuRm91bmRhdGlvbi5Nb3Rpb24sIE1vdmU6IHdpbmRvdy5Gb3VuZGF0aW9uLk1vdmV9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7S2V5Ym9hcmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLktleWJvYXJkfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDUyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gT2ZmQ2FudmFzOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogT2ZmQ2FudmFzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vZmZjYW52YXNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbnZhciBPZmZDYW52YXMgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoT2ZmQ2FudmFzLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBPZmZDYW52YXMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9mZkNhbnZhcyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE9mZkNhbnZhcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9mZkNhbnZhcykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE9mZkNhbnZhcywgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBvZmYtY2FudmFzIHdyYXBwZXIuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgT2ZmQ2FudmFzXG4gICAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGluaXRpYWxpemUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ09mZkNhbnZhcyc7IC8vIGllOSBiYWNrIGNvbXBhdFxuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgT2ZmQ2FudmFzLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNvbnRlbnRDbGFzc2VzID0geyBiYXNlOiBbXSwgcmV2ZWFsOiBbXSB9O1xuICAgICAgdGhpcy4kbGFzdFRyaWdnZXIgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCk7XG4gICAgICB0aGlzLiR0cmlnZ2VycyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoKTtcbiAgICAgIHRoaXMucG9zaXRpb24gPSAnbGVmdCc7XG4gICAgICB0aGlzLiRjb250ZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgpO1xuICAgICAgdGhpcy5uZXN0ZWQgPSAhIXRoaXMub3B0aW9ucy5uZXN0ZWQ7XG5cbiAgICAgIC8vIERlZmluZXMgdGhlIENTUyB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzZXMgb2YgdGhlIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKFsncHVzaCcsICdvdmVybGFwJ10pLmVhY2goZnVuY3Rpb24gKGluZGV4LCB2YWwpIHtcbiAgICAgICAgX3RoaXMzLmNvbnRlbnRDbGFzc2VzLmJhc2UucHVzaCgnaGFzLXRyYW5zaXRpb24tJyArIHZhbCk7XG4gICAgICB9KTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIHZhbCkge1xuICAgICAgICBfdGhpczMuY29udGVudENsYXNzZXMuYmFzZS5wdXNoKCdoYXMtcG9zaXRpb24tJyArIHZhbCk7XG4gICAgICAgIF90aGlzMy5jb250ZW50Q2xhc3Nlcy5yZXZlYWwucHVzaCgnaGFzLXJldmVhbC0nICsgdmFsKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUcmlnZ2VycyBpbml0IGlzIGlkZW1wb3RlbnQsIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgaXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX19bXCJhXCIgLyogVHJpZ2dlcnMgKi9dLmluaXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYSk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLl9pbml0KCk7XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0ucmVnaXN0ZXIoJ09mZkNhbnZhcycsIHtcbiAgICAgICAgJ0VTQ0FQRSc6ICdjbG9zZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYnkgYWRkaW5nIHRoZSBleGl0IG92ZXJsYXkgKGlmIG5lZWRlZCkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgIC8vIEZpbmQgb2ZmLWNhbnZhcyBjb250ZW50LCBlaXRoZXIgYnkgSUQgKGlmIHNwZWNpZmllZCksIGJ5IHNpYmxpbmdzIG9yIGJ5IGNsb3Nlc3Qgc2VsZWN0b3IgKGZhbGxiYWNrKVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50SWQpIHtcbiAgICAgICAgdGhpcy4kY29udGVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgdGhpcy5vcHRpb25zLmNvbnRlbnRJZCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuc2libGluZ3MoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy4kY29udGVudCA9IHRoaXMuJGVsZW1lbnQuc2libGluZ3MoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5maXJzdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kY29udGVudCA9IHRoaXMuJGVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLmZpcnN0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmNvbnRlbnRJZCkge1xuICAgICAgICAvLyBBc3N1bWUgdGhhdCB0aGUgb2ZmLWNhbnZhcyBlbGVtZW50IGlzIG5lc3RlZCBpZiBpdCBpc24ndCBhIHNpYmxpbmcgb2YgdGhlIGNvbnRlbnRcbiAgICAgICAgdGhpcy5uZXN0ZWQgPSB0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykubGVuZ3RoID09PSAwO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuY29udGVudElkICYmIHRoaXMub3B0aW9ucy5uZXN0ZWQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gV2FybmluZyBpZiB1c2luZyBjb250ZW50IElEIHdpdGhvdXQgc2V0dGluZyB0aGUgbmVzdGVkIG9wdGlvblxuICAgICAgICAvLyBPbmNlIHRoZSBlbGVtZW50IGlzIG5lc3RlZCBpdCBpcyByZXF1aXJlZCB0byB3b3JrIHByb3Blcmx5IGluIHRoaXMgY2FzZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1JlbWVtYmVyIHRvIHVzZSB0aGUgbmVzdGVkIG9wdGlvbiBpZiB1c2luZyB0aGUgY29udGVudCBJRCBvcHRpb24hJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm5lc3RlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBGb3JjZSB0cmFuc2l0aW9uIG92ZXJsYXAgaWYgbmVzdGVkXG4gICAgICAgIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uID0gJ292ZXJsYXAnO1xuICAgICAgICAvLyBSZW1vdmUgYXBwcm9wcmlhdGUgY2xhc3NlcyBpZiBhbHJlYWR5IGFzc2lnbmVkIGluIG1hcmt1cFxuICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy10cmFuc2l0aW9uLXB1c2gnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtdHJhbnNpdGlvbi0nICsgdGhpcy5vcHRpb25zLnRyYW5zaXRpb24gKyAnIGlzLWNsb3NlZCcpO1xuXG4gICAgICAvLyBGaW5kIHRyaWdnZXJzIHRoYXQgYWZmZWN0IHRoaXMgZWxlbWVudCBhbmQgYWRkIGFyaWEtZXhwYW5kZWQgdG8gdGhlbVxuICAgICAgdGhpcy4kdHJpZ2dlcnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGRvY3VtZW50KS5maW5kKCdbZGF0YS1vcGVuPVwiJyArIGlkICsgJ1wiXSwgW2RhdGEtY2xvc2U9XCInICsgaWQgKyAnXCJdLCBbZGF0YS10b2dnbGU9XCInICsgaWQgKyAnXCJdJykuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAgIC8vIEdldCBwb3NpdGlvbiBieSBjaGVja2luZyBmb3IgcmVsYXRlZCBDU1MgY2xhc3NcbiAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLiRlbGVtZW50LmlzKCcucG9zaXRpb24tbGVmdCwgLnBvc2l0aW9uLXRvcCwgLnBvc2l0aW9uLXJpZ2h0LCAucG9zaXRpb24tYm90dG9tJykgPyB0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJykubWF0Y2goL3Bvc2l0aW9uXFwtKGxlZnR8dG9wfHJpZ2h0fGJvdHRvbSkvKVsxXSA6IHRoaXMucG9zaXRpb247XG5cbiAgICAgIC8vIEFkZCBhbiBvdmVybGF5IG92ZXIgdGhlIGNvbnRlbnQgaWYgbmVjZXNzYXJ5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHZhciBvdmVybGF5UG9zaXRpb24gPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMuJGVsZW1lbnQpLmNzcyhcInBvc2l0aW9uXCIpID09PSAnZml4ZWQnID8gJ2lzLW92ZXJsYXktZml4ZWQnIDogJ2lzLW92ZXJsYXktYWJzb2x1dGUnO1xuICAgICAgICBvdmVybGF5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnanMtb2ZmLWNhbnZhcy1vdmVybGF5ICcgKyBvdmVybGF5UG9zaXRpb24pO1xuICAgICAgICB0aGlzLiRvdmVybGF5ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShvdmVybGF5KTtcbiAgICAgICAgaWYgKG92ZXJsYXlQb3NpdGlvbiA9PT0gJ2lzLW92ZXJsYXktZml4ZWQnKSB7XG4gICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzLiRvdmVybGF5KS5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRjb250ZW50LmFwcGVuZCh0aGlzLiRvdmVybGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCA9IHRoaXMub3B0aW9ucy5pc1JldmVhbGVkIHx8IG5ldyBSZWdFeHAodGhpcy5vcHRpb25zLnJldmVhbENsYXNzLCAnZycpLnRlc3QodGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnJldmVhbE9uID0gdGhpcy5vcHRpb25zLnJldmVhbE9uIHx8IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoJy0nKVsyXTtcbiAgICAgICAgdGhpcy5fc2V0TVFDaGVja2VyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCB0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBJbml0YWxseSByZW1vdmUgYWxsIHRyYW5zaXRpb24vcG9zaXRpb24gQ1NTIGNsYXNzZXMgZnJvbSBvZmYtY2FudmFzIGNvbnRlbnQgY29udGFpbmVyLlxuICAgICAgdGhpcy5fcmVtb3ZlQ29udGVudENsYXNzZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYW5kIHRoZSBleGl0IG92ZXJsYXkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpLm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuY2xvc2UuYmluZCh0aGlzKSxcbiAgICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICAgJ2tleWRvd24uemYub2ZmY2FudmFzJzogdGhpcy5faGFuZGxlS2V5Ym9hcmQuYmluZCh0aGlzKVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrID09PSB0cnVlKSB7XG4gICAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID8gdGhpcy4kb3ZlcmxheSA6IHRoaXMuJGNvbnRlbnQ7XG4gICAgICAgICR0YXJnZXQub24oeyAnY2xpY2suemYub2ZmY2FudmFzJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgZXZlbnQgbGlzdGVuZXIgZm9yIGVsZW1lbnRzIHRoYXQgd2lsbCByZXZlYWwgYXQgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0TVFDaGVja2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldE1RQ2hlY2tlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiTWVkaWFRdWVyeVwiXS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgICAgX3RoaXMucmV2ZWFsKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uZSgnbG9hZC56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLmF0TGVhc3QoX3RoaXMub3B0aW9ucy5yZXZlYWxPbikpIHtcbiAgICAgICAgICBfdGhpcy5yZXZlYWwodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIENTUyB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzZXMgb2YgdGhlIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIuXG4gICAgICogUmVtb3ZpbmcgdGhlIGNsYXNzZXMgaXMgaW1wb3J0YW50IHdoZW4gYW5vdGhlciBvZmYtY2FudmFzIGdldHMgb3BlbmVkIHRoYXQgdXNlcyB0aGUgc2FtZSBjb250ZW50IGNvbnRhaW5lci5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGhhc1JldmVhbCAtIHRydWUgaWYgcmVsYXRlZCBvZmYtY2FudmFzIGVsZW1lbnQgaXMgcmV2ZWFsZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3JlbW92ZUNvbnRlbnRDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZUNvbnRlbnRDbGFzc2VzKGhhc1JldmVhbCkge1xuICAgICAgaWYgKHR5cGVvZiBoYXNSZXZlYWwgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aGlzLiRjb250ZW50LnJlbW92ZUNsYXNzKHRoaXMuY29udGVudENsYXNzZXMuYmFzZS5qb2luKCcgJykpO1xuICAgICAgfSBlbHNlIGlmIChoYXNSZXZlYWwgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoJ2hhcy1yZXZlYWwtJyArIHRoaXMucG9zaXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIENTUyB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzZXMgb2YgdGhlIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIsIGJhc2VkIG9uIHRoZSBvcGVuaW5nIG9mZi1jYW52YXMgZWxlbWVudC5cbiAgICAgKiBCZWZvcmVoYW5kIGFueSB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzIGdldHMgcmVtb3ZlZC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGhhc1JldmVhbCAtIHRydWUgaWYgcmVsYXRlZCBvZmYtY2FudmFzIGVsZW1lbnQgaXMgcmV2ZWFsZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2FkZENvbnRlbnRDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZENvbnRlbnRDbGFzc2VzKGhhc1JldmVhbCkge1xuICAgICAgdGhpcy5fcmVtb3ZlQ29udGVudENsYXNzZXMoaGFzUmV2ZWFsKTtcbiAgICAgIGlmICh0eXBlb2YgaGFzUmV2ZWFsICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5hZGRDbGFzcygnaGFzLXRyYW5zaXRpb24tJyArIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uICsgJyBoYXMtcG9zaXRpb24tJyArIHRoaXMucG9zaXRpb24pO1xuICAgICAgfSBlbHNlIGlmIChoYXNSZXZlYWwgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5hZGRDbGFzcygnaGFzLXJldmVhbC0nICsgdGhpcy5wb3NpdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgcmV2ZWFsaW5nL2hpZGluZyB0aGUgb2ZmLWNhbnZhcyBhdCBicmVha3BvaW50cywgbm90IHRoZSBzYW1lIGFzIG9wZW4uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc1JldmVhbGVkIC0gdHJ1ZSBpZiBlbGVtZW50IHNob3VsZCBiZSByZXZlYWxlZC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmV2ZWFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmV2ZWFsKGlzUmV2ZWFsZWQpIHtcbiAgICAgIGlmIChpc1JldmVhbGVkKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignb3Blbi56Zi50cmlnZ2VyIHRvZ2dsZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLWNsb3NlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc1JldmVhbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignb3Blbi56Zi50cmlnZ2VyIHRvZ2dsZS56Zi50cmlnZ2VyJykub24oe1xuICAgICAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1jbG9zZWQnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FkZENvbnRlbnRDbGFzc2VzKGlzUmV2ZWFsZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHNjcm9sbGluZyBvZiB0aGUgYm9keSB3aGVuIG9mZmNhbnZhcyBpcyBvcGVuIG9uIG1vYmlsZSBTYWZhcmkgYW5kIG90aGVyIHRyb3VibGVzb21lIGJyb3dzZXJzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zdG9wU2Nyb2xsaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0b3BTY3JvbGxpbmcoZXZlbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUYWtlbiBhbmQgYWRhcHRlZCBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY4ODk0NDcvcHJldmVudC1mdWxsLXBhZ2Utc2Nyb2xsaW5nLWlvc1xuICAgIC8vIE9ubHkgcmVhbGx5IHdvcmtzIGZvciB5LCBub3Qgc3VyZSBob3cgdG8gZXh0ZW5kIHRvIHggb3IgaWYgd2UgbmVlZCB0by5cblxuICB9LCB7XG4gICAga2V5OiAnX3JlY29yZFNjcm9sbGFibGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVjb3JkU2Nyb2xsYWJsZShldmVudCkge1xuICAgICAgdmFyIGVsZW0gPSB0aGlzOyAvLyBjYWxsZWQgZnJvbSBldmVudCBoYW5kbGVyIGNvbnRleHQgd2l0aCB0aGlzIGFzIGVsZW1cblxuICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZSAoY29udGVudCBvdmVyZmxvd3MpLCB0aGVuLi4uXG4gICAgICBpZiAoZWxlbS5zY3JvbGxIZWlnaHQgIT09IGVsZW0uY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgIC8vIElmIHdlJ3JlIGF0IHRoZSB0b3AsIHNjcm9sbCBkb3duIG9uZSBwaXhlbCB0byBhbGxvdyBzY3JvbGxpbmcgdXBcbiAgICAgICAgaWYgKGVsZW0uc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAgICAgZWxlbS5zY3JvbGxUb3AgPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlJ3JlIGF0IHRoZSBib3R0b20sIHNjcm9sbCB1cCBvbmUgcGl4ZWwgdG8gYWxsb3cgc2Nyb2xsaW5nIGRvd25cbiAgICAgICAgaWYgKGVsZW0uc2Nyb2xsVG9wID09PSBlbGVtLnNjcm9sbEhlaWdodCAtIGVsZW0uY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgZWxlbS5zY3JvbGxUb3AgPSBlbGVtLnNjcm9sbEhlaWdodCAtIGVsZW0uY2xpZW50SGVpZ2h0IC0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxlbS5hbGxvd1VwID0gZWxlbS5zY3JvbGxUb3AgPiAwO1xuICAgICAgZWxlbS5hbGxvd0Rvd24gPSBlbGVtLnNjcm9sbFRvcCA8IGVsZW0uc2Nyb2xsSGVpZ2h0IC0gZWxlbS5jbGllbnRIZWlnaHQ7XG4gICAgICBlbGVtLmxhc3RZID0gZXZlbnQub3JpZ2luYWxFdmVudC5wYWdlWTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc3RvcFNjcm9sbFByb3BhZ2F0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0b3BTY3JvbGxQcm9wYWdhdGlvbihldmVudCkge1xuICAgICAgdmFyIGVsZW0gPSB0aGlzOyAvLyBjYWxsZWQgZnJvbSBldmVudCBoYW5kbGVyIGNvbnRleHQgd2l0aCB0aGlzIGFzIGVsZW1cbiAgICAgIHZhciB1cCA9IGV2ZW50LnBhZ2VZIDwgZWxlbS5sYXN0WTtcbiAgICAgIHZhciBkb3duID0gIXVwO1xuICAgICAgZWxlbS5sYXN0WSA9IGV2ZW50LnBhZ2VZO1xuXG4gICAgICBpZiAodXAgJiYgZWxlbS5hbGxvd1VwIHx8IGRvd24gJiYgZWxlbS5hbGxvd0Rvd24pIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gRXZlbnQgb2JqZWN0IHBhc3NlZCBmcm9tIGxpc3RlbmVyLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0cmlnZ2VyIC0gZWxlbWVudCB0aGF0IHRyaWdnZXJlZCB0aGUgb2ZmLWNhbnZhcyB0byBvcGVuLlxuICAgICAqIEBmaXJlcyBPZmZDYW52YXMjb3BlbmVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29wZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpIHx8IHRoaXMuaXNSZXZlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICB0aGlzLiRsYXN0VHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZm9yY2VUbyA9PT0gJ3RvcCcpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZm9yY2VUbyA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSAmJiB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiAhPT0gJ292ZXJsYXAnKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuc2libGluZ3MoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCB0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5zaWJsaW5ncygnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsICcnKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICAgKiBAZXZlbnQgT2ZmQ2FudmFzI29wZW5lZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1vcGVuJykucmVtb3ZlQ2xhc3MoJ2lzLWNsb3NlZCcpO1xuXG4gICAgICB0aGlzLiR0cmlnZ2Vycy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKS50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICAgIHRoaXMuJGNvbnRlbnQuYWRkQ2xhc3MoJ2lzLW9wZW4tJyArIHRoaXMucG9zaXRpb24pO1xuXG4gICAgICAvLyBJZiBgY29udGVudFNjcm9sbGAgaXMgc2V0IHRvIGZhbHNlLCBhZGQgY2xhc3MgYW5kIGRpc2FibGUgc2Nyb2xsaW5nIG9uIHRvdWNoIGRldmljZXMuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRTY3JvbGwgPT09IGZhbHNlKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2JvZHknKS5hZGRDbGFzcygnaXMtb2ZmLWNhbnZhcy1vcGVuJykub24oJ3RvdWNobW92ZScsIHRoaXMuX3N0b3BTY3JvbGxpbmcpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCd0b3VjaHN0YXJ0JywgdGhpcy5fcmVjb3JkU2Nyb2xsYWJsZSk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3RvdWNobW92ZScsIHRoaXMuX3N0b3BTY3JvbGxQcm9wYWdhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudE92ZXJsYXkgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnaXMtdmlzaWJsZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayA9PT0gdHJ1ZSAmJiB0aGlzLm9wdGlvbnMuY29udGVudE92ZXJsYXkgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnaXMtY2xvc2FibGUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvRm9jdXMgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbmUoX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcInRyYW5zaXRpb25lbmRcIl0pKHRoaXMuJGVsZW1lbnQpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIGV4aXQgaWYgcHJlbWF0dXJlbHkgY2xvc2VkXG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjYW52YXNGb2N1cyA9IF90aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWF1dG9mb2N1c10nKTtcbiAgICAgICAgICBpZiAoY2FudmFzRm9jdXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYW52YXNGb2N1cy5lcSgwKS5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5maW5kKCdhLCBidXR0b24nKS5lcSgwKS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhcEZvY3VzID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWRkQ29udGVudENsYXNzZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICAgKiBAZmlyZXMgT2ZmQ2FudmFzI2Nsb3NlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKGNiKSB7XG4gICAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9mZi1jYW52YXMgbWVudSBvcGVucy5cbiAgICAgICAqIEBldmVudCBPZmZDYW52YXMjY2xvc2VkXG4gICAgICAgKi9cbiAgICAgIC50cmlnZ2VyKCdjbG9zZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICAgIHRoaXMuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4tbGVmdCBpcy1vcGVuLXRvcCBpcy1vcGVuLXJpZ2h0IGlzLW9wZW4tYm90dG9tJyk7XG5cbiAgICAgIC8vIElmIGBjb250ZW50U2Nyb2xsYCBpcyBzZXQgdG8gZmFsc2UsIHJlbW92ZSBjbGFzcyBhbmQgcmUtZW5hYmxlIHNjcm9sbGluZyBvbiB0b3VjaCBkZXZpY2VzLlxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50U2Nyb2xsID09PSBmYWxzZSkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLW9mZi1jYW52YXMtb3BlbicpLm9mZigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b3VjaHN0YXJ0JywgdGhpcy5fcmVjb3JkU2Nyb2xsYWJsZSk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b3VjaG1vdmUnLCB0aGlzLl9zdG9wU2Nyb2xsUHJvcGFnYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoJ2lzLXZpc2libGUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgPT09IHRydWUgJiYgdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoJ2lzLWNsb3NhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFwRm9jdXMgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0ucmVsZWFzZUZvY3VzKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBMaXN0ZW4gdG8gdHJhbnNpdGlvbkVuZCBhbmQgYWRkIGNsYXNzIHdoZW4gZG9uZS5cbiAgICAgIHRoaXMuJGVsZW1lbnQub25lKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJ0cmFuc2l0aW9uZW5kXCJdKSh0aGlzLiRlbGVtZW50KSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLWNsb3NlZCcpO1xuICAgICAgICBfdGhpcy5fcmVtb3ZlQ29udGVudENsYXNzZXMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIG9mZi1jYW52YXMgbWVudSBvcGVuIG9yIGNsb3NlZC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBFdmVudCBvYmplY3QgcGFzc2VkIGZyb20gbGlzdGVuZXIuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZShldmVudCwgdHJpZ2dlcikge1xuICAgICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgICB0aGlzLmNsb3NlKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3BlbihldmVudCwgdHJpZ2dlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBrZXlib2FyZCBpbnB1dCB3aGVuIGRldGVjdGVkLiBXaGVuIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQsIHRoZSBvZmYtY2FudmFzIG1lbnUgY2xvc2VzLCBhbmQgZm9jdXMgaXMgcmVzdG9yZWQgdG8gdGhlIGVsZW1lbnQgdGhhdCBvcGVuZWQgdGhlIG1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2hhbmRsZUtleWJvYXJkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUtleWJvYXJkKGUpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0uaGFuZGxlS2V5KGUsICdPZmZDYW52YXMnLCB7XG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM0LmNsb3NlKCk7XG4gICAgICAgICAgX3RoaXM0LiRsYXN0VHJpZ2dlci5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBvZmZjYW52YXMgcGx1Z2luLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5vZmZjYW52YXMnKTtcbiAgICAgIHRoaXMuJG92ZXJsYXkub2ZmKCcuemYub2ZmY2FudmFzJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE9mZkNhbnZhcztcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiUGx1Z2luXCJdKTtcblxuT2ZmQ2FudmFzLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWxsb3cgdGhlIHVzZXIgdG8gY2xpY2sgb3V0c2lkZSBvZiB0aGUgbWVudSB0byBjbG9zZSBpdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIG92ZXJsYXkgb24gdG9wIG9mIGBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY29udGVudE92ZXJsYXk6IHRydWUsXG5cbiAgLyoqXG4gICAqIFRhcmdldCBhbiBvZmYtY2FudmFzIGNvbnRlbnQgY29udGFpbmVyIGJ5IElEIHRoYXQgbWF5IGJlIHBsYWNlZCBhbnl3aGVyZS4gSWYgbnVsbCB0aGUgY2xvc2VzdCBjb250ZW50IGNvbnRhaW5lciB3aWxsIGJlIHRha2VuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBjb250ZW50SWQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgb2ZmLWNhbnZhcyBlbGVtZW50IGlzIG5lc3RlZCBpbiBhbiBvZmYtY2FudmFzIGNvbnRlbnQuIFRoaXMgaXMgcmVxdWlyZWQgd2hlbiB1c2luZyB0aGUgY29udGVudElkIG9wdGlvbiBmb3IgYSBuZXN0ZWQgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgbmVzdGVkOiBudWxsLFxuXG4gIC8qKlxuICAgKiBFbmFibGUvZGlzYWJsZSBzY3JvbGxpbmcgb2YgdGhlIG1haW4gY29udGVudCB3aGVuIGFuIG9mZiBjYW52YXMgcGFuZWwgaXMgb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY29udGVudFNjcm9sbDogdHJ1ZSxcblxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgaW4gbXMgdGhlIG9wZW4gYW5kIGNsb3NlIHRyYW5zaXRpb24gcmVxdWlyZXMuIElmIG5vbmUgc2VsZWN0ZWQsIHB1bGxzIGZyb20gYm9keSBzdHlsZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICB0cmFuc2l0aW9uVGltZTogbnVsbCxcblxuICAvKipcbiAgICogVHlwZSBvZiB0cmFuc2l0aW9uIGZvciB0aGUgb2ZmY2FudmFzIG1lbnUuIE9wdGlvbnMgYXJlICdwdXNoJywgJ2RldGFjaGVkJyBvciAnc2xpZGUnLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IHB1c2hcbiAgICovXG4gIHRyYW5zaXRpb246ICdwdXNoJyxcblxuICAvKipcbiAgICogRm9yY2UgdGhlIHBhZ2UgdG8gc2Nyb2xsIHRvIHRvcCBvciBib3R0b20gb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgZm9yY2VUbzogbnVsbCxcblxuICAvKipcbiAgICogQWxsb3cgdGhlIG9mZmNhbnZhcyB0byByZW1haW4gb3BlbiBmb3IgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGlzUmV2ZWFsZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBCcmVha3BvaW50IGF0IHdoaWNoIHRvIHJldmVhbC4gSlMgd2lsbCB1c2UgYSBSZWdFeHAgdG8gdGFyZ2V0IHN0YW5kYXJkIGNsYXNzZXMsIGlmIGNoYW5naW5nIGNsYXNzbmFtZXMsIHBhc3MgeW91ciBjbGFzcyB3aXRoIHRoZSBgcmV2ZWFsQ2xhc3NgIG9wdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgcmV2ZWFsT246IG51bGwsXG5cbiAgLyoqXG4gICAqIEZvcmNlIGZvY3VzIHRvIHRoZSBvZmZjYW52YXMgb24gb3Blbi4gSWYgdHJ1ZSwgd2lsbCBmb2N1cyB0aGUgb3BlbmluZyB0cmlnZ2VyIG9uIGNsb3NlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IHRydWUsXG5cbiAgLyoqXG4gICAqIENsYXNzIHVzZWQgdG8gZm9yY2UgYW4gb2ZmY2FudmFzIHRvIHJlbWFpbiBvcGVuLiBGb3VuZGF0aW9uIGRlZmF1bHRzIGZvciB0aGlzIGFyZSBgcmV2ZWFsLWZvci1sYXJnZWAgJiBgcmV2ZWFsLWZvci1tZWRpdW1gLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IHJldmVhbC1mb3ItXG4gICAqIEB0b2RvIGltcHJvdmUgdGhlIHJlZ2V4IHRlc3RpbmcgZm9yIHRoaXMuXG4gICAqL1xuICByZXZlYWxDbGFzczogJ3JldmVhbC1mb3ItJyxcblxuICAvKipcbiAgICogVHJpZ2dlcnMgb3B0aW9uYWwgZm9jdXMgdHJhcHBpbmcgd2hlbiBvcGVuaW5nIGFuIG9mZmNhbnZhcy4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdHJhcEZvY3VzOiBmYWxzZVxufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtNZWRpYVF1ZXJ5OiB3aW5kb3cuRm91bmRhdGlvbi5NZWRpYVF1ZXJ5fTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUcmlnZ2VyczsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fKTtcblxuXG5cblxuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHByZWZpeGVzID0gWydXZWJLaXQnLCAnTW96JywgJ08nLCAnTXMnLCAnJ107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93W3ByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSgpO1xuXG52YXIgdHJpZ2dlcnMgPSBmdW5jdGlvbiAoZWwsIHR5cGUpIHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBpZClbdHlwZSA9PT0gJ2Nsb3NlJyA/ICd0cmlnZ2VyJyA6ICd0cmlnZ2VySGFuZGxlciddKHR5cGUgKyAnLnpmLnRyaWdnZXInLCBbZWxdKTtcbiAgfSk7XG59O1xuXG52YXIgVHJpZ2dlcnMgPSB7XG4gIExpc3RlbmVyczoge1xuICAgIEJhc2ljOiB7fSxcbiAgICBHbG9iYWw6IHt9XG4gIH0sXG4gIEluaXRpYWxpemVyczoge31cbn07XG5cblRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYyA9IHtcbiAgb3Blbkxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdHJpZ2dlcnMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgJ29wZW4nKTtcbiAgfSxcbiAgY2xvc2VMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgnY2xvc2UnKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICdjbG9zZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlLnpmLnRyaWdnZXInKTtcbiAgICB9XG4gIH0sXG4gIHRvZ2dsZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd0b2dnbGUnKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICd0b2dnbGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCd0b2dnbGUuemYudHJpZ2dlcicpO1xuICAgIH1cbiAgfSxcbiAgY2xvc2VhYmxlTGlzdGVuZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgYW5pbWF0aW9uID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCdjbG9zYWJsZScpO1xuXG4gICAgaWYgKGFuaW1hdGlvbiAhPT0gJycpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiTW90aW9uXCJdLmFuaW1hdGVPdXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgYW5pbWF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gICAgfVxuICB9LFxuICB0b2dnbGVGb2N1c0xpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd0b2dnbGUtZm9jdXMnKTtcbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIGlkKS50cmlnZ2VySGFuZGxlcigndG9nZ2xlLnpmLnRyaWdnZXInLCBbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKV0pO1xuICB9XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLW9wZW5dIHdpbGwgcmV2ZWFsIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE9wZW5MaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMub3Blbkxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtb3Blbl0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMub3Blbkxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2VdIHdpbGwgY2xvc2UgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG4vLyBJZiB1c2VkIHdpdGhvdXQgYSB2YWx1ZSBvbiBbZGF0YS1jbG9zZV0sIHRoZSBldmVudCB3aWxsIGJ1YmJsZSwgYWxsb3dpbmcgaXQgdG8gY2xvc2UgYSBwYXJlbnQgY29tcG9uZW50LlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbGljay56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1jbG9zZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VMaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLXRvZ2dsZV0gd2lsbCB0b2dnbGUgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbGljay56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVMaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NhYmxlXSB3aWxsIHJlc3BvbmQgdG8gY2xvc2UuemYudHJpZ2dlciBldmVudHMuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VhYmxlTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbG9zZS56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlYWJsZUxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2Nsb3NlLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2VhYmxlXSwgW2RhdGEtY2xvc2FibGVdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlYWJsZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlLWZvY3VzXSB3aWxsIHJlc3BvbmQgdG8gY29taW5nIGluIGFuZCBvdXQgb2YgZm9jdXNcblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVGb2N1c0xpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlRm9jdXNMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGUtZm9jdXNdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUZvY3VzTGlzdGVuZXIpO1xufTtcblxuLy8gTW9yZSBHbG9iYWwvY29tcGxleCBsaXN0ZW5lcnMgYW5kIHRyaWdnZXJzXG5UcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsID0ge1xuICByZXNpemVMaXN0ZW5lcjogZnVuY3Rpb24gKCRub2Rlcykge1xuICAgIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgLy9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwicmVzaXplXCIpO1xuICB9LFxuICBzY3JvbGxMaXN0ZW5lcjogZnVuY3Rpb24gKCRub2Rlcykge1xuICAgIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgLy9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHNjcm9sbCBldmVudFxuICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwic2Nyb2xsXCIpO1xuICB9LFxuICBjbG9zZU1lTGlzdGVuZXI6IGZ1bmN0aW9uIChlLCBwbHVnaW5JZCkge1xuICAgIHZhciBwbHVnaW4gPSBlLm5hbWVzcGFjZS5zcGxpdCgnLicpWzBdO1xuICAgIHZhciBwbHVnaW5zID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtJyArIHBsdWdpbiArICddJykubm90KCdbZGF0YS15ZXRpLWJveD1cIicgKyBwbHVnaW5JZCArICdcIl0nKTtcblxuICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpO1xuICAgICAgX3RoaXMudHJpZ2dlckhhbmRsZXIoJ2Nsb3NlLnpmLnRyaWdnZXInLCBbX3RoaXNdKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEdsb2JhbCwgcGFyc2VzIHdob2xlIGRvY3VtZW50LlxufTtUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VtZUxpc3RlbmVyID0gZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcbiAgdmFyIHlldGlCb3hlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXlldGktYm94XScpLFxuICAgICAgcGx1Z05hbWVzID0gWydkcm9wZG93bicsICd0b29sdGlwJywgJ3JldmVhbCddO1xuXG4gIGlmIChwbHVnaW5OYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z05hbWVzLnB1c2gocGx1Z2luTmFtZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHBsdWdpbk5hbWVbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBwbHVnTmFtZXMuY29uY2F0KHBsdWdpbk5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdQbHVnaW4gbmFtZXMgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICB9XG4gIGlmICh5ZXRpQm94ZXMubGVuZ3RoKSB7XG4gICAgdmFyIGxpc3RlbmVycyA9IHBsdWdOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiAnY2xvc2VtZS56Zi4nICsgbmFtZTtcbiAgICB9KS5qb2luKCcgJyk7XG5cbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKGxpc3RlbmVycykub24obGlzdGVuZXJzLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLmNsb3NlTWVMaXN0ZW5lcik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsIHRyaWdnZXIsIGxpc3RlbmVyKSB7XG4gIHZhciB0aW1lciA9IHZvaWQgMCxcbiAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpO1xuICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKHRyaWdnZXIpLm9uKHRyaWdnZXIsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIH1cbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgbGlzdGVuZXIuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgZGVib3VuY2UgfHwgMTApOyAvL2RlZmF1bHQgdGltZSB0byBlbWl0IHNjcm9sbCBldmVudFxuICB9KTtcbn1cblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFJlc2l6ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGRlYm91bmNlKSB7XG4gIHZhciAkbm9kZXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS1yZXNpemVdJyk7XG4gIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgZGVib3VuY2VHbG9iYWxMaXN0ZW5lcihkZWJvdW5jZSwgJ3Jlc2l6ZS56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbC5yZXNpemVMaXN0ZW5lciwgJG5vZGVzKTtcbiAgfVxufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNjcm9sbExpc3RlbmVyID0gZnVuY3Rpb24gKGRlYm91bmNlKSB7XG4gIHZhciAkbm9kZXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS1zY3JvbGxdJyk7XG4gIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgZGVib3VuY2VHbG9iYWxMaXN0ZW5lcihkZWJvdW5jZSwgJ3Njcm9sbC56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbC5zY3JvbGxMaXN0ZW5lciwgJG5vZGVzKTtcbiAgfVxufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE11dGF0aW9uRXZlbnRzTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciAkbm9kZXMgPSAkZWxlbS5maW5kKCdbZGF0YS1yZXNpemVdLCBbZGF0YS1zY3JvbGxdLCBbZGF0YS1tdXRhdGVdJyk7XG5cbiAgLy9lbGVtZW50IGNhbGxiYWNrXG4gIHZhciBsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uID0gZnVuY3Rpb24gKG11dGF0aW9uUmVjb3Jkc0xpc3QpIHtcbiAgICB2YXIgJHRhcmdldCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkobXV0YXRpb25SZWNvcmRzTGlzdFswXS50YXJnZXQpO1xuXG4gICAgLy90cmlnZ2VyIHRoZSBldmVudCBoYW5kbGVyIGZvciB0aGUgZWxlbWVudCBkZXBlbmRpbmcgb24gdHlwZVxuICAgIHN3aXRjaCAobXV0YXRpb25SZWNvcmRzTGlzdFswXS50eXBlKSB7XG4gICAgICBjYXNlIFwiYXR0cmlidXRlc1wiOlxuICAgICAgICBpZiAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikgPT09IFwic2Nyb2xsXCIgJiYgbXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtZXZlbnRzXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQsIHdpbmRvdy5wYWdlWU9mZnNldF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJyZXNpemVcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuICAgICAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwic3R5bGVcIikge1xuICAgICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsIFwibXV0YXRlXCIpO1xuICAgICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlckhhbmRsZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKV0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiY2hpbGRMaXN0XCI6XG4gICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsIFwibXV0YXRlXCIpO1xuICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vbm90aGluZ1xuICAgIH1cbiAgfTtcblxuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgb3IgbXV0YXRpb24gYWRkIGEgc2luZ2xlIG9ic2VydmVyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gJG5vZGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgdmFyIGVsZW1lbnRPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24pO1xuICAgICAgZWxlbWVudE9ic2VydmVyLm9ic2VydmUoJG5vZGVzW2ldLCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6IHRydWUsIGF0dHJpYnV0ZUZpbHRlcjogW1wiZGF0YS1ldmVudHNcIiwgXCJzdHlsZVwiXSB9KTtcbiAgICB9XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciAkZG9jdW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGRvY3VtZW50KTtcblxuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkT3Blbkxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VhYmxlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUZvY3VzTGlzdGVuZXIoJGRvY3VtZW50KTtcbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciAkZG9jdW1lbnQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE11dGF0aW9uRXZlbnRzTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFJlc2l6ZUxpc3RlbmVyKCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTY3JvbGxMaXN0ZW5lcigpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VtZUxpc3RlbmVyKCk7XG59O1xuXG5UcmlnZ2Vycy5pbml0ID0gZnVuY3Rpb24gKCQsIEZvdW5kYXRpb24pIHtcbiAgaWYgKHR5cGVvZiAkLnRyaWdnZXJzSW5pdGlhbGl6ZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyICRkb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIikge1xuICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycygpO1xuICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgJC50cmlnZ2Vyc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChGb3VuZGF0aW9uKSB7XG4gICAgRm91bmRhdGlvbi5UcmlnZ2VycyA9IFRyaWdnZXJzO1xuICAgIC8vIExlZ2FjeSBpbmNsdWRlZCB0byBiZSBiYWNrd2FyZHMgY29tcGF0aWJsZSBmb3Igbm93LlxuICAgIEZvdW5kYXRpb24uSUhlYXJZb3UgPSBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzO1xuICB9XG59O1xuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkxKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtGb3VuZGF0aW9uOiB3aW5kb3cuRm91bmRhdGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtQbHVnaW46IHdpbmRvdy5Gb3VuZGF0aW9uLlBsdWdpbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9yZXNwb25zaXZlTWVudV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSk7XG5cblxuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fW1wiRm91bmRhdGlvblwiXS5wbHVnaW4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3Jlc3BvbnNpdmVNZW51X19bXCJhXCIgLyogUmVzcG9uc2l2ZU1lbnUgKi9dLCAnUmVzcG9uc2l2ZU1lbnUnKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge3J0bDogd2luZG93LkZvdW5kYXRpb24ucnRsLCBHZXRZb0RpZ2l0czogd2luZG93LkZvdW5kYXRpb24uR2V0WW9EaWdpdHMsIHRyYW5zaXRpb25lbmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLnRyYW5zaXRpb25lbmR9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNTU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBSZXNwb25zaXZlTWVudTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9kcm9wZG93bk1lbnVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9kcm9wZG93bk1lbnVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9kcm9wZG93bk1lbnVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX2RyaWxsZG93bl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX2RyaWxsZG93bl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX2RyaWxsZG93bl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX2ZvdW5kYXRpb25fYWNjb3JkaW9uTWVudV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Myk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mb3VuZGF0aW9uX2FjY29yZGlvbk1lbnVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fZm91bmRhdGlvbl9hY2NvcmRpb25NZW51X18pO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgTWVudVBsdWdpbnMgPSB7XG4gIGRyb3Bkb3duOiB7XG4gICAgY3NzQ2xhc3M6ICdkcm9wZG93bicsXG4gICAgcGx1Z2luOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fZHJvcGRvd25NZW51X19bXCJEcm9wZG93bk1lbnVcIl1cbiAgfSxcbiAgZHJpbGxkb3duOiB7XG4gICAgY3NzQ2xhc3M6ICdkcmlsbGRvd24nLFxuICAgIHBsdWdpbjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19mb3VuZGF0aW9uX2RyaWxsZG93bl9fW1wiRHJpbGxkb3duXCJdXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uLW1lbnUnLFxuICAgIHBsdWdpbjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19mb3VuZGF0aW9uX2FjY29yZGlvbk1lbnVfX1tcIkFjY29yZGlvbk1lbnVcIl1cbiAgfVxufTtcblxuLy8gaW1wb3J0IFwiZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzLmpzXCI7XG5cblxuLyoqXG4gKiBSZXNwb25zaXZlTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbnZhciBSZXNwb25zaXZlTWVudSA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhSZXNwb25zaXZlTWVudSwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2l2ZU1lbnUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNpdmVNZW51KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVzcG9uc2l2ZU1lbnUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZXNwb25zaXZlTWVudSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc3BvbnNpdmVNZW51LCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgcmVzcG9uc2l2ZSBtZW51LlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFJlc3BvbnNpdmVNZW51XG4gICAgICogQGZpcmVzIFJlc3BvbnNpdmVNZW51I2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24gbWVudS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlbGVtZW50KTtcbiAgICAgIHRoaXMucnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtbWVudScpO1xuICAgICAgdGhpcy5jdXJyZW50TXEgPSBudWxsO1xuICAgICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbnVsbDtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1Jlc3BvbnNpdmVNZW51JzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBNZW51IGJ5IHBhcnNpbmcgdGhlIGNsYXNzZXMgZnJvbSB0aGUgJ2RhdGEtUmVzcG9uc2l2ZU1lbnUnIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLl9pbml0KCk7XG4gICAgICAvLyBUaGUgZmlyc3QgdGltZSBhbiBJbnRlcmNoYW5nZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQsIHRoaXMucnVsZXMgaXMgY29udmVydGVkIGZyb20gYSBzdHJpbmcgb2YgXCJjbGFzc2VzXCIgdG8gYW4gb2JqZWN0IG9mIHJ1bGVzXG4gICAgICBpZiAodHlwZW9mIHRoaXMucnVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBydWxlc1RyZWUgPSB7fTtcblxuICAgICAgICAvLyBQYXJzZSBydWxlcyBmcm9tIFwiY2xhc3Nlc1wiIHB1bGxlZCBmcm9tIGRhdGEgYXR0cmlidXRlXG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMucnVsZXMuc3BsaXQoJyAnKTtcblxuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZXZlcnkgcnVsZSBmb3VuZFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXS5zcGxpdCgnLScpO1xuICAgICAgICAgIHZhciBydWxlU2l6ZSA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMF0gOiAnc21hbGwnO1xuICAgICAgICAgIHZhciBydWxlUGx1Z2luID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVsxXSA6IHJ1bGVbMF07XG5cbiAgICAgICAgICBpZiAoTWVudVBsdWdpbnNbcnVsZVBsdWdpbl0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJ1bGVzVHJlZVtydWxlU2l6ZV0gPSBNZW51UGx1Z2luc1tydWxlUGx1Z2luXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJ1bGVzID0gcnVsZXNUcmVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuaXNFbXB0eU9iamVjdCh0aGlzLnJ1bGVzKSkge1xuICAgICAgICB0aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgICAgfVxuICAgICAgLy8gQWRkIGRhdGEtbXV0YXRlIHNpbmNlIGNoaWxkcmVuIG1heSBuZWVkIGl0LlxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLW11dGF0ZScsIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1tdXRhdGUnKSB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fW1wiR2V0WW9EaWdpdHNcIl0pKDYsICdyZXNwb25zaXZlLW1lbnUnKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgTWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAgIH0pO1xuICAgICAgLy8gJCh3aW5kb3cpLm9uKCdyZXNpemUuemYuUmVzcG9uc2l2ZU1lbnUnLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vICAgX3RoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgICAvLyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgc2NyZWVuIHdpZHRoIGFnYWluc3QgYXZhaWxhYmxlIG1lZGlhIHF1ZXJpZXMuIElmIHRoZSBtZWRpYSBxdWVyeSBoYXMgY2hhbmdlZCwgYW5kIHRoZSBwbHVnaW4gbmVlZGVkIGhhcyBjaGFuZ2VkLCB0aGUgcGx1Z2lucyB3aWxsIHN3YXAgb3V0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19jaGVja01lZGlhUXVlcmllcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja01lZGlhUXVlcmllcygpIHtcbiAgICAgIHZhciBtYXRjaGVkTXEsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcnVsZSBhbmQgZmluZCB0aGUgbGFzdCBtYXRjaGluZyBydWxlXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmVhY2godGhpcy5ydWxlcywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiTWVkaWFRdWVyeVwiXS5hdExlYXN0KGtleSkpIHtcbiAgICAgICAgICBtYXRjaGVkTXEgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBObyBtYXRjaD8gTm8gZGljZVxuICAgICAgaWYgKCFtYXRjaGVkTXEpIHJldHVybjtcblxuICAgICAgLy8gUGx1Z2luIGFscmVhZHkgaW5pdGlhbGl6ZWQ/IFdlIGdvb2RcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4gaW5zdGFuY2VvZiB0aGlzLnJ1bGVzW21hdGNoZWRNcV0ucGx1Z2luKSByZXR1cm47XG5cbiAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBwbHVnaW4tc3BlY2lmaWMgQ1NTIGNsYXNzZXNcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZWFjaChNZW51UGx1Z2lucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModmFsdWUuY3NzQ2xhc3MpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFkZCB0aGUgQ1NTIGNsYXNzIGZvciB0aGUgbmV3IHBsdWdpblxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLnJ1bGVzW21hdGNoZWRNcV0uY3NzQ2xhc3MpO1xuXG4gICAgICAvLyBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG5ldyBwbHVnaW5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4pIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBuZXcgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbih0aGlzLiRlbGVtZW50LCB7fSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCcuemYuUmVzcG9uc2l2ZU1lbnUnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzcG9uc2l2ZU1lbnU7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX1tcIlBsdWdpblwiXSk7XG5cblJlc3BvbnNpdmVNZW51LmRlZmF1bHRzID0ge307XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TWVkaWFRdWVyeTogd2luZG93LkZvdW5kYXRpb24uTWVkaWFRdWVyeX07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA3Mzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7QWNjb3JkaW9uTWVudTogd2luZG93LkZvdW5kYXRpb24uQWNjb3JkaW9uTWVudX07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA3NDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7RHJpbGxkb3duOiB3aW5kb3cuRm91bmRhdGlvbi5EcmlsbGRvd259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNzU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0Ryb3Bkb3duTWVudTogd2luZG93LkZvdW5kYXRpb24uRHJvcGRvd25NZW51fTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDkxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkyKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtGb3VuZGF0aW9uOiB3aW5kb3cuRm91bmRhdGlvbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtQbHVnaW46IHdpbmRvdy5Gb3VuZGF0aW9uLlBsdWdpbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9yZXNwb25zaXZlVG9nZ2xlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcmVzcG9uc2l2ZVRvZ2dsZV9fW1wiYVwiIC8qIFJlc3BvbnNpdmVUb2dnbGUgKi9dLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TW90aW9uOiB3aW5kb3cuRm91bmRhdGlvbi5Nb3Rpb24sIE1vdmU6IHdpbmRvdy5Gb3VuZGF0aW9uLk1vdmV9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNTY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBSZXNwb25zaXZlVG9nZ2xlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fXyk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG4vKipcbiAqIFJlc3BvbnNpdmVUb2dnbGUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqL1xuXG52YXIgUmVzcG9uc2l2ZVRvZ2dsZSA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhSZXNwb25zaXZlVG9nZ2xlLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBSZXNwb25zaXZlVG9nZ2xlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNwb25zaXZlVG9nZ2xlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVzcG9uc2l2ZVRvZ2dsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlc3BvbnNpdmVUb2dnbGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXNwb25zaXZlVG9nZ2xlLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFRhYiBCYXIuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgUmVzcG9uc2l2ZVRvZ2dsZVxuICAgICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYXR0YWNoIHRhYiBiYXIgZnVuY3Rpb25hbGl0eSB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShlbGVtZW50KTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKHt9LCBSZXNwb25zaXZlVG9nZ2xlLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdSZXNwb25zaXZlVG9nZ2xlJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSB0YWIgYmFyIGJ5IGZpbmRpbmcgdGhlIHRhcmdldCBlbGVtZW50LCB0b2dnbGluZyBlbGVtZW50LCBhbmQgcnVubmluZyB1cGRhdGUoKS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiTWVkaWFRdWVyeVwiXS5faW5pdCgpO1xuICAgICAgdmFyIHRhcmdldElEID0gdGhpcy4kZWxlbWVudC5kYXRhKCdyZXNwb25zaXZlLXRvZ2dsZScpO1xuICAgICAgaWYgKCF0YXJnZXRJRCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdZb3VyIHRhYiBiYXIgbmVlZHMgYW4gSUQgb2YgYSBNZW51IGFzIHRoZSB2YWx1ZSBvZiBkYXRhLXRhYi1iYXIuJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJHRhcmdldE1lbnUgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIHRhcmdldElEKTtcbiAgICAgIHRoaXMuJHRvZ2dsZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXRvZ2dsZV0nKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCd0b2dnbGUnKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldCA9PT0gdGFyZ2V0SUQgfHwgdGFyZ2V0ID09PSBcIlwiO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB0aGlzLiR0YXJnZXRNZW51LmRhdGEoKSk7XG5cbiAgICAgIC8vIElmIHRoZXkgd2VyZSBzZXQsIHBhcnNlIHRoZSBhbmltYXRpb24gY2xhc3Nlc1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMub3B0aW9ucy5hbmltYXRlLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IGlucHV0WzFdIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgdGFiIGJhciB0byB3b3JrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5fdXBkYXRlTXFIYW5kbGVyID0gdGhpcy5fdXBkYXRlLmJpbmQodGhpcyk7XG5cbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fdXBkYXRlTXFIYW5kbGVyKTtcblxuICAgICAgdGhpcy4kdG9nZ2xlci5vbignY2xpY2suemYucmVzcG9uc2l2ZVRvZ2dsZScsIHRoaXMudG9nZ2xlTWVudS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnkgdG8gZGV0ZXJtaW5lIGlmIHRoZSB0YWIgYmFyIHNob3VsZCBiZSB2aXNpYmxlIG9yIGhpZGRlbi5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZSgpIHtcbiAgICAgIC8vIE1vYmlsZVxuICAgICAgaWYgKCFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdygpO1xuICAgICAgICB0aGlzLiR0YXJnZXRNZW51LmhpZGUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVza3RvcFxuICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCk7XG4gICAgICAgICAgdGhpcy4kdGFyZ2V0TWVudS5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyLiBUaGUgdG9nZ2xlIG9ubHkgaGFwcGVucyBpZiB0aGUgc2NyZWVuIGlzIHNtYWxsIGVub3VnaCB0byBhbGxvdyBpdC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZU1lbnUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICghX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fW1wiTWVkaWFRdWVyeVwiXS5hdExlYXN0KHRoaXMub3B0aW9ucy5oaWRlRm9yKSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgZWxlbWVudCBhdHRhY2hlZCB0byB0aGUgdGFiIGJhciB0b2dnbGVzLlxuICAgICAgICAgKiBAZXZlbnQgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGUpIHtcbiAgICAgICAgICBpZiAodGhpcy4kdGFyZ2V0TWVudS5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcIk1vdGlvblwiXS5hbmltYXRlSW4odGhpcy4kdGFyZ2V0TWVudSwgdGhpcy5hbmltYXRpb25JbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICAgICAgICAgIF90aGlzMy4kdGFyZ2V0TWVudS5maW5kKCdbZGF0YS1tdXRhdGVdJykudHJpZ2dlckhhbmRsZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcIk1vdGlvblwiXS5hbmltYXRlT3V0KHRoaXMuJHRhcmdldE1lbnUsIHRoaXMuYW5pbWF0aW9uT3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzMy4kZWxlbWVudC50cmlnZ2VyKCd0b2dnbGVkLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiR0YXJnZXRNZW51LnRvZ2dsZSgwKTtcbiAgICAgICAgICB0aGlzLiR0YXJnZXRNZW51LmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd0b2dnbGVkLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICAgIHRoaXMuJHRvZ2dsZXIub2ZmKCcuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXNwb25zaXZlVG9nZ2xlO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJQbHVnaW5cIl0pO1xuXG5SZXNwb25zaXZlVG9nZ2xlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGhlIGJyZWFrcG9pbnQgYWZ0ZXIgd2hpY2ggdGhlIG1lbnUgaXMgYWx3YXlzIHNob3duLCBhbmQgdGhlIHRhYiBiYXIgaXMgaGlkZGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBoaWRlRm9yOiAnbWVkaXVtJyxcblxuICAvKipcbiAgICogVG8gZGVjaWRlIGlmIHRoZSB0b2dnbGUgc2hvdWxkIGJlIGFuaW1hdGVkIG9yIG5vdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFuaW1hdGU6IGZhbHNlXG59O1xuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge01lZGlhUXVlcnk6IHdpbmRvdy5Gb3VuZGF0aW9uLk1lZGlhUXVlcnl9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gOTI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOTMpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0ZvdW5kYXRpb246IHdpbmRvdy5Gb3VuZGF0aW9ufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge1BsdWdpbjogd2luZG93LkZvdW5kYXRpb24uUGx1Z2lufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3JldmVhbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nyk7XG5cblxuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fW1wiRm91bmRhdGlvblwiXS5wbHVnaW4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3JldmVhbF9fW1wiYVwiIC8qIFJldmVhbCAqL10sICdSZXZlYWwnKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge01vdGlvbjogd2luZG93LkZvdW5kYXRpb24uTW90aW9uLCBNb3ZlOiB3aW5kb3cuRm91bmRhdGlvbi5Nb3ZlfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0tleWJvYXJkOiB3aW5kb3cuRm91bmRhdGlvbi5LZXlib2FyZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFJldmVhbDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3BsdWdpbl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBSZXZlYWwgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnJldmVhbFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvbiBpZiB1c2luZyBhbmltYXRpb25zXG4gKi9cblxudmFyIFJldmVhbCA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhSZXZlYWwsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIFJldmVhbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmV2ZWFsKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmV2ZWFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmV2ZWFsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmV2ZWFsLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJldmVhbC5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBSZXZlYWxcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGZvciB0aGUgbW9kYWwuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25hbCBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgUmV2ZWFsLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdSZXZlYWwnOyAvLyBpZTkgYmFjayBjb21wYXRcbiAgICAgIHRoaXMuX2luaXQoKTtcblxuICAgICAgLy8gVHJpZ2dlcnMgaW5pdCBpcyBpZGVtcG90ZW50LCBqdXN0IG5lZWQgdG8gbWFrZSBzdXJlIGl0IGlzIGluaXRpYWxpemVkXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fW1wiYVwiIC8qIFRyaWdnZXJzICovXS5pbml0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEpO1xuXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0ucmVnaXN0ZXIoJ1JldmVhbCcsIHtcbiAgICAgICAgJ0VTQ0FQRSc6ICdjbG9zZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBtb2RhbCBieSBhZGRpbmcgdGhlIG92ZXJsYXkgYW5kIGNsb3NlIGJ1dHRvbnMsIChpZiBzZWxlY3RlZCkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcIk1lZGlhUXVlcnlcIl0uX2luaXQoKTtcbiAgICAgIHRoaXMuaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLmNhY2hlZCA9IHsgbXE6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX1tcIk1lZGlhUXVlcnlcIl0uY3VycmVudCB9O1xuICAgICAgdGhpcy5pc01vYmlsZSA9IG1vYmlsZVNuaWZmKCk7XG5cbiAgICAgIHRoaXMuJGFuY2hvciA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLW9wZW49XCInICsgdGhpcy5pZCArICdcIl0nKS5sZW5ndGggPyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS1vcGVuPVwiJyArIHRoaXMuaWQgKyAnXCJdJykgOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS10b2dnbGU9XCInICsgdGhpcy5pZCArICdcIl0nKTtcbiAgICAgIHRoaXMuJGFuY2hvci5hdHRyKHtcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiB0aGlzLmlkLFxuICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAgICd0YWJpbmRleCc6IDBcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4gfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZnVsbCcpKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm92ZXJsYXkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiAhdGhpcy4kb3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5ID0gdGhpcy5fbWFrZU92ZXJsYXkodGhpcy5pZCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ2RpYWxvZycsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLXlldGktYm94JzogdGhpcy5pZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogdGhpcy5pZFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLiRvdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuZGV0YWNoKCkuYXBwZW5kVG8odGhpcy4kb3ZlcmxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcy5vcHRpb25zLmFwcGVuZFRvKSk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ3dpdGhvdXQtb3ZlcmxheScpO1xuICAgICAgfVxuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSAnIycgKyB0aGlzLmlkKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbmUoJ2xvYWQuemYucmV2ZWFsJywgdGhpcy5vcGVuLmJpbmQodGhpcykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb3ZlcmxheSBkaXYgdG8gZGlzcGxheSBiZWhpbmQgdGhlIG1vZGFsLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19tYWtlT3ZlcmxheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9tYWtlT3ZlcmxheSgpIHtcbiAgICAgIHZhciBhZGRpdGlvbmFsT3ZlcmxheUNsYXNzZXMgPSAnJztcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hZGRpdGlvbmFsT3ZlcmxheUNsYXNzZXMpIHtcbiAgICAgICAgYWRkaXRpb25hbE92ZXJsYXlDbGFzc2VzID0gJyAnICsgdGhpcy5vcHRpb25zLmFkZGl0aW9uYWxPdmVybGF5Q2xhc3NlcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ3JldmVhbC1vdmVybGF5JyArIGFkZGl0aW9uYWxPdmVybGF5Q2xhc3NlcykuYXBwZW5kVG8odGhpcy5vcHRpb25zLmFwcGVuZFRvKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHBvc2l0aW9uIG9mIG1vZGFsXG4gICAgICogVE9ETzogIEZpZ3VyZSBvdXQgaWYgd2UgYWN0dWFsbHkgbmVlZCB0byBjYWNoZSB0aGVzZSB2YWx1ZXMgb3IgaWYgaXQgZG9lc24ndCBtYXR0ZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLiRlbGVtZW50Lm91dGVyV2lkdGgoKTtcbiAgICAgIHZhciBvdXRlcldpZHRoID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLndpZHRoKCk7XG4gICAgICB2YXIgaGVpZ2h0ID0gdGhpcy4kZWxlbWVudC5vdXRlckhlaWdodCgpO1xuICAgICAgdmFyIG91dGVySGVpZ2h0ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgdmFyIGxlZnQsIHRvcDtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaE9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIGxlZnQgPSBwYXJzZUludCgob3V0ZXJXaWR0aCAtIHdpZHRoKSAvIDIsIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlZnQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMuaE9mZnNldCwgMTApO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy52T2Zmc2V0ID09PSAnYXV0bycpIHtcbiAgICAgICAgaWYgKGhlaWdodCA+IG91dGVySGVpZ2h0KSB7XG4gICAgICAgICAgdG9wID0gcGFyc2VJbnQoTWF0aC5taW4oMTAwLCBvdXRlckhlaWdodCAvIDEwKSwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvcCA9IHBhcnNlSW50KChvdXRlckhlaWdodCAtIGhlaWdodCkgLyA0LCAxMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KHRoaXMub3B0aW9ucy52T2Zmc2V0LCAxMCk7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7IHRvcDogdG9wICsgJ3B4JyB9KTtcbiAgICAgIC8vIG9ubHkgd29ycnkgYWJvdXQgbGVmdCBpZiB3ZSBkb24ndCBoYXZlIGFuIG92ZXJsYXkgb3Igd2UgaGF2ZWEgIGhvcml6b250YWwgb2Zmc2V0LFxuICAgICAgLy8gb3RoZXJ3aXNlIHdlJ3JlIHBlcmZlY3RseSBpbiB0aGUgbWlkZGxlXG4gICAgICBpZiAoIXRoaXMuJG92ZXJsYXkgfHwgdGhpcy5vcHRpb25zLmhPZmZzZXQgIT09ICdhdXRvJykge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcyh7IGxlZnQ6IGxlZnQgKyAncHgnIH0pO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcyh7IG1hcmdpbjogJzBweCcgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgdGhlIG1vZGFsLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgICAnb3Blbi56Zi50cmlnZ2VyJzogdGhpcy5vcGVuLmJpbmQodGhpcyksXG4gICAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogZnVuY3Rpb24gKGV2ZW50LCAkZWxlbWVudCkge1xuICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCdbZGF0YS1jbG9zYWJsZV0nKVswXSA9PT0gJGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgY2xvc2UgcmV2ZWFsIHdoZW4gaXQncyBleHBsaWNpdGx5IGNhbGxlZFxuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5jbG9zZS5hcHBseShfdGhpczMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiB0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5Lm9mZignLnpmLnJldmVhbCcpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpIHx8ICFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbigncG9wc3RhdGUuemYucmV2ZWFsOicgKyB0aGlzLmlkLCB0aGlzLl9oYW5kbGVTdGF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIG1vZGFsIG1ldGhvZHMgb24gYmFjay9mb3J3YXJkIGJ1dHRvbiBjbGlja3Mgb3IgYW55IG90aGVyIGV2ZW50IHRoYXQgdHJpZ2dlcnMgcG9wc3RhdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2hhbmRsZVN0YXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVN0YXRlKGUpIHtcbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gJyMnICsgdGhpcy5pZCAmJiAhdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgbW9kYWwgY29udHJvbGxlZCBieSBgdGhpcy4kYW5jaG9yYCwgYW5kIGNsb3NlcyBhbGwgb3RoZXJzIGJ5IGRlZmF1bHQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIFJldmVhbCNjbG9zZW1lXG4gICAgICogQGZpcmVzIFJldmVhbCNvcGVuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29wZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIC8vIGVpdGhlciB1cGRhdGUgb3IgcmVwbGFjZSBicm93c2VyIGhpc3RvcnlcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgdmFyIGhhc2ggPSAnIycgKyB0aGlzLmlkO1xuXG4gICAgICAgIGlmICh3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVwZGF0ZUhpc3RvcnkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIGhhc2gpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sICcnLCBoYXNoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgICAvLyBNYWtlIGVsZW1lbnRzIGludmlzaWJsZSwgYnV0IHJlbW92ZSBkaXNwbGF5OiBub25lIHNvIHdlIGNhbiBnZXQgc2l6ZSBhbmQgcG9zaXRpb25pbmdcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHsgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJyB9KS5zaG93KCkuc2Nyb2xsVG9wKDApO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuY3NzKHsgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJyB9KS5zaG93KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpLmNzcyh7ICd2aXNpYmlsaXR5JzogJycgfSk7XG5cbiAgICAgIGlmICh0aGlzLiRvdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuY3NzKHsgJ3Zpc2liaWxpdHknOiAnJyB9KS5oaWRlKCk7XG4gICAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYXN0JykpIHtcbiAgICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdmYXN0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xvdycpKSB7XG4gICAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnc2xvdycpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLm11bHRpcGxlT3BlbmVkKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIG1vZGFsIG9wZW5zLlxuICAgICAgICAgKiBDbG9zZXMgYW55IG90aGVyIG1vZGFscyB0aGF0IGFyZSBjdXJyZW50bHkgb3BlblxuICAgICAgICAgKiBAZXZlbnQgUmV2ZWFsI2Nsb3NlbWVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi5yZXZlYWwnLCB0aGlzLmlkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgZnVuY3Rpb24gYWRkUmV2ZWFsT3BlbkNsYXNzZXMoKSB7XG4gICAgICAgIGlmIChfdGhpcy5pc01vYmlsZSkge1xuICAgICAgICAgIGlmICghX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpIHtcbiAgICAgICAgICAgIF90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdodG1sLCBib2R5JykuYWRkQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnYm9keScpLmFkZENsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBNb3Rpb24gVUkgbWV0aG9kIG9mIHJldmVhbFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25Jbikge1xuICAgICAgICB2YXIgYWZ0ZXJBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZSxcbiAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgfSkuZm9jdXMoKTtcbiAgICAgICAgICBhZGRSZXZlYWxPcGVuQ2xhc3NlcygpO1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJLZXlib2FyZFwiXS50cmFwRm9jdXMoX3RoaXMuJGVsZW1lbnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiTW90aW9uXCJdLmFuaW1hdGVJbih0aGlzLiRvdmVybGF5LCAnZmFkZS1pbicpO1xuICAgICAgICB9XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiTW90aW9uXCJdLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW4sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXM0LiRlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBwcm90ZWN0IGFnYWluc3Qgb2JqZWN0IGhhdmluZyBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIF90aGlzNC5mb2N1c2FibGVFbGVtZW50cyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19bXCJLZXlib2FyZFwiXS5maW5kRm9jdXNhYmxlKF90aGlzNC4kZWxlbWVudCk7XG4gICAgICAgICAgICBhZnRlckFuaW1hdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBqUXVlcnkgbWV0aG9kIG9mIHJldmVhbFxuICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgICAgICB0aGlzLiRvdmVybGF5LnNob3coMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdyh0aGlzLm9wdGlvbnMuc2hvd0RlbGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAvLyBoYW5kbGUgYWNjZXNzaWJpbGl0eVxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2UsXG4gICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICB9KS5mb2N1cygpO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KTtcblxuICAgICAgYWRkUmV2ZWFsT3BlbkNsYXNzZXMoKTtcblxuICAgICAgdGhpcy5fZXh0cmFIYW5kbGVycygpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1vZGFsIGhhcyBzdWNjZXNzZnVsbHkgb3BlbmVkLlxuICAgICAgICogQGV2ZW50IFJldmVhbCNvcGVuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb3Blbi56Zi5yZXZlYWwnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV4dHJhIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgYm9keSBhbmQgd2luZG93IGlmIG5lY2Vzc2FyeS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXh0cmFIYW5kbGVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9leHRyYUhhbmRsZXJzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGlmICghdGhpcy4kZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIElmIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgY2xlYW51cCwgZG9uJ3QgZnJlYWsgb3V0XG4gICAgICB0aGlzLmZvY3VzYWJsZUVsZW1lbnRzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiAhdGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4pIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnYm9keScpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYS5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpIHx8ICFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ2tleWRvd24uemYucmV2ZWFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0uaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jbG9zZU9uRXNjKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG1vZGFsLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Nsb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgLy8gTW90aW9uIFVJIG1ldGhvZCBvZiBoaWRpbmdcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uT3V0KSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fW1wiTW90aW9uXCJdLmFuaW1hdGVPdXQodGhpcy4kb3ZlcmxheSwgJ2ZhZGUtb3V0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcIk1vdGlvblwiXS5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQsIGZpbmlzaFVwKTtcbiAgICAgIH1cbiAgICAgIC8vIGpRdWVyeSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LmhpZGUodGhpcy5vcHRpb25zLmhpZGVEZWxheSk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgwLCBmaW5pc2hVcCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbmlzaFVwKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vIENvbmRpdGlvbmFscyB0byByZW1vdmUgZXh0cmEgZXZlbnQgbGlzdGVuZXJzIGFkZGVkIG9uIG9wZW5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVybGF5ICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnYm9keScpLm9mZignY2xpY2suemYucmV2ZWFsJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuXG4gICAgICBmdW5jdGlvbiBmaW5pc2hVcCgpIHtcbiAgICAgICAgaWYgKF90aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgICAgaWYgKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJy5yZXZlYWw6dmlzaWJsZScpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnaHRtbCwgYm9keScpLnJlbW92ZUNsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpIHtcbiAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2JvZHknKS5zY3JvbGxUb3AoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpO1xuICAgICAgICAgICAgX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnLnJldmVhbDp2aXNpYmxlJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLnJlbGVhc2VGb2N1cyhfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICAvKipcbiAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBpcyBkb25lIGNsb3NpbmcuXG4gICAgICAgICogQGV2ZW50IFJldmVhbCNjbG9zZWRcbiAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VkLnpmLnJldmVhbCcpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICogUmVzZXRzIHRoZSBtb2RhbCBjb250ZW50XG4gICAgICAqIFRoaXMgcHJldmVudHMgYSBydW5uaW5nIHZpZGVvIHRvIGtlZXAgZ29pbmcgaW4gdGhlIGJhY2tncm91bmRcbiAgICAgICovXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlc2V0T25DbG9zZSkge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lmh0bWwodGhpcy4kZWxlbWVudC5odG1sKCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICBpZiAod2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKCcnLCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgnIycgKyB0aGlzLmlkLCAnJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgb3Blbi9jbG9zZWQgc3RhdGUgb2YgYSBtb2RhbC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9nZ2xlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuXG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhIG1vZGFsLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmFwcGVuZFRvKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcy5vcHRpb25zLmFwcGVuZFRvKSk7IC8vIG1vdmUgJGVsZW1lbnQgb3V0c2lkZSBvZiAkb3ZlcmxheSB0byBwcmV2ZW50IGVycm9yIHVucmVnaXN0ZXJQbHVnaW4oKVxuICAgICAgICB0aGlzLiRvdmVybGF5LmhpZGUoKS5vZmYoKS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpLm9mZigpO1xuICAgICAgdGhpcy4kYW5jaG9yLm9mZignLnpmJyk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCcuemYucmV2ZWFsOicgKyB0aGlzLmlkKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmV2ZWFsO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJQbHVnaW5cIl0pO1xuXG5SZXZlYWwuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBNb3Rpb24tVUkgY2xhc3MgdG8gdXNlIGZvciBhbmltYXRlZCBlbGVtZW50cy4gSWYgbm9uZSB1c2VkLCBkZWZhdWx0cyB0byBzaW1wbGUgc2hvdy9oaWRlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBhbmltYXRpb25JbjogJycsXG4gIC8qKlxuICAgKiBNb3Rpb24tVUkgY2xhc3MgdG8gdXNlIGZvciBhbmltYXRlZCBlbGVtZW50cy4gSWYgbm9uZSB1c2VkLCBkZWZhdWx0cyB0byBzaW1wbGUgc2hvdy9oaWRlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBhbmltYXRpb25PdXQ6ICcnLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIHRvIGRlbGF5IHRoZSBvcGVuaW5nIG9mIGEgbW9kYWwgYWZ0ZXIgYSBjbGljayBpZiBubyBhbmltYXRpb24gdXNlZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBzaG93RGVsYXk6IDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIGNsb3Npbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGhpZGVEZWxheTogMCxcbiAgLyoqXG4gICAqIEFsbG93cyBhIGNsaWNrIG9uIHRoZSBib2R5L292ZXJsYXkgdG8gY2xvc2UgdGhlIG1vZGFsLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGNsb3NlIGlmIHRoZSB1c2VyIHByZXNzZXMgdGhlIGBFU0NBUEVgIGtleS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkVzYzogdHJ1ZSxcbiAgLyoqXG4gICAqIElmIHRydWUsIGFsbG93cyBtdWx0aXBsZSBtb2RhbHMgdG8gYmUgZGlzcGxheWVkIGF0IG9uY2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aXBsZU9wZW5lZDogZmFsc2UsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgbW9kYWwgc2hvdWxkIHB1c2ggZG93biBmcm9tIHRoZSB0b3Agb2YgdGhlIHNjcmVlbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfHN0cmluZ31cbiAgICogQGRlZmF1bHQgYXV0b1xuICAgKi9cbiAgdk9mZnNldDogJ2F1dG8nLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGluIGZyb20gdGhlIHNpZGUgb2YgdGhlIHNjcmVlbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfHN0cmluZ31cbiAgICogQGRlZmF1bHQgYXV0b1xuICAgKi9cbiAgaE9mZnNldDogJ2F1dG8nLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBiZSBmdWxsc2NyZWVuLCBjb21wbGV0ZWx5IGJsb2NraW5nIG91dCB0aGUgcmVzdCBvZiB0aGUgdmlldy4gSlMgY2hlY2tzIGZvciB0aGlzIGFzIHdlbGwuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsU2NyZWVuOiBmYWxzZSxcbiAgLyoqXG4gICAqIFBlcmNlbnRhZ2Ugb2Ygc2NyZWVuIGhlaWdodCB0aGUgbW9kYWwgc2hvdWxkIHB1c2ggdXAgZnJvbSB0aGUgYm90dG9tIG9mIHRoZSB2aWV3LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDEwXG4gICAqL1xuICBidG1PZmZzZXRQY3Q6IDEwLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBnZW5lcmF0ZSBhbiBvdmVybGF5IGRpdiwgd2hpY2ggd2lsbCBjb3ZlciB0aGUgdmlldyB3aGVuIG1vZGFsIG9wZW5zLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBvdmVybGF5OiB0cnVlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byByZW1vdmUgYW5kIHJlaW5qZWN0IG1hcmt1cCBvbiBjbG9zZS4gU2hvdWxkIGJlIHRydWUgaWYgdXNpbmcgdmlkZW8gZWxlbWVudHMgdy9vIHVzaW5nIHByb3ZpZGVyJ3MgYXBpLCBvdGhlcndpc2UsIHZpZGVvcyB3aWxsIGNvbnRpbnVlIHRvIHBsYXkgaW4gdGhlIGJhY2tncm91bmQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZXNldE9uQ2xvc2U6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBhbHRlciB0aGUgdXJsIG9uIG9wZW4vY2xvc2UsIGFuZCBhbGxvd3MgdGhlIHVzZSBvZiB0aGUgYGJhY2tgIGJ1dHRvbiB0byBjbG9zZSBtb2RhbHMuIEFMU08sIGFsbG93cyBhIG1vZGFsIHRvIGF1dG8tbWFuaWFjYWxseSBvcGVuIG9uIHBhZ2UgbG9hZCBJRiB0aGUgaGFzaCA9PT0gdGhlIG1vZGFsJ3MgdXNlci1zZXQgaWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWVwTGluazogZmFsc2UsXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGJyb3dzZXIgaGlzdG9yeSB3aXRoIHRoZSBvcGVuIG1vZGFsXG4gICAqIEBvcHRpb25cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHVwZGF0ZUhpc3Rvcnk6IGZhbHNlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGFwcGVuZCB0byBjdXN0b20gZGl2LlxuICAqIEBvcHRpb25cbiAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0IFwiYm9keVwiXG4gICovXG4gIGFwcGVuZFRvOiBcImJvZHlcIixcbiAgLyoqXG4gICAqIEFsbG93cyBhZGRpbmcgYWRkaXRpb25hbCBjbGFzcyBuYW1lcyB0byB0aGUgcmV2ZWFsIG92ZXJsYXkuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIGFkZGl0aW9uYWxPdmVybGF5Q2xhc3NlczogJydcbn07XG5cbmZ1bmN0aW9uIGlQaG9uZVNuaWZmKCkge1xuICByZXR1cm4gKC9pUChhZHxob25lfG9kKS4qT1MvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGFuZHJvaWRTbmlmZigpIHtcbiAgcmV0dXJuICgvQW5kcm9pZC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgKTtcbn1cblxuZnVuY3Rpb24gbW9iaWxlU25pZmYoKSB7XG4gIHJldHVybiBpUGhvbmVTbmlmZigpIHx8IGFuZHJvaWRTbmlmZigpO1xufVxuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge01lZGlhUXVlcnk6IHdpbmRvdy5Gb3VuZGF0aW9uLk1lZGlhUXVlcnl9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRyaWdnZXJzOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18pO1xuXG5cblxuXG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChwcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbiAgICAgIHJldHVybiB3aW5kb3dbcHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlciddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KCk7XG5cbnZhciB0cmlnZ2VycyA9IGZ1bmN0aW9uIChlbCwgdHlwZSkge1xuICBlbC5kYXRhKHR5cGUpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIGlkKVt0eXBlID09PSAnY2xvc2UnID8gJ3RyaWdnZXInIDogJ3RyaWdnZXJIYW5kbGVyJ10odHlwZSArICcuemYudHJpZ2dlcicsIFtlbF0pO1xuICB9KTtcbn07XG5cbnZhciBUcmlnZ2VycyA9IHtcbiAgTGlzdGVuZXJzOiB7XG4gICAgQmFzaWM6IHt9LFxuICAgIEdsb2JhbDoge31cbiAgfSxcbiAgSW5pdGlhbGl6ZXJzOiB7fVxufTtcblxuVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljID0ge1xuICBvcGVuTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB0cmlnZ2VycyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCAnb3BlbicpO1xuICB9LFxuICBjbG9zZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCdjbG9zZScpO1xuICAgIGlmIChpZCkge1xuICAgICAgdHJpZ2dlcnMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgJ2Nsb3NlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlcignY2xvc2UuemYudHJpZ2dlcicpO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ3RvZ2dsZScpO1xuICAgIGlmIChpZCkge1xuICAgICAgdHJpZ2dlcnMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgJ3RvZ2dsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9LFxuICBjbG9zZWFibGVMaXN0ZW5lcjogZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHZhciBhbmltYXRpb24gPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ2Nsb3NhYmxlJyk7XG5cbiAgICBpZiAoYW5pbWF0aW9uICE9PSAnJykge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJNb3Rpb25cIl0uYW5pbWF0ZU91dChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCBhbmltYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmZhZGVPdXQoKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICB9XG4gIH0sXG4gIHRvZ2dsZUZvY3VzTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgaWQpLnRyaWdnZXJIYW5kbGVyKCd0b2dnbGUuemYudHJpZ2dlcicsIFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpXSk7XG4gIH1cbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtb3Blbl0gd2lsbCByZXZlYWwgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkT3Blbkxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5vcGVuTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1vcGVuXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5vcGVuTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zZV0gd2lsbCBjbG9zZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbi8vIElmIHVzZWQgd2l0aG91dCBhIHZhbHVlIG9uIFtkYXRhLWNsb3NlXSwgdGhlIGV2ZW50IHdpbGwgYnViYmxlLCBhbGxvd2luZyBpdCB0byBjbG9zZSBhIHBhcmVudCBjb21wb25lbnQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlXSB3aWxsIHRvZ2dsZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGVdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2FibGVdIHdpbGwgcmVzcG9uZCB0byBjbG9zZS56Zi50cmlnZ2VyIGV2ZW50cy5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZWFibGVMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2Nsb3NlLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xvc2UuemYudHJpZ2dlcicsICdbZGF0YS1jbG9zZWFibGVdLCBbZGF0YS1jbG9zYWJsZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGUtZm9jdXNdIHdpbGwgcmVzcG9uZCB0byBjb21pbmcgaW4gYW5kIG91dCBvZiBmb2N1c1xuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUZvY3VzTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVGb2N1c0xpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZS1mb2N1c10nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlRm9jdXNMaXN0ZW5lcik7XG59O1xuXG4vLyBNb3JlIEdsb2JhbC9jb21wbGV4IGxpc3RlbmVycyBhbmQgdHJpZ2dlcnNcblRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwgPSB7XG4gIHJlc2l6ZUxpc3RlbmVyOiBmdW5jdGlvbiAoJG5vZGVzKSB7XG4gICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgcmVzaXplIGV2ZW50XG4gICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJyZXNpemVcIik7XG4gIH0sXG4gIHNjcm9sbExpc3RlbmVyOiBmdW5jdGlvbiAoJG5vZGVzKSB7XG4gICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJzY3JvbGxcIik7XG4gIH0sXG4gIGNsb3NlTWVMaXN0ZW5lcjogZnVuY3Rpb24gKGUsIHBsdWdpbklkKSB7XG4gICAgdmFyIHBsdWdpbiA9IGUubmFtZXNwYWNlLnNwbGl0KCcuJylbMF07XG4gICAgdmFyIHBsdWdpbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS0nICsgcGx1Z2luICsgJ10nKS5ub3QoJ1tkYXRhLXlldGktYm94PVwiJyArIHBsdWdpbklkICsgJ1wiXScpO1xuXG4gICAgcGx1Z2lucy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyk7XG4gICAgICBfdGhpcy50cmlnZ2VySGFuZGxlcignY2xvc2UuemYudHJpZ2dlcicsIFtfdGhpc10pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gR2xvYmFsLCBwYXJzZXMgd2hvbGUgZG9jdW1lbnQuXG59O1RyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZW1lTGlzdGVuZXIgPSBmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICB2YXIgeWV0aUJveGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEteWV0aS1ib3hdJyksXG4gICAgICBwbHVnTmFtZXMgPSBbJ2Ryb3Bkb3duJywgJ3Rvb2x0aXAnLCAncmV2ZWFsJ107XG5cbiAgaWYgKHBsdWdpbk5hbWUpIHtcbiAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwbHVnTmFtZXMucHVzaChwbHVnaW5OYW1lKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGx1Z2luTmFtZVswXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBsdWdOYW1lcy5jb25jYXQocGx1Z2luTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsdWdpbiBuYW1lcyBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHlldGlCb3hlcy5sZW5ndGgpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuICdjbG9zZW1lLnpmLicgKyBuYW1lO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwuY2xvc2VNZUxpc3RlbmVyKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGVib3VuY2VHbG9iYWxMaXN0ZW5lcihkZWJvdW5jZSwgdHJpZ2dlciwgbGlzdGVuZXIpIHtcbiAgdmFyIHRpbWVyID0gdm9pZCAwLFxuICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG4gIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYodHJpZ2dlcikub24odHJpZ2dlciwgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgfVxuICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCBkZWJvdW5jZSB8fCAxMCk7IC8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gIH0pO1xufVxuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoZGVib3VuY2UpIHtcbiAgdmFyICRub2RlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCAncmVzaXplLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLnJlc2l6ZUxpc3RlbmVyLCAkbm9kZXMpO1xuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2Nyb2xsTGlzdGVuZXIgPSBmdW5jdGlvbiAoZGVib3VuY2UpIHtcbiAgdmFyICRub2RlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXNjcm9sbF0nKTtcbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCAnc2Nyb2xsLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLnNjcm9sbExpc3RlbmVyLCAkbm9kZXMpO1xuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkTXV0YXRpb25FdmVudHNMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyICRub2RlcyA9ICRlbGVtLmZpbmQoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAvL2VsZW1lbnQgY2FsbGJhY2tcbiAgdmFyIGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24gPSBmdW5jdGlvbiAobXV0YXRpb25SZWNvcmRzTGlzdCkge1xuICAgIHZhciAkdGFyZ2V0ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShtdXRhdGlvblJlY29yZHNMaXN0WzBdLnRhcmdldCk7XG5cbiAgICAvL3RyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBlbGVtZW50IGRlcGVuZGluZyBvbiB0eXBlXG4gICAgc3dpdGNoIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJhdHRyaWJ1dGVzXCI6XG4gICAgICAgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJzY3JvbGxcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuICAgICAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInLCBbJHRhcmdldCwgd2luZG93LnBhZ2VZT2Zmc2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInJlc2l6ZVwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG4gICAgICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS5hdHRyKFwiZGF0YS1ldmVudHNcIiwgXCJtdXRhdGVcIik7XG4gICAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJjaGlsZExpc3RcIjpcbiAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS5hdHRyKFwiZGF0YS1ldmVudHNcIiwgXCJtdXRhdGVcIik7XG4gICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlckhhbmRsZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKV0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy9ub3RoaW5nXG4gICAgfVxuICB9O1xuXG4gIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgLy9mb3IgZWFjaCBlbGVtZW50IHRoYXQgbmVlZHMgdG8gbGlzdGVuIGZvciByZXNpemluZywgc2Nyb2xsaW5nLCBvciBtdXRhdGlvbiBhZGQgYSBzaW5nbGUgb2JzZXJ2ZXJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSAkbm9kZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICB2YXIgZWxlbWVudE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbik7XG4gICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZSgkbm9kZXNbaV0sIHsgYXR0cmlidXRlczogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlRmlsdGVyOiBbXCJkYXRhLWV2ZW50c1wiLCBcInN0eWxlXCJdIH0pO1xuICAgIH1cbiAgfVxufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyICRkb2N1bWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQpO1xuXG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRPcGVuTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZWFibGVMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlRm9jdXNMaXN0ZW5lcigkZG9jdW1lbnQpO1xufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyICRkb2N1bWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkTXV0YXRpb25FdmVudHNMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkUmVzaXplTGlzdGVuZXIoKTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNjcm9sbExpc3RlbmVyKCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZW1lTGlzdGVuZXIoKTtcbn07XG5cblRyaWdnZXJzLmluaXQgPSBmdW5jdGlvbiAoJCwgRm91bmRhdGlvbikge1xuICBpZiAodHlwZW9mICQudHJpZ2dlcnNJbml0aWFsaXplZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgJGRvY3VtZW50ID0gJChkb2N1bWVudCk7XG5cbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzKCk7XG4gICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycygpO1xuICAgICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkLnRyaWdnZXJzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKEZvdW5kYXRpb24pIHtcbiAgICBGb3VuZGF0aW9uLlRyaWdnZXJzID0gVHJpZ2dlcnM7XG4gICAgLy8gTGVnYWN5IGluY2x1ZGVkIHRvIGJlIGJhY2t3YXJkcyBjb21wYXRpYmxlIGZvciBub3cuXG4gICAgRm91bmRhdGlvbi5JSGVhcllvdSA9IFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnM7XG4gIH1cbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOTYpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge0ZvdW5kYXRpb246IHdpbmRvdy5Gb3VuZGF0aW9ufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge1BsdWdpbjogd2luZG93LkZvdW5kYXRpb24uUGx1Z2lufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge3J0bDogd2luZG93LkZvdW5kYXRpb24ucnRsLCBHZXRZb0RpZ2l0czogd2luZG93LkZvdW5kYXRpb24uR2V0WW9EaWdpdHMsIHRyYW5zaXRpb25lbmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLnRyYW5zaXRpb25lbmR9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fc3RpY2t5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fc3RpY2t5X19bXCJhXCIgLyogU3RpY2t5ICovXSwgJ1N0aWNreScpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TW90aW9uOiB3aW5kb3cuRm91bmRhdGlvbi5Nb3Rpb24sIE1vdmU6IHdpbmRvdy5Gb3VuZGF0aW9uLk1vdmV9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TWVkaWFRdWVyeTogd2luZG93LkZvdW5kYXRpb24uTWVkaWFRdWVyeX07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2MDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFN0aWNreTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX21lZGlhUXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fcGx1Z2luX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG5cblxuLyoqXG4gKiBTdGlja3kgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnN0aWNreVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxudmFyIFN0aWNreSA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhTdGlja3ksIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIFN0aWNreSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RpY2t5KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU3RpY2t5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3RpY2t5KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RpY2t5LCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc3RpY2t5IHRoaW5nLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFN0aWNreVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIHN0aWNreS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB3aGVuIGNyZWF0aW5nIHRoZSBlbGVtZW50IHByb2dyYW1tYXRpY2FsbHkuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKHt9LCBTdGlja3kuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1N0aWNreSc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICAvLyBUcmlnZ2VycyBpbml0IGlzIGlkZW1wb3RlbnQsIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgaXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX19bXCJhXCIgLyogVHJpZ2dlcnMgKi9dLmluaXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYSk7XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgc3RpY2t5IGVsZW1lbnQgYnkgYWRkaW5nIGNsYXNzZXMsIGdldHRpbmcvc2V0dGluZyBkaW1lbnNpb25zLCBicmVha3BvaW50cyBhbmQgYXR0cmlidXRlc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLl9pbml0KCk7XG5cbiAgICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN0aWNreS1jb250YWluZXJdJyksXG4gICAgICAgICAgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkIHx8IF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19bXCJHZXRZb0RpZ2l0c1wiXSkoNiwgJ3N0aWNreScpLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lciA9ICRwYXJlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndhc1dyYXBwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLiRlbGVtZW50LndyYXAodGhpcy5vcHRpb25zLmNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lciA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICB9XG4gICAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3MpLmF0dHIoeyAnZGF0YS1yZXNpemUnOiBpZCwgJ2RhdGEtbXV0YXRlJzogaWQgfSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuY2hvciAhPT0gJycpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcikuYXR0cih7ICdkYXRhLW11dGF0ZSc6IGlkIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcm9sbENvdW50ID0gdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICB0aGlzLmlzU3R1Y2sgPSBmYWxzZTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbmUoJ2xvYWQuemYuc3RpY2t5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvL1dlIGNhbGN1bGF0ZSB0aGUgY29udGFpbmVyIGhlaWdodCB0byBoYXZlIGNvcnJlY3QgdmFsdWVzIGZvciBhbmNob3IgcG9pbnRzIG9mZnNldCBjYWxjdWxhdGlvbi5cbiAgICAgICAgX3RoaXMuY29udGFpbmVySGVpZ2h0ID0gX3RoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIiA/IDAgOiBfdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIF90aGlzLiRjb250YWluZXIuY3NzKCdoZWlnaHQnLCBfdGhpcy5jb250YWluZXJIZWlnaHQpO1xuICAgICAgICBfdGhpcy5lbGVtSGVpZ2h0ID0gX3RoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hbmNob3IgIT09ICcnKSB7XG4gICAgICAgICAgX3RoaXMuJGFuY2hvciA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgX3RoaXMub3B0aW9ucy5hbmNob3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wYXJzZVBvaW50cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlLCBzY3JvbGwpO1xuICAgICAgICAgIC8vVW5zdGljayB0aGUgZWxlbWVudCB3aWxsIGVuc3VyZSB0aGF0IHByb3BlciBjbGFzc2VzIGFyZSBzZXQuXG4gICAgICAgICAgaWYgKCFfdGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVtb3ZlU3RpY2t5KHNjcm9sbCA+PSBfdGhpcy50b3BQb2ludCA/IGZhbHNlIDogdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX2V2ZW50cyhpZC5zcGxpdCgnLScpLnJldmVyc2UoKS5qb2luKCctJykpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdXNpbmcgbXVsdGlwbGUgZWxlbWVudHMgYXMgYW5jaG9ycywgY2FsY3VsYXRlcyB0aGUgdG9wIGFuZCBib3R0b20gcGl4ZWwgdmFsdWVzIHRoZSBzdGlja3kgdGhpbmcgc2hvdWxkIHN0aWNrIGFuZCB1bnN0aWNrIG9uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19wYXJzZVBvaW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wYXJzZVBvaW50cygpIHtcbiAgICAgIHZhciB0b3AgPSB0aGlzLm9wdGlvbnMudG9wQW5jaG9yID09IFwiXCIgPyAxIDogdGhpcy5vcHRpb25zLnRvcEFuY2hvcixcbiAgICAgICAgICBidG0gPSB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yID09IFwiXCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDogdGhpcy5vcHRpb25zLmJ0bUFuY2hvcixcbiAgICAgICAgICBwdHMgPSBbdG9wLCBidG1dLFxuICAgICAgICAgIGJyZWFrcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHB0cy5sZW5ndGg7IGkgPCBsZW4gJiYgcHRzW2ldOyBpKyspIHtcbiAgICAgICAgdmFyIHB0O1xuICAgICAgICBpZiAodHlwZW9mIHB0c1tpXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBwdCA9IHB0c1tpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcGxhY2UgPSBwdHNbaV0uc3BsaXQoJzonKSxcbiAgICAgICAgICAgICAgYW5jaG9yID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBwbGFjZVswXSk7XG5cbiAgICAgICAgICBwdCA9IGFuY2hvci5vZmZzZXQoKS50b3A7XG4gICAgICAgICAgaWYgKHBsYWNlWzFdICYmIHBsYWNlWzFdLnRvTG93ZXJDYXNlKCkgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICBwdCArPSBhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha3NbaV0gPSBwdDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb2ludHMgPSBicmVha3M7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgdGhlIHNjcm9sbGluZyBlbGVtZW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gcHNldWRvLXJhbmRvbSBpZCBmb3IgdW5pcXVlIHNjcm9sbCBldmVudCBsaXN0ZW5lci5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoaWQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gJ3Njcm9sbC56Zi4nICsgaWQ7XG4gICAgICBpZiAodGhpcy5pc09uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNhblN0aWNrKSB7XG4gICAgICAgIHRoaXMuaXNPbiA9IHRydWU7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpLm9uKHNjcm9sbExpc3RlbmVyLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChfdGhpcy5zY3JvbGxDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQgPSBfdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudC0tO1xuICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKS5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uIChlLCBlbCkge1xuICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignbXV0YXRlbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uIChlLCBlbCkge1xuICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuJGFuY2hvcikge1xuICAgICAgICB0aGlzLiRhbmNob3Iub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoZSwgZWwpIHtcbiAgICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgZm9yIGV2ZW50cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzZXVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHNIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50c0hhbmRsZXIoaWQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gJ3Njcm9sbC56Zi4nICsgaWQ7XG5cbiAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9jYWxjKGZhbHNlKTtcbiAgICAgICAgaWYgKF90aGlzLmNhblN0aWNrKSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICBfdGhpcy5fZXZlbnRzKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuaXNPbikge1xuICAgICAgICAgIF90aGlzLl9wYXVzZUxpc3RlbmVycyhzY3JvbGxMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZm9yIHNjcm9sbCBhbmQgY2hhbmdlIGV2ZW50cyBvbiBhbmNob3IuXG4gICAgICogQGZpcmVzIFN0aWNreSNwYXVzZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzY3JvbGxMaXN0ZW5lciAtIHVuaXF1ZSwgbmFtZXNwYWNlZCBzY3JvbGwgbGlzdGVuZXIgYXR0YWNoZWQgdG8gYHdpbmRvd2BcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3BhdXNlTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBpcyBwYXVzZWQgZHVlIHRvIHJlc2l6ZSBldmVudCBzaHJpbmtpbmcgdGhlIHZpZXcuXG4gICAgICAgKiBAZXZlbnQgU3RpY2t5I3BhdXNlXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3BhdXNlLnpmLnN0aWNreScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBvbiBldmVyeSBgc2Nyb2xsYCBldmVudCBhbmQgb24gYF9pbml0YFxuICAgICAqIGZpcmVzIGZ1bmN0aW9ucyBiYXNlZCBvbiBib29sZWFucyBhbmQgY2FjaGVkIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2hlY2tTaXplcyAtIHRydWUgaWYgcGx1Z2luIHNob3VsZCByZWNhbGN1bGF0ZSBzaXplcyBhbmQgYnJlYWtwb2ludHMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjcm9sbCAtIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHBhc3NlZCBmcm9tIHNjcm9sbCBldmVudCBjYiBmdW5jdGlvbi4gSWYgbm90IHBhc3NlZCwgZGVmYXVsdHMgdG8gYHdpbmRvdy5wYWdlWU9mZnNldGAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19jYWxjJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NhbGMoY2hlY2tTaXplcywgc2Nyb2xsKSB7XG4gICAgICBpZiAoY2hlY2tTaXplcykge1xuICAgICAgICB0aGlzLl9zZXRTaXplcygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghc2Nyb2xsKSB7XG4gICAgICAgIHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbCA+PSB0aGlzLnRvcFBvaW50KSB7XG4gICAgICAgIGlmIChzY3JvbGwgPD0gdGhpcy5ib3R0b21Qb2ludCkge1xuICAgICAgICAgIGlmICghdGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdGlja3koKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXVzZXMgdGhlICRlbGVtZW50IHRvIGJlY29tZSBzdHVjay5cbiAgICAgKiBBZGRzIGBwb3NpdGlvbjogZml4ZWQ7YCwgYW5kIGhlbHBlciBjbGFzc2VzLlxuICAgICAqIEBmaXJlcyBTdGlja3kjc3R1Y2t0b1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRTdGlja3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0U3RpY2t5KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgICAgbXJnbiA9IHN0aWNrVG8gPT09ICd0b3AnID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luQm90dG9tJyxcbiAgICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnLFxuICAgICAgICAgIGNzcyA9IHt9O1xuXG4gICAgICBjc3NbbXJnbl0gPSB0aGlzLm9wdGlvbnNbbXJnbl0gKyAnZW0nO1xuICAgICAgY3NzW3N0aWNrVG9dID0gMDtcbiAgICAgIGNzc1tub3RTdHVja1RvXSA9ICdhdXRvJztcbiAgICAgIHRoaXMuaXNTdHVjayA9IHRydWU7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1hbmNob3JlZCBpcy1hdC0nICsgbm90U3R1Y2tUbykuYWRkQ2xhc3MoJ2lzLXN0dWNrIGlzLWF0LScgKyBzdGlja1RvKS5jc3MoY3NzKVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGBwb3NpdGlvbjogZml4ZWQ7YFxuICAgICAgICogTmFtZXNwYWNlZCB0byBgdG9wYCBvciBgYm90dG9tYCwgZS5nLiBgc3RpY2t5LnpmLnN0dWNrdG86dG9wYFxuICAgICAgICogQGV2ZW50IFN0aWNreSNzdHVja3RvXG4gICAgICAgKi9cbiAgICAgIC50cmlnZ2VyKCdzdGlja3kuemYuc3R1Y2t0bzonICsgc3RpY2tUbyk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9zZXRTaXplcygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgdW5zdHVjay5cbiAgICAgKiBSZW1vdmVzIGBwb3NpdGlvbjogZml4ZWQ7YCwgYW5kIGhlbHBlciBjbGFzc2VzLlxuICAgICAqIEFkZHMgb3RoZXIgaGVscGVyIGNsYXNzZXMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc1RvcCAtIHRlbGxzIHRoZSBmdW5jdGlvbiBpZiB0aGUgJGVsZW1lbnQgc2hvdWxkIGFuY2hvciB0byB0aGUgdG9wIG9yIGJvdHRvbSBvZiBpdHMgJGFuY2hvciBlbGVtZW50LlxuICAgICAqIEBmaXJlcyBTdGlja3kjdW5zdHVja2Zyb21cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVtb3ZlU3RpY2t5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZVN0aWNreShpc1RvcCkge1xuICAgICAgdmFyIHN0aWNrVG8gPSB0aGlzLm9wdGlvbnMuc3RpY2tUbyxcbiAgICAgICAgICBzdGlja1RvVG9wID0gc3RpY2tUbyA9PT0gJ3RvcCcsXG4gICAgICAgICAgY3NzID0ge30sXG4gICAgICAgICAgYW5jaG9yUHQgPSAodGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSAtIHRoaXMucG9pbnRzWzBdIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0LFxuICAgICAgICAgIG1yZ24gPSBzdGlja1RvVG9wID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luQm90dG9tJyxcbiAgICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUb1RvcCA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgICAgdG9wT3JCb3R0b20gPSBpc1RvcCA/ICd0b3AnIDogJ2JvdHRvbSc7XG5cbiAgICAgIGNzc1ttcmduXSA9IDA7XG5cbiAgICAgIGNzc1snYm90dG9tJ10gPSAnYXV0byc7XG4gICAgICBpZiAoaXNUb3ApIHtcbiAgICAgICAgY3NzWyd0b3AnXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjc3NbJ3RvcCddID0gYW5jaG9yUHQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtc3R1Y2sgaXMtYXQtJyArIHN0aWNrVG8pLmFkZENsYXNzKCdpcy1hbmNob3JlZCBpcy1hdC0nICsgdG9wT3JCb3R0b20pLmNzcyhjc3MpXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYW5jaG9yZWQuXG4gICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYudW5zdHVja2Zyb206Ym90dG9tYFxuICAgICAgICogQGV2ZW50IFN0aWNreSN1bnN0dWNrZnJvbVxuICAgICAgICovXG4gICAgICAudHJpZ2dlcignc3RpY2t5LnpmLnVuc3R1Y2tmcm9tOicgKyB0b3BPckJvdHRvbSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgJGVsZW1lbnQgYW5kICRjb250YWluZXIgc2l6ZXMgZm9yIHBsdWdpbi5cbiAgICAgKiBDYWxscyBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgb24gY29tcGxldGlvbiBvZiBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0U2l6ZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0U2l6ZXMoY2IpIHtcbiAgICAgIHRoaXMuY2FuU3RpY2sgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLmlzKHRoaXMub3B0aW9ucy5zdGlja3lPbik7XG4gICAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgbmV3RWxlbVdpZHRoID0gdGhpcy4kY29udGFpbmVyWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLFxuICAgICAgICAgIGNvbXAgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiRjb250YWluZXJbMF0pLFxuICAgICAgICAgIHBkbmdsID0gcGFyc2VJbnQoY29tcFsncGFkZGluZy1sZWZ0J10sIDEwKSxcbiAgICAgICAgICBwZG5nciA9IHBhcnNlSW50KGNvbXBbJ3BhZGRpbmctcmlnaHQnXSwgMTApO1xuXG4gICAgICBpZiAodGhpcy4kYW5jaG9yICYmIHRoaXMuJGFuY2hvci5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hbmNob3JIZWlnaHQgPSB0aGlzLiRhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGFyc2VQb2ludHMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgICAnbWF4LXdpZHRoJzogbmV3RWxlbVdpZHRoIC0gcGRuZ2wgLSBwZG5nciArICdweCdcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbmV3Q29udGFpbmVySGVpZ2h0ID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgfHwgdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5jc3MoXCJkaXNwbGF5XCIpID09IFwibm9uZVwiKSB7XG4gICAgICAgIG5ld0NvbnRhaW5lckhlaWdodCA9IDA7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRhaW5lckhlaWdodCA9IG5ld0NvbnRhaW5lckhlaWdodDtcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5jc3Moe1xuICAgICAgICBoZWlnaHQ6IG5ld0NvbnRhaW5lckhlaWdodFxuICAgICAgfSk7XG4gICAgICB0aGlzLmVsZW1IZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG5cbiAgICAgIGlmICghdGhpcy5pc1N0dWNrKSB7XG4gICAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1hdC1ib3R0b20nKSkge1xuICAgICAgICAgIHZhciBhbmNob3JQdCA9ICh0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIC0gdGhpcy4kY29udGFpbmVyLm9mZnNldCgpLnRvcCA6IHRoaXMuYW5jaG9ySGVpZ2h0KSAtIHRoaXMuZWxlbUhlaWdodDtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgYW5jaG9yUHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEJyZWFrUG9pbnRzKG5ld0NvbnRhaW5lckhlaWdodCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2IoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdXBwZXIgYW5kIGxvd2VyIGJyZWFrcG9pbnRzIGZvciB0aGUgZWxlbWVudCB0byBiZWNvbWUgc3RpY2t5L3Vuc3RpY2t5LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbGVtSGVpZ2h0IC0gcHggdmFsdWUgZm9yIHN0aWNreS4kZWxlbWVudCBoZWlnaHQsIGNhbGN1bGF0ZWQgYnkgYF9zZXRTaXplc2AuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gY29tcGxldGlvbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0QnJlYWtQb2ludHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0QnJlYWtQb2ludHMoZWxlbUhlaWdodCwgY2IpIHtcbiAgICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2IoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBtVG9wID0gZW1DYWxjKHRoaXMub3B0aW9ucy5tYXJnaW5Ub3ApLFxuICAgICAgICAgIG1CdG0gPSBlbUNhbGModGhpcy5vcHRpb25zLm1hcmdpbkJvdHRvbSksXG4gICAgICAgICAgdG9wUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzBdIDogdGhpcy4kYW5jaG9yLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICBib3R0b21Qb2ludCA9IHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gOiB0b3BQb2ludCArIHRoaXMuYW5jaG9ySGVpZ2h0LFxuXG4gICAgICAvLyB0b3BQb2ludCA9IHRoaXMuJGFuY2hvci5vZmZzZXQoKS50b3AgfHwgdGhpcy5wb2ludHNbMF0sXG4gICAgICAvLyBib3R0b21Qb2ludCA9IHRvcFBvaW50ICsgdGhpcy5hbmNob3JIZWlnaHQgfHwgdGhpcy5wb2ludHNbMV0sXG4gICAgICB3aW5IZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ3RvcCcpIHtcbiAgICAgICAgdG9wUG9pbnQgLT0gbVRvcDtcbiAgICAgICAgYm90dG9tUG9pbnQgLT0gZWxlbUhlaWdodCArIG1Ub3A7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zdGlja1RvID09PSAnYm90dG9tJykge1xuICAgICAgICB0b3BQb2ludCAtPSB3aW5IZWlnaHQgLSAoZWxlbUhlaWdodCArIG1CdG0pO1xuICAgICAgICBib3R0b21Qb2ludCAtPSB3aW5IZWlnaHQgLSBtQnRtO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy90aGlzIHdvdWxkIGJlIHRoZSBzdGlja1RvOiBib3RoIG9wdGlvbi4uLiB0cmlja3lcbiAgICAgIH1cblxuICAgICAgdGhpcy50b3BQb2ludCA9IHRvcFBvaW50O1xuICAgICAgdGhpcy5ib3R0b21Qb2ludCA9IGJvdHRvbVBvaW50O1xuXG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGN1cnJlbnQgc3RpY2t5IGVsZW1lbnQuXG4gICAgICogUmVzZXRzIHRoZSBlbGVtZW50IHRvIHRoZSB0b3AgcG9zaXRpb24gZmlyc3QuXG4gICAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMsIEpTLWFkZGVkIGNzcyBwcm9wZXJ0aWVzIGFuZCBjbGFzc2VzLCBhbmQgdW53cmFwcyB0aGUgJGVsZW1lbnQgaWYgdGhlIEpTIGFkZGVkIHRoZSAkY29udGFpbmVyLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5zdGlja3lDbGFzcyArICcgaXMtYW5jaG9yZWQgaXMtYXQtdG9wJykuY3NzKHtcbiAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgdG9wOiAnJyxcbiAgICAgICAgYm90dG9tOiAnJyxcbiAgICAgICAgJ21heC13aWR0aCc6ICcnXG4gICAgICB9KS5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKS5vZmYoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgIGlmICh0aGlzLiRhbmNob3IgJiYgdGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgICB0aGlzLiRhbmNob3Iub2ZmKCdjaGFuZ2UuemYuc3RpY2t5Jyk7XG4gICAgICB9XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKHRoaXMuc2Nyb2xsTGlzdGVuZXIpO1xuXG4gICAgICBpZiAodGhpcy53YXNXcmFwcGVkKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQudW53cmFwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKS5jc3Moe1xuICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0aWNreTtcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiUGx1Z2luXCJdKTtcblxuU3RpY2t5LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQ3VzdG9taXphYmxlIGNvbnRhaW5lciB0ZW1wbGF0ZS4gQWRkIHlvdXIgb3duIGNsYXNzZXMgZm9yIHN0eWxpbmcgYW5kIHNpemluZy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJmx0O2RpdiBkYXRhLXN0aWNreS1jb250YWluZXImZ3Q7Jmx0Oy9kaXYmZ3Q7J1xuICAgKi9cbiAgY29udGFpbmVyOiAnPGRpdiBkYXRhLXN0aWNreS1jb250YWluZXI+PC9kaXY+JyxcbiAgLyoqXG4gICAqIExvY2F0aW9uIGluIHRoZSB2aWV3IHRoZSBlbGVtZW50IHN0aWNrcyB0by4gQ2FuIGJlIGAndG9wJ2Agb3IgYCdib3R0b20nYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAndG9wJ1xuICAgKi9cbiAgc3RpY2tUbzogJ3RvcCcsXG4gIC8qKlxuICAgKiBJZiBhbmNob3JlZCB0byBhIHNpbmdsZSBlbGVtZW50LCB0aGUgaWQgb2YgdGhhdCBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBhbmNob3I6ICcnLFxuICAvKipcbiAgICogSWYgdXNpbmcgbW9yZSB0aGFuIG9uZSBlbGVtZW50IGFzIGFuY2hvciBwb2ludHMsIHRoZSBpZCBvZiB0aGUgdG9wIGFuY2hvci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgdG9wQW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIGJvdHRvbSBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIGJ0bUFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBNYXJnaW4sIGluIGBlbWAncyB0byBhcHBseSB0byB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IHdoZW4gaXQgYmVjb21lcyBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgbWFyZ2luVG9wOiAxLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIGJvdHRvbSBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIG1hcmdpbkJvdHRvbTogMSxcbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgc3RyaW5nIHRoYXQgaXMgdGhlIG1pbmltdW0gc2NyZWVuIHNpemUgYW4gZWxlbWVudCBzaG91bGQgYmVjb21lIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc3RpY2t5T246ICdtZWRpdW0nLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBzdGlja3kgZWxlbWVudCwgYW5kIHJlbW92ZWQgb24gZGVzdHJ1Y3Rpb24uIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreWAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3N0aWNreSdcbiAgICovXG4gIHN0aWNreUNsYXNzOiAnc3RpY2t5JyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGNvbnRhaW5lci4gRm91bmRhdGlvbiBkZWZhdWx0cyB0byBgc3RpY2t5LWNvbnRhaW5lcmAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3N0aWNreS1jb250YWluZXInXG4gICAqL1xuICBjb250YWluZXJDbGFzczogJ3N0aWNreS1jb250YWluZXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHNjcm9sbCBldmVudHMgYmV0d2VlbiB0aGUgcGx1Z2luJ3MgcmVjYWxjdWxhdGluZyBzdGlja3kgcG9pbnRzLiBTZXR0aW5nIGl0IHRvIGAwYCB3aWxsIGNhdXNlIGl0IHRvIHJlY2FsYyBldmVyeSBzY3JvbGwgZXZlbnQsIHNldHRpbmcgaXQgdG8gYC0xYCB3aWxsIHByZXZlbnQgcmVjYWxjIG9uIHNjcm9sbC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAtMVxuICAgKi9cbiAgY2hlY2tFdmVyeTogLTFcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBlbSB2YWx1ZXNcbiAqIEBwYXJhbSBOdW1iZXIge2VtfSAtIG51bWJlciBvZiBlbSdzIHRvIGNhbGN1bGF0ZSBpbnRvIHBpeGVsc1xuICovXG5mdW5jdGlvbiBlbUNhbGMoZW0pIHtcbiAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHksIG51bGwpLmZvbnRTaXplLCAxMCkgKiBlbTtcbn1cblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVHJpZ2dlcnM7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyk7XG5cblxuXG5cblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcmVmaXhlcyA9IFsnV2ViS2l0JywgJ01veicsICdPJywgJ01zJywgJyddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgcmV0dXJuIHdpbmRvd1twcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJ107XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0oKTtcblxudmFyIHRyaWdnZXJzID0gZnVuY3Rpb24gKGVsLCB0eXBlKSB7XG4gIGVsLmRhdGEodHlwZSkuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgaWQpW3R5cGUgPT09ICdjbG9zZScgPyAndHJpZ2dlcicgOiAndHJpZ2dlckhhbmRsZXInXSh0eXBlICsgJy56Zi50cmlnZ2VyJywgW2VsXSk7XG4gIH0pO1xufTtcblxudmFyIFRyaWdnZXJzID0ge1xuICBMaXN0ZW5lcnM6IHtcbiAgICBCYXNpYzoge30sXG4gICAgR2xvYmFsOiB7fVxuICB9LFxuICBJbml0aWFsaXplcnM6IHt9XG59O1xuXG5UcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMgPSB7XG4gIG9wZW5MaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICdvcGVuJyk7XG4gIH0sXG4gIGNsb3NlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICB0cmlnZ2VycyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCAnY2xvc2UnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCdjbG9zZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9LFxuICB0b2dnbGVMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgndG9nZ2xlJyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICB0cmlnZ2VycyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCAndG9nZ2xlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlcigndG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICB9XG4gIH0sXG4gIGNsb3NlYWJsZUxpc3RlbmVyOiBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgnY2xvc2FibGUnKTtcblxuICAgIGlmIChhbmltYXRpb24gIT09ICcnKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcIk1vdGlvblwiXS5hbmltYXRlT3V0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksIGFuaW1hdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZmFkZU91dCgpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlRm9jdXNMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgndG9nZ2xlLWZvY3VzJyk7XG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBpZCkudHJpZ2dlckhhbmRsZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJywgW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyldKTtcbiAgfVxufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1vcGVuXSB3aWxsIHJldmVhbCBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRPcGVuTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbGljay56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLm9wZW5MaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLW9wZW5dJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLm9wZW5MaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NlXSB3aWxsIGNsb3NlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZUxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2VdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGVdIHdpbGwgdG9nZ2xlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zYWJsZV0gd2lsbCByZXNwb25kIHRvIGNsb3NlLnpmLnRyaWdnZXIgZXZlbnRzLlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlYWJsZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xvc2UuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZWFibGVMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbG9zZS56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlYWJsZV0sIFtkYXRhLWNsb3NhYmxlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZWFibGVMaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLXRvZ2dsZS1mb2N1c10gd2lsbCByZXNwb25kIHRvIGNvbWluZyBpbiBhbmQgb3V0IG9mIGZvY3VzXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlRm9jdXNMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUZvY3VzTGlzdGVuZXIpO1xuICAkZWxlbS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVGb2N1c0xpc3RlbmVyKTtcbn07XG5cbi8vIE1vcmUgR2xvYmFsL2NvbXBsZXggbGlzdGVuZXJzIGFuZCB0cmlnZ2Vyc1xuVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbCA9IHtcbiAgcmVzaXplTGlzdGVuZXI6IGZ1bmN0aW9uICgkbm9kZXMpIHtcbiAgICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIC8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSByZXNpemUgZXZlbnRcbiAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInJlc2l6ZVwiKTtcbiAgfSxcbiAgc2Nyb2xsTGlzdGVuZXI6IGZ1bmN0aW9uICgkbm9kZXMpIHtcbiAgICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIC8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBzY3JvbGwgZXZlbnRcbiAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInNjcm9sbFwiKTtcbiAgfSxcbiAgY2xvc2VNZUxpc3RlbmVyOiBmdW5jdGlvbiAoZSwgcGx1Z2luSWQpIHtcbiAgICB2YXIgcGx1Z2luID0gZS5uYW1lc3BhY2Uuc3BsaXQoJy4nKVswXTtcbiAgICB2YXIgcGx1Z2lucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLScgKyBwbHVnaW4gKyAnXScpLm5vdCgnW2RhdGEteWV0aS1ib3g9XCInICsgcGx1Z2luSWQgKyAnXCJdJyk7XG5cbiAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKTtcbiAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBHbG9iYWwsIHBhcnNlcyB3aG9sZSBkb2N1bWVudC5cbn07VHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlbWVMaXN0ZW5lciA9IGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gIHZhciB5ZXRpQm94ZXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZiAocGx1Z2luTmFtZSkge1xuICAgIGlmICh0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBsdWdOYW1lcy5wdXNoKHBsdWdpbk5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z05hbWVzLmNvbmNhdChwbHVnaW5OYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZiAoeWV0aUJveGVzLmxlbmd0aCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSBwbHVnTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gJ2Nsb3NlbWUuemYuJyArIG5hbWU7XG4gICAgfSkuam9pbignICcpO1xuXG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZihsaXN0ZW5lcnMpLm9uKGxpc3RlbmVycywgVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbC5jbG9zZU1lTGlzdGVuZXIpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCB0cmlnZ2VyLCBsaXN0ZW5lcikge1xuICB2YXIgdGltZXIgPSB2b2lkIDAsXG4gICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcbiAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZih0cmlnZ2VyKS5vbih0cmlnZ2VyLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmICh0aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB9XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIGRlYm91bmNlIHx8IDEwKTsgLy9kZWZhdWx0IHRpbWUgdG8gZW1pdCBzY3JvbGwgZXZlbnRcbiAgfSk7XG59XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIChkZWJvdW5jZSkge1xuICB2YXIgJG5vZGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtcmVzaXplXScpO1xuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsICdyZXNpemUuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwucmVzaXplTGlzdGVuZXIsICRub2Rlcyk7XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTY3JvbGxMaXN0ZW5lciA9IGZ1bmN0aW9uIChkZWJvdW5jZSkge1xuICB2YXIgJG5vZGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtc2Nyb2xsXScpO1xuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsICdzY3JvbGwuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwuc2Nyb2xsTGlzdGVuZXIsICRub2Rlcyk7XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRNdXRhdGlvbkV2ZW50c0xpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgJG5vZGVzID0gJGVsZW0uZmluZCgnW2RhdGEtcmVzaXplXSwgW2RhdGEtc2Nyb2xsXSwgW2RhdGEtbXV0YXRlXScpO1xuXG4gIC8vZWxlbWVudCBjYWxsYmFja1xuICB2YXIgbGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiA9IGZ1bmN0aW9uIChtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgdmFyICR0YXJnZXQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udGFyZ2V0KTtcblxuICAgIC8vdHJpZ2dlciB0aGUgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHR5cGVcbiAgICBzd2l0Y2ggKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udHlwZSkge1xuICAgICAgY2FzZSBcImF0dHJpYnV0ZXNcIjpcbiAgICAgICAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInNjcm9sbFwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG4gICAgICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LCB3aW5kb3cucGFnZVlPZmZzZXRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikgPT09IFwicmVzaXplXCIgJiYgbXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtZXZlbnRzXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLCBcIm11dGF0ZVwiKTtcbiAgICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImNoaWxkTGlzdFwiOlxuICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLCBcIm11dGF0ZVwiKTtcbiAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvL25vdGhpbmdcbiAgICB9XG4gIH07XG5cbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICAvL2ZvciBlYWNoIGVsZW1lbnQgdGhhdCBuZWVkcyB0byBsaXN0ZW4gZm9yIHJlc2l6aW5nLCBzY3JvbGxpbmcsIG9yIG11dGF0aW9uIGFkZCBhIHNpbmdsZSBvYnNlcnZlclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9ICRub2Rlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIHZhciBlbGVtZW50T2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uKTtcbiAgICAgIGVsZW1lbnRPYnNlcnZlci5vYnNlcnZlKCRub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6IFtcImRhdGEtZXZlbnRzXCIsIFwic3R5bGVcIl0gfSk7XG4gICAgfVxuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgJGRvY3VtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudCk7XG5cbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE9wZW5MaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlYWJsZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVGb2N1c0xpc3RlbmVyKCRkb2N1bWVudCk7XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgJGRvY3VtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRNdXRhdGlvbkV2ZW50c0xpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lcigpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2Nyb2xsTGlzdGVuZXIoKTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlbWVMaXN0ZW5lcigpO1xufTtcblxuVHJpZ2dlcnMuaW5pdCA9IGZ1bmN0aW9uICgkLCBGb3VuZGF0aW9uKSB7XG4gIGlmICh0eXBlb2YgJC50cmlnZ2Vyc0luaXRpYWxpemVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciAkZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMoKTtcbiAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzKCk7XG4gICAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICQudHJpZ2dlcnNJbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBpZiAoRm91bmRhdGlvbikge1xuICAgIEZvdW5kYXRpb24uVHJpZ2dlcnMgPSBUcmlnZ2VycztcbiAgICAvLyBMZWdhY3kgaW5jbHVkZWQgdG8gYmUgYmFja3dhcmRzIGNvbXBhdGlibGUgZm9yIG5vdy5cbiAgICBGb3VuZGF0aW9uLklIZWFyWW91ID0gVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycztcbiAgfVxufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5Njpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5Nyk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge29uSW1hZ2VzTG9hZGVkOiB3aW5kb3cuRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtQbHVnaW46IHdpbmRvdy5Gb3VuZGF0aW9uLlBsdWdpbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl90YWJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdGFic19fW1wiYVwiIC8qIFRhYnMgKi9dLCAnVGFicycpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7S2V5Ym9hcmQ6IHdpbmRvdy5Gb3VuZGF0aW9uLktleWJvYXJkfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDYxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVGFiczsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2tleWJvYXJkX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9pbWFnZUxvYWRlcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfaW1hZ2VMb2FkZXJfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl9wbHVnaW5fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fKTtcblxuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuXG5cblxuLyoqXG4gKiBUYWJzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi50YWJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmltYWdlTG9hZGVyIGlmIHRhYnMgY29udGFpbiBpbWFnZXNcbiAqL1xuXG52YXIgVGFicyA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhUYWJzLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBUYWJzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJzKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGFicy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYnMpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUYWJzLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRhYnMuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgVGFic1xuICAgICAqIEBmaXJlcyBUYWJzI2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIHRhYnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgVGFicy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnVGFicyc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9rZXlib2FyZF9fW1wiS2V5Ym9hcmRcIl0ucmVnaXN0ZXIoJ1RhYnMnLCB7XG4gICAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cycsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgICAgLy8gJ1RBQic6ICduZXh0JyxcbiAgICAgICAgLy8gJ1NISUZUX1RBQic6ICdwcmV2aW91cydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSB0YWJzIGJ5IHNob3dpbmcgYW5kIGZvY3VzaW5nIChpZiBhdXRvRm9jdXM9dHJ1ZSkgdGhlIHByZXNldCBhY3RpdmUgdGFiLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHsgJ3JvbGUnOiAndGFibGlzdCcgfSk7XG4gICAgICB0aGlzLiR0YWJUaXRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLmxpbmtDbGFzcyk7XG4gICAgICB0aGlzLiR0YWJDb250ZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtdGFicy1jb250ZW50PVwiJyArIHRoaXMuJGVsZW1lbnRbMF0uaWQgKyAnXCJdJyk7XG5cbiAgICAgIHRoaXMuJHRhYlRpdGxlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgICRsaW5rID0gJGVsZW0uZmluZCgnYScpLFxuICAgICAgICAgICAgaXNBY3RpdmUgPSAkZWxlbS5oYXNDbGFzcygnJyArIF90aGlzLm9wdGlvbnMubGlua0FjdGl2ZUNsYXNzKSxcbiAgICAgICAgICAgIGhhc2ggPSAkbGluay5hdHRyKCdkYXRhLXRhYnMtdGFyZ2V0JykgfHwgJGxpbmtbMF0uaGFzaC5zbGljZSgxKSxcbiAgICAgICAgICAgIGxpbmtJZCA9ICRsaW5rWzBdLmlkID8gJGxpbmtbMF0uaWQgOiBoYXNoICsgJy1sYWJlbCcsXG4gICAgICAgICAgICAkdGFiQ29udGVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgaGFzaCk7XG5cbiAgICAgICAgJGVsZW0uYXR0cih7ICdyb2xlJzogJ3ByZXNlbnRhdGlvbicgfSk7XG5cbiAgICAgICAgJGxpbmsuYXR0cih7XG4gICAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgICAnYXJpYS1jb250cm9scyc6IGhhc2gsXG4gICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBpc0FjdGl2ZSxcbiAgICAgICAgICAnaWQnOiBsaW5rSWQsXG4gICAgICAgICAgJ3RhYmluZGV4JzogaXNBY3RpdmUgPyAnMCcgOiAnLTEnXG4gICAgICAgIH0pO1xuXG4gICAgICAgICR0YWJDb250ZW50LmF0dHIoe1xuICAgICAgICAgICdyb2xlJzogJ3RhYnBhbmVsJyxcbiAgICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICAkdGFiQ29udGVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNBY3RpdmUgJiYgX3RoaXMub3B0aW9ucy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykubG9hZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogJGVsZW0ub2Zmc2V0KCkudG9wIH0sIF90aGlzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2VEZWxheSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAkbGluay5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXRjaEhlaWdodCkge1xuICAgICAgICB2YXIgJGltYWdlcyA9IHRoaXMuJHRhYkNvbnRlbnQuZmluZCgnaW1nJyk7XG5cbiAgICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2ltYWdlTG9hZGVyX19bXCJvbkltYWdlc0xvYWRlZFwiXSkoJGltYWdlcywgdGhpcy5fc2V0SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3NldEhlaWdodCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vY3VycmVudCBjb250ZXh0LWJvdW5kIGZ1bmN0aW9uIHRvIG9wZW4gdGFicyBvbiBwYWdlIGxvYWQgb3IgaGlzdG9yeSBwb3BzdGF0ZVxuICAgICAgdGhpcy5fY2hlY2tEZWVwTGluayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFuY2hvciA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAvL25lZWQgYSBoYXNoIGFuZCBhIHJlbGV2YW50IGFuY2hvciBpbiB0aGlzIHRhYnNldFxuICAgICAgICBpZiAoYW5jaG9yLmxlbmd0aCkge1xuICAgICAgICAgIHZhciAkbGluayA9IF90aGlzMy4kZWxlbWVudC5maW5kKCdbaHJlZiQ9XCInICsgYW5jaG9yICsgJ1wiXScpO1xuICAgICAgICAgIGlmICgkbGluay5sZW5ndGgpIHtcbiAgICAgICAgICAgIF90aGlzMy5zZWxlY3RUYWIoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShhbmNob3IpLCB0cnVlKTtcblxuICAgICAgICAgICAgLy9yb2xsIHVwIGEgbGl0dGxlIHRvIHNob3cgdGhlIHRpdGxlc1xuICAgICAgICAgICAgaWYgKF90aGlzMy5vcHRpb25zLmRlZXBMaW5rU211ZGdlKSB7XG4gICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBfdGhpczMuJGVsZW1lbnQub2Zmc2V0KCk7XG4gICAgICAgICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBvZmZzZXQudG9wIH0sIF90aGlzMy5vcHRpb25zLmRlZXBMaW5rU211ZGdlRGVsYXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB6cGx1Z2luIGhhcyBkZWVwbGlua2VkIGF0IHBhZ2Vsb2FkXG4gICAgICAgICAgICAgICogQGV2ZW50IFRhYnMjZGVlcGxpbmtcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF90aGlzMy4kZWxlbWVudC50cmlnZ2VyKCdkZWVwbGluay56Zi50YWJzJywgWyRsaW5rLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKGFuY2hvcildKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vdXNlIGJyb3dzZXIgdG8gb3BlbiBhIHRhYiwgaWYgaXQgZXhpc3RzIGluIHRoaXMgdGFic2V0XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrRGVlcExpbmsoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdGhpcy5fYWRkS2V5SGFuZGxlcigpO1xuICAgICAgdGhpcy5fYWRkQ2xpY2tIYW5kbGVyKCk7XG4gICAgICB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciA9IHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpO1xuXG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBjbGljayBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19hZGRDbGlja0hhbmRsZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkQ2xpY2tIYW5kbGVyKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2NsaWNrLnpmLnRhYnMnKS5vbignY2xpY2suemYudGFicycsICcuJyArIHRoaXMub3B0aW9ucy5saW5rQ2xhc3MsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMga2V5Ym9hcmQgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRkS2V5SGFuZGxlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRLZXlIYW5kbGVyKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kdGFiVGl0bGVzLm9mZigna2V5ZG93bi56Zi50YWJzJykub24oJ2tleWRvd24uemYudGFicycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLndoaWNoID09PSA5KSByZXR1cm47XG5cbiAgICAgICAgdmFyICRlbGVtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSxcbiAgICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAgICRuZXh0RWxlbWVudDtcblxuICAgICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIGlmIChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMud3JhcE9uS2V5cykge1xuICAgICAgICAgICAgICAkcHJldkVsZW1lbnQgPSBpID09PSAwID8gJGVsZW1lbnRzLmxhc3QoKSA6ICRlbGVtZW50cy5lcShpIC0gMSk7XG4gICAgICAgICAgICAgICRuZXh0RWxlbWVudCA9IGkgPT09ICRlbGVtZW50cy5sZW5ndGggLSAxID8gJGVsZW1lbnRzLmZpcnN0KCkgOiAkZWxlbWVudHMuZXEoaSArIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWF4KDAsIGkgLSAxKSk7XG4gICAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1pbihpICsgMSwgJGVsZW1lbnRzLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfa2V5Ym9hcmRfX1tcIktleWJvYXJkXCJdLmhhbmRsZUtleShlLCAnVGFicycsIHtcbiAgICAgICAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRlbGVtZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkcHJldkVsZW1lbnQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG5leHRFbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJG5leHRFbGVtZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSB0YWIgYCR0YXJnZXRDb250ZW50YCBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC4gQ29sbGFwc2VzIGFjdGl2ZSB0YWIuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gb3Blbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpc3RvcnlIYW5kbGVkIC0gYnJvd3NlciBoYXMgYWxyZWFkeSBoYW5kbGVkIGEgaGlzdG9yeSB1cGRhdGVcbiAgICAgKiBAZmlyZXMgVGFicyNjaGFuZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2hhbmRsZVRhYkNoYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCwgaGlzdG9yeUhhbmRsZWQpIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBmb3IgYWN0aXZlIGNsYXNzIG9uIHRhcmdldC4gQ29sbGFwc2UgaWYgZXhpc3RzLlxuICAgICAgICovXG4gICAgICBpZiAoJHRhcmdldC5oYXNDbGFzcygnJyArIHRoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWN0aXZlQ29sbGFwc2UpIHtcbiAgICAgICAgICB0aGlzLl9jb2xsYXBzZVRhYigkdGFyZ2V0KTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHpwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjb2xsYXBzZWQgdGFicy5cbiAgICAgICAgICAgKiBAZXZlbnQgVGFicyNjb2xsYXBzZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY29sbGFwc2UuemYudGFicycsIFskdGFyZ2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgJG9sZFRhYiA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubGlua0NsYXNzICsgJy4nICsgdGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcyksXG4gICAgICAgICAgJHRhYkxpbmsgPSAkdGFyZ2V0LmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksXG4gICAgICAgICAgaGFzaCA9ICR0YWJMaW5rLmF0dHIoJ2RhdGEtdGFicy10YXJnZXQnKSB8fCAkdGFiTGlua1swXS5oYXNoLnNsaWNlKDEpLFxuICAgICAgICAgICR0YXJnZXRDb250ZW50ID0gdGhpcy4kdGFiQ29udGVudC5maW5kKCcjJyArIGhhc2gpO1xuXG4gICAgICAvL2Nsb3NlIG9sZCB0YWJcbiAgICAgIHRoaXMuX2NvbGxhcHNlVGFiKCRvbGRUYWIpO1xuXG4gICAgICAvL29wZW4gbmV3IHRhYlxuICAgICAgdGhpcy5fb3BlblRhYigkdGFyZ2V0KTtcblxuICAgICAgLy9laXRoZXIgcmVwbGFjZSBvciB1cGRhdGUgYnJvd3NlciBoaXN0b3J5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rICYmICFoaXN0b3J5SGFuZGxlZCkge1xuICAgICAgICB2YXIgYW5jaG9yID0gJHRhcmdldC5maW5kKCdhJykuYXR0cignaHJlZicpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBkYXRlSGlzdG9yeSkge1xuICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgYW5jaG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgJycsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkIHRhYnMuXG4gICAgICAgKiBAZXZlbnQgVGFicyNjaGFuZ2VcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UuemYudGFicycsIFskdGFyZ2V0LCAkdGFyZ2V0Q29udGVudF0pO1xuXG4gICAgICAvL2ZpcmUgdG8gY2hpbGRyZW4gYSBtdXRhdGlvbiBldmVudFxuICAgICAgJHRhcmdldENvbnRlbnQuZmluZChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlcihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHRhYiBgJHRhcmdldENvbnRlbnRgIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIE9wZW4uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19vcGVuVGFiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29wZW5UYWIoJHRhcmdldCkge1xuICAgICAgdmFyICR0YWJMaW5rID0gJHRhcmdldC5maW5kKCdbcm9sZT1cInRhYlwiXScpLFxuICAgICAgICAgIGhhc2ggPSAkdGFiTGluay5hdHRyKCdkYXRhLXRhYnMtdGFyZ2V0JykgfHwgJHRhYkxpbmtbMF0uaGFzaC5zbGljZSgxKSxcbiAgICAgICAgICAkdGFyZ2V0Q29udGVudCA9IHRoaXMuJHRhYkNvbnRlbnQuZmluZCgnIycgKyBoYXNoKTtcblxuICAgICAgJHRhcmdldC5hZGRDbGFzcygnJyArIHRoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpO1xuXG4gICAgICAkdGFiTGluay5hdHRyKHtcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsXG4gICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgfSk7XG5cbiAgICAgICR0YXJnZXRDb250ZW50LmFkZENsYXNzKCcnICsgdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29sbGFwc2VzIGAkdGFyZ2V0Q29udGVudGAgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gT3Blbi5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2NvbGxhcHNlVGFiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbGxhcHNlVGFiKCR0YXJnZXQpIHtcbiAgICAgIHZhciAkdGFyZ2V0X2FuY2hvciA9ICR0YXJnZXQucmVtb3ZlQ2xhc3MoJycgKyB0aGlzLm9wdGlvbnMubGlua0FjdGl2ZUNsYXNzKS5maW5kKCdbcm9sZT1cInRhYlwiXScpLmF0dHIoe1xuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZScsXG4gICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICB9KTtcblxuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyAkdGFyZ2V0X2FuY2hvci5hdHRyKCdhcmlhLWNvbnRyb2xzJykpLnJlbW92ZUNsYXNzKCcnICsgdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpLmF0dHIoeyAnYXJpYS1oaWRkZW4nOiAndHJ1ZScgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGljIG1ldGhvZCBmb3Igc2VsZWN0aW5nIGEgY29udGVudCBwYW5lIHRvIGRpc3BsYXkuXG4gICAgICogQHBhcmFtIHtqUXVlcnkgfCBTdHJpbmd9IGVsZW0gLSBqUXVlcnkgb2JqZWN0IG9yIHN0cmluZyBvZiB0aGUgaWQgb2YgdGhlIHBhbmUgdG8gZGlzcGxheS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpc3RvcnlIYW5kbGVkIC0gYnJvd3NlciBoYXMgYWxyZWFkeSBoYW5kbGVkIGEgaGlzdG9yeSB1cGRhdGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2VsZWN0VGFiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0VGFiKGVsZW0sIGhpc3RvcnlIYW5kbGVkKSB7XG4gICAgICB2YXIgaWRTdHI7XG5cbiAgICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWRTdHIgPSBlbGVtWzBdLmlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWRTdHIgPSBlbGVtO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWRTdHIuaW5kZXhPZignIycpIDwgMCkge1xuICAgICAgICBpZFN0ciA9ICcjJyArIGlkU3RyO1xuICAgICAgfVxuXG4gICAgICB2YXIgJHRhcmdldCA9IHRoaXMuJHRhYlRpdGxlcy5maW5kKCdbaHJlZiQ9XCInICsgaWRTdHIgKyAnXCJdJykucGFyZW50KCcuJyArIHRoaXMub3B0aW9ucy5saW5rQ2xhc3MpO1xuXG4gICAgICB0aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCwgaGlzdG9yeUhhbmRsZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zZXRIZWlnaHQnLFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIGVhY2ggcGFuZWwgdG8gdGhlIGhlaWdodCBvZiB0aGUgdGFsbGVzdCBwYW5lbC5cbiAgICAgKiBJZiBlbmFibGVkIGluIG9wdGlvbnMsIGdldHMgY2FsbGVkIG9uIG1lZGlhIHF1ZXJ5IGNoYW5nZS5cbiAgICAgKiBJZiBsb2FkaW5nIGNvbnRlbnQgdmlhIGV4dGVybmFsIHNvdXJjZSwgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSBvciB3aXRoIF9yZWZsb3cuXG4gICAgICogSWYgZW5hYmxlZCB3aXRoIGBkYXRhLW1hdGNoLWhlaWdodD1cInRydWVcImAsIHRhYnMgc2V0cyB0byBlcXVhbCBoZWlnaHRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0SGVpZ2h0KCkge1xuICAgICAgdmFyIG1heCA9IDAsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzOyAvLyBMb2NrIGRvd24gdGhlIGB0aGlzYCB2YWx1ZSBmb3IgdGhlIHJvb3QgdGFicyBvYmplY3RcblxuICAgICAgdGhpcy4kdGFiQ29udGVudC5maW5kKCcuJyArIHRoaXMub3B0aW9ucy5wYW5lbENsYXNzKS5jc3MoJ2hlaWdodCcsICcnKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgcGFuZWwgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLFxuICAgICAgICAgICAgaXNBY3RpdmUgPSBwYW5lbC5oYXNDbGFzcygnJyArIF90aGlzLm9wdGlvbnMucGFuZWxBY3RpdmVDbGFzcyk7IC8vIGdldCB0aGUgb3B0aW9ucyBmcm9tIHRoZSBwYXJlbnQgaW5zdGVhZCBvZiB0cnlpbmcgdG8gZ2V0IHRoZW0gZnJvbSB0aGUgY2hpbGRcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgcGFuZWwuY3NzKHsgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJywgJ2Rpc3BsYXknOiAnYmxvY2snIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgcGFuZWwuY3NzKHtcbiAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJycsXG4gICAgICAgICAgICAnZGlzcGxheSc6ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXggPSB0ZW1wID4gbWF4ID8gdGVtcCA6IG1heDtcbiAgICAgIH0pLmNzcygnaGVpZ2h0JywgbWF4ICsgJ3B4Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYW4gdGFicy5cbiAgICAgKiBAZmlyZXMgVGFicyNkZXN0cm95ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubGlua0NsYXNzKS5vZmYoJy56Zi50YWJzJykuaGlkZSgpLmVuZCgpLmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLnBhbmVsQ2xhc3MpLmhpZGUoKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXRjaEhlaWdodCkge1xuICAgICAgICBpZiAodGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZigncG9wc3RhdGUnLCB0aGlzLl9jaGVja0RlZXBMaW5rKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGFicztcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3BsdWdpbl9fW1wiUGx1Z2luXCJdKTtcblxuVGFicy5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgd2luZG93IHRvIHNjcm9sbCB0byBjb250ZW50IG9mIHBhbmUgc3BlY2lmaWVkIGJ5IGhhc2ggYW5jaG9yXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWVwTGluazogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFkanVzdCB0aGUgZGVlcCBsaW5rIHNjcm9sbCB0byBtYWtlIHN1cmUgdGhlIHRvcCBvZiB0aGUgdGFiIHBhbmVsIGlzIHZpc2libGVcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rU211ZGdlOiBmYWxzZSxcblxuICAvKipcbiAgICogQW5pbWF0aW9uIHRpbWUgKG1zKSBmb3IgdGhlIGRlZXAgbGluayBhZGp1c3RtZW50XG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMzAwXG4gICAqL1xuICBkZWVwTGlua1NtdWRnZURlbGF5OiAzMDAsXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYnJvd3NlciBoaXN0b3J5IHdpdGggdGhlIG9wZW4gdGFiXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB1cGRhdGVIaXN0b3J5OiBmYWxzZSxcblxuICAvKipcbiAgICogQWxsb3dzIHRoZSB3aW5kb3cgdG8gc2Nyb2xsIHRvIGNvbnRlbnQgb2YgYWN0aXZlIHBhbmUgb24gbG9hZCBpZiBzZXQgdG8gdHJ1ZS5cbiAgICogTm90IHJlY29tbWVuZGVkIGlmIG1vcmUgdGhhbiBvbmUgdGFiIHBhbmVsIHBlciBwYWdlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBmYWxzZSxcblxuICAvKipcbiAgICogQWxsb3dzIGtleWJvYXJkIGlucHV0IHRvICd3cmFwJyBhcm91bmQgdGhlIHRhYiBsaW5rcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgd3JhcE9uS2V5czogdHJ1ZSxcblxuICAvKipcbiAgICogQWxsb3dzIHRoZSB0YWIgY29udGVudCBwYW5lcyB0byBtYXRjaCBoZWlnaHRzIGlmIHNldCB0byB0cnVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbWF0Y2hIZWlnaHQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgYWN0aXZlIHRhYnMgdG8gY29sbGFwc2Ugd2hlbiBjbGlja2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWN0aXZlQ29sbGFwc2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGBsaWAncyBpbiB0YWIgbGluayBsaXN0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICd0YWJzLXRpdGxlJ1xuICAgKi9cbiAgbGlua0NsYXNzOiAndGFicy10aXRsZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGFjdGl2ZSBgbGlgIGluIHRhYiBsaW5rIGxpc3QuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLWFjdGl2ZSdcbiAgICovXG4gIGxpbmtBY3RpdmVDbGFzczogJ2lzLWFjdGl2ZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGNvbnRlbnQgY29udGFpbmVycy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAndGFicy1wYW5lbCdcbiAgICovXG4gIHBhbmVsQ2xhc3M6ICd0YWJzLXBhbmVsJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGNvbnRlbnQgY29udGFpbmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdpcy1hY3RpdmUnXG4gICAqL1xuICBwYW5lbEFjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJ1xufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5OCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7UGx1Z2luOiB3aW5kb3cuRm91bmRhdGlvbi5QbHVnaW59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdG9nZ2xlcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7XG5cblxuXG5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fY29yZV9fW1wiRm91bmRhdGlvblwiXS5wbHVnaW4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3RvZ2dsZXJfX1tcImFcIiAvKiBUb2dnbGVyICovXSwgJ1RvZ2dsZXInKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge01vdGlvbjogd2luZG93LkZvdW5kYXRpb24uTW90aW9uLCBNb3ZlOiB3aW5kb3cuRm91bmRhdGlvbi5Nb3ZlfTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDYyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVG9nZ2xlcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19mb3VuZGF0aW9uX3V0aWxfdHJpZ2dlcnNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuLyoqXG4gKiBUb2dnbGVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi50b2dnbGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbnZhciBUb2dnbGVyID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFRvZ2dsZXIsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIFRvZ2dsZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvZ2dsZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUb2dnbGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9nZ2xlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRvZ2dsZXIsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVG9nZ2xlci5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBUb2dnbGVyXG4gICAgICogQGZpcmVzIFRvZ2dsZXIjaW5pdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdC5hLmV4dGVuZCh7fSwgVG9nZ2xlci5kZWZhdWx0cywgZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnJztcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1RvZ2dsZXInOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgLy8gVHJpZ2dlcnMgaW5pdCBpcyBpZGVtcG90ZW50LCBqdXN0IG5lZWQgdG8gbWFrZSBzdXJlIGl0IGlzIGluaXRpYWxpemVkXG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2ZvdW5kYXRpb25fdXRpbF90cmlnZ2Vyc19fW1wiYVwiIC8qIFRyaWdnZXJzICovXS5pbml0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEpO1xuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgVG9nZ2xlciBwbHVnaW4gYnkgcGFyc2luZyB0aGUgdG9nZ2xlIGNsYXNzIGZyb20gZGF0YS10b2dnbGVyLCBvciBhbmltYXRpb24gY2xhc3NlcyBmcm9tIGRhdGEtYW5pbWF0ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgdmFyIGlucHV0O1xuICAgICAgLy8gUGFyc2UgYW5pbWF0aW9uIGNsYXNzZXMgaWYgdGhleSB3ZXJlIHNldFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgIGlucHV0ID0gdGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoJyAnKTtcblxuICAgICAgICB0aGlzLmFuaW1hdGlvbkluID0gaW5wdXRbMF07XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uT3V0ID0gaW5wdXRbMV0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIE90aGVyd2lzZSwgcGFyc2UgdG9nZ2xlIGNsYXNzXG4gICAgICBlbHNlIHtcbiAgICAgICAgICBpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgndG9nZ2xlcicpO1xuICAgICAgICAgIC8vIEFsbG93IGZvciBhIC4gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgICAgICAgdGhpcy5jbGFzc05hbWUgPSBpbnB1dFswXSA9PT0gJy4nID8gaW5wdXQuc2xpY2UoMSkgOiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAvLyBBZGQgQVJJQSBhdHRyaWJ1dGVzIHRvIHRyaWdnZXJzXG4gICAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkO1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtb3Blbj1cIicgKyBpZCArICdcIl0sIFtkYXRhLWNsb3NlPVwiJyArIGlkICsgJ1wiXSwgW2RhdGEtdG9nZ2xlPVwiJyArIGlkICsgJ1wiXScpLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG4gICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGhpZGRlbiwgYWRkIGFyaWEtaGlkZGVuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykgPyBmYWxzZSA6IHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIHRvZ2dsZSB0cmlnZ2VyLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3RvZ2dsZS56Zi50cmlnZ2VyJykub24oJ3RvZ2dsZS56Zi50cmlnZ2VyJywgdGhpcy50b2dnbGUuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgdGFyZ2V0IGNsYXNzIG9uIHRoZSB0YXJnZXQgZWxlbWVudC4gQW4gZXZlbnQgaXMgZmlyZWQgZnJvbSB0aGUgb3JpZ2luYWwgdHJpZ2dlciBkZXBlbmRpbmcgb24gaWYgdGhlIHJlc3VsdGFudCBzdGF0ZSB3YXMgXCJvblwiIG9yIFwib2ZmXCIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIFRvZ2dsZXIjb25cbiAgICAgKiBAZmlyZXMgVG9nZ2xlciNvZmZcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9nZ2xlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgdGhpc1t0aGlzLm9wdGlvbnMuYW5pbWF0ZSA/ICdfdG9nZ2xlQW5pbWF0ZScgOiAnX3RvZ2dsZUNsYXNzJ10oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfdG9nZ2xlQ2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlQ2xhc3MoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuY2xhc3NOYW1lKTtcblxuICAgICAgdmFyIGlzT24gPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMuY2xhc3NOYW1lKTtcbiAgICAgIGlmIChpc09uKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaGFzIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBkb2VzIG5vdCBoYXZlIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb2ZmXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VwZGF0ZUFSSUEoaXNPbik7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3RvZ2dsZUFuaW1hdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlQW5pbWF0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJNb3Rpb25cIl0uYW5pbWF0ZUluKHRoaXMuJGVsZW1lbnQsIHRoaXMuYW5pbWF0aW9uSW4sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5fdXBkYXRlQVJJQSh0cnVlKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ29uLnpmLnRvZ2dsZXInKTtcbiAgICAgICAgICB0aGlzLmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJNb3Rpb25cIl0uYW5pbWF0ZU91dCh0aGlzLiRlbGVtZW50LCB0aGlzLmFuaW1hdGlvbk91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLl91cGRhdGVBUklBKGZhbHNlKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgICAgICAgdGhpcy5maW5kKCdbZGF0YS1tdXRhdGVdJykudHJpZ2dlcignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlQVJJQScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVBUklBKGlzT24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT24gPyB0cnVlIDogZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBpbnN0YW5jZSBvZiBUb2dnbGVyIG9uIHRoZSBlbGVtZW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50b2dnbGVyJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRvZ2dsZXI7XG59KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl9wbHVnaW5fX1tcIlBsdWdpblwiXSk7XG5cblRvZ2dsZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUZWxscyB0aGUgcGx1Z2luIGlmIHRoZSBlbGVtZW50IHNob3VsZCBhbmltYXRlZCB3aGVuIHRvZ2dsZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbmltYXRlOiBmYWxzZVxufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVHJpZ2dlcnM7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fXyk7XG5cblxuXG5cblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcmVmaXhlcyA9IFsnV2ViS2l0JywgJ01veicsICdPJywgJ01zJywgJyddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgcmV0dXJuIHdpbmRvd1twcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJ107XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0oKTtcblxudmFyIHRyaWdnZXJzID0gZnVuY3Rpb24gKGVsLCB0eXBlKSB7XG4gIGVsLmRhdGEodHlwZSkuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgaWQpW3R5cGUgPT09ICdjbG9zZScgPyAndHJpZ2dlcicgOiAndHJpZ2dlckhhbmRsZXInXSh0eXBlICsgJy56Zi50cmlnZ2VyJywgW2VsXSk7XG4gIH0pO1xufTtcblxudmFyIFRyaWdnZXJzID0ge1xuICBMaXN0ZW5lcnM6IHtcbiAgICBCYXNpYzoge30sXG4gICAgR2xvYmFsOiB7fVxuICB9LFxuICBJbml0aWFsaXplcnM6IHt9XG59O1xuXG5UcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMgPSB7XG4gIG9wZW5MaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHRyaWdnZXJzKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksICdvcGVuJyk7XG4gIH0sXG4gIGNsb3NlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICB0cmlnZ2VycyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCAnY2xvc2UnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCdjbG9zZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9LFxuICB0b2dnbGVMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgndG9nZ2xlJyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICB0cmlnZ2VycyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCAndG9nZ2xlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlcigndG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICB9XG4gIH0sXG4gIGNsb3NlYWJsZUxpc3RlbmVyOiBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgnY2xvc2FibGUnKTtcblxuICAgIGlmIChhbmltYXRpb24gIT09ICcnKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9tb3Rpb25fX1tcIk1vdGlvblwiXS5hbmltYXRlT3V0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyksIGFuaW1hdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZmFkZU91dCgpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlRm9jdXNMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpZCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykuZGF0YSgndG9nZ2xlLWZvY3VzJyk7XG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnIycgKyBpZCkudHJpZ2dlckhhbmRsZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJywgW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyldKTtcbiAgfVxufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1vcGVuXSB3aWxsIHJldmVhbCBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRPcGVuTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdjbGljay56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLm9wZW5MaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLW9wZW5dJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLm9wZW5MaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NlXSB3aWxsIGNsb3NlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZUxpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2VdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLmNsb3NlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGVdIHdpbGwgdG9nZ2xlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zYWJsZV0gd2lsbCByZXNwb25kIHRvIGNsb3NlLnpmLnRyaWdnZXIgZXZlbnRzLlxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlYWJsZUxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xvc2UuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZWFibGVMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbG9zZS56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlYWJsZV0sIFtkYXRhLWNsb3NhYmxlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZWFibGVMaXN0ZW5lcik7XG59O1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLXRvZ2dsZS1mb2N1c10gd2lsbCByZXNwb25kIHRvIGNvbWluZyBpbiBhbmQgb3V0IG9mIGZvY3VzXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlRm9jdXNMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUZvY3VzTGlzdGVuZXIpO1xuICAkZWxlbS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVGb2N1c0xpc3RlbmVyKTtcbn07XG5cbi8vIE1vcmUgR2xvYmFsL2NvbXBsZXggbGlzdGVuZXJzIGFuZCB0cmlnZ2Vyc1xuVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbCA9IHtcbiAgcmVzaXplTGlzdGVuZXI6IGZ1bmN0aW9uICgkbm9kZXMpIHtcbiAgICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIC8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSByZXNpemUgZXZlbnRcbiAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInJlc2l6ZVwiKTtcbiAgfSxcbiAgc2Nyb2xsTGlzdGVuZXI6IGZ1bmN0aW9uICgkbm9kZXMpIHtcbiAgICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIC8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBzY3JvbGwgZXZlbnRcbiAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInNjcm9sbFwiKTtcbiAgfSxcbiAgY2xvc2VNZUxpc3RlbmVyOiBmdW5jdGlvbiAoZSwgcGx1Z2luSWQpIHtcbiAgICB2YXIgcGx1Z2luID0gZS5uYW1lc3BhY2Uuc3BsaXQoJy4nKVswXTtcbiAgICB2YXIgcGx1Z2lucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLScgKyBwbHVnaW4gKyAnXScpLm5vdCgnW2RhdGEteWV0aS1ib3g9XCInICsgcGx1Z2luSWQgKyAnXCJdJyk7XG5cbiAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKTtcbiAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBHbG9iYWwsIHBhcnNlcyB3aG9sZSBkb2N1bWVudC5cbn07VHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlbWVMaXN0ZW5lciA9IGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gIHZhciB5ZXRpQm94ZXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZiAocGx1Z2luTmFtZSkge1xuICAgIGlmICh0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBsdWdOYW1lcy5wdXNoKHBsdWdpbk5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z05hbWVzLmNvbmNhdChwbHVnaW5OYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZiAoeWV0aUJveGVzLmxlbmd0aCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSBwbHVnTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gJ2Nsb3NlbWUuemYuJyArIG5hbWU7XG4gICAgfSkuam9pbignICcpO1xuXG4gICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZihsaXN0ZW5lcnMpLm9uKGxpc3RlbmVycywgVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbC5jbG9zZU1lTGlzdGVuZXIpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCB0cmlnZ2VyLCBsaXN0ZW5lcikge1xuICB2YXIgdGltZXIgPSB2b2lkIDAsXG4gICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcbiAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh3aW5kb3cpLm9mZih0cmlnZ2VyKS5vbih0cmlnZ2VyLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmICh0aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB9XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIGRlYm91bmNlIHx8IDEwKTsgLy9kZWZhdWx0IHRpbWUgdG8gZW1pdCBzY3JvbGwgZXZlbnRcbiAgfSk7XG59XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIChkZWJvdW5jZSkge1xuICB2YXIgJG5vZGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtcmVzaXplXScpO1xuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsICdyZXNpemUuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwucmVzaXplTGlzdGVuZXIsICRub2Rlcyk7XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTY3JvbGxMaXN0ZW5lciA9IGZ1bmN0aW9uIChkZWJvdW5jZSkge1xuICB2YXIgJG5vZGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEtc2Nyb2xsXScpO1xuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsICdzY3JvbGwuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwuc2Nyb2xsTGlzdGVuZXIsICRub2Rlcyk7XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRNdXRhdGlvbkV2ZW50c0xpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgJG5vZGVzID0gJGVsZW0uZmluZCgnW2RhdGEtcmVzaXplXSwgW2RhdGEtc2Nyb2xsXSwgW2RhdGEtbXV0YXRlXScpO1xuXG4gIC8vZWxlbWVudCBjYWxsYmFja1xuICB2YXIgbGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiA9IGZ1bmN0aW9uIChtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgdmFyICR0YXJnZXQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udGFyZ2V0KTtcblxuICAgIC8vdHJpZ2dlciB0aGUgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHR5cGVcbiAgICBzd2l0Y2ggKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udHlwZSkge1xuICAgICAgY2FzZSBcImF0dHJpYnV0ZXNcIjpcbiAgICAgICAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInNjcm9sbFwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG4gICAgICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LCB3aW5kb3cucGFnZVlPZmZzZXRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikgPT09IFwicmVzaXplXCIgJiYgbXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtZXZlbnRzXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLCBcIm11dGF0ZVwiKTtcbiAgICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImNoaWxkTGlzdFwiOlxuICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLCBcIm11dGF0ZVwiKTtcbiAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvL25vdGhpbmdcbiAgICB9XG4gIH07XG5cbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICAvL2ZvciBlYWNoIGVsZW1lbnQgdGhhdCBuZWVkcyB0byBsaXN0ZW4gZm9yIHJlc2l6aW5nLCBzY3JvbGxpbmcsIG9yIG11dGF0aW9uIGFkZCBhIHNpbmdsZSBvYnNlcnZlclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9ICRub2Rlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIHZhciBlbGVtZW50T2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uKTtcbiAgICAgIGVsZW1lbnRPYnNlcnZlci5vYnNlcnZlKCRub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6IFtcImRhdGEtZXZlbnRzXCIsIFwic3R5bGVcIl0gfSk7XG4gICAgfVxuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgJGRvY3VtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudCk7XG5cbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE9wZW5MaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlYWJsZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVGb2N1c0xpc3RlbmVyKCRkb2N1bWVudCk7XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgJGRvY3VtZW50ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRNdXRhdGlvbkV2ZW50c0xpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lcigpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2Nyb2xsTGlzdGVuZXIoKTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlbWVMaXN0ZW5lcigpO1xufTtcblxuVHJpZ2dlcnMuaW5pdCA9IGZ1bmN0aW9uICgkLCBGb3VuZGF0aW9uKSB7XG4gIGlmICh0eXBlb2YgJC50cmlnZ2Vyc0luaXRpYWxpemVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciAkZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMoKTtcbiAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzKCk7XG4gICAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICQudHJpZ2dlcnNJbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBpZiAoRm91bmRhdGlvbikge1xuICAgIEZvdW5kYXRpb24uVHJpZ2dlcnMgPSBUcmlnZ2VycztcbiAgICAvLyBMZWdhY3kgaW5jbHVkZWQgdG8gYmUgYmFja3dhcmRzIGNvbXBhdGlibGUgZm9yIG5vdy5cbiAgICBGb3VuZGF0aW9uLklIZWFyWW91ID0gVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycztcbiAgfVxufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5ODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5OSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0galF1ZXJ5O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Rm91bmRhdGlvbjogd2luZG93LkZvdW5kYXRpb259O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQb3NpdGlvbmFibGU7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2JveF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2JveF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcGx1Z2luX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9wbHVnaW5fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl9wbHVnaW5fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfY29yZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18pO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG52YXIgUE9TSVRJT05TID0gWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXTtcbnZhciBWRVJUSUNBTF9BTElHTk1FTlRTID0gWyd0b3AnLCAnYm90dG9tJywgJ2NlbnRlciddO1xudmFyIEhPUklaT05UQUxfQUxJR05NRU5UUyA9IFsnbGVmdCcsICdyaWdodCcsICdjZW50ZXInXTtcblxudmFyIEFMSUdOTUVOVFMgPSB7XG4gICdsZWZ0JzogVkVSVElDQUxfQUxJR05NRU5UUyxcbiAgJ3JpZ2h0JzogVkVSVElDQUxfQUxJR05NRU5UUyxcbiAgJ3RvcCc6IEhPUklaT05UQUxfQUxJR05NRU5UUyxcbiAgJ2JvdHRvbSc6IEhPUklaT05UQUxfQUxJR05NRU5UU1xufTtcblxuZnVuY3Rpb24gbmV4dEl0ZW0oaXRlbSwgYXJyYXkpIHtcbiAgdmFyIGN1cnJlbnRJZHggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuICBpZiAoY3VycmVudElkeCA9PT0gYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBhcnJheVswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXJyYXlbY3VycmVudElkeCArIDFdO1xuICB9XG59XG5cbnZhciBQb3NpdGlvbmFibGUgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoUG9zaXRpb25hYmxlLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBQb3NpdGlvbmFibGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvc2l0aW9uYWJsZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBvc2l0aW9uYWJsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBvc2l0aW9uYWJsZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvc2l0aW9uYWJsZSwgW3tcbiAgICBrZXk6ICdfaW5pdCcsXG5cbiAgICAvKipcbiAgICAgKiBBYnN0cmFjdCBjbGFzcyBlbmNhcHN1bGF0aW5nIHRoZSB0ZXRoZXItbGlrZSBleHBsaWNpdCBwb3NpdGlvbmluZyBsb2dpY1xuICAgICAqIGluY2x1ZGluZyByZXBvc2l0aW9uaW5nIGJhc2VkIG9uIG92ZXJsYXAuXG4gICAgICogRXhwZWN0cyBjbGFzc2VzIHRvIGRlZmluZSBkZWZhdWx0cyBmb3Igdk9mZnNldCwgaE9mZnNldCwgcG9zaXRpb24sXG4gICAgICogYWxpZ25tZW50LCBhbGxvd092ZXJsYXAsIGFuZCBhbGxvd0JvdHRvbU92ZXJsYXAuIFRoZXkgY2FuIGRvIHRoaXMgYnlcbiAgICAgKiBleHRlbmRpbmcgdGhlIGRlZmF1bHRzLCBvciAoZm9yIG5vdyByZWNvbW1lbmRlZCBkdWUgdG8gdGhlIHdheSBkb2NzIGFyZVxuICAgICAqIGdlbmVyYXRlZCkgYnkgZXhwbGljaXRseSBkZWNsYXJpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqKi9cblxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHRoaXMudHJpZWRQb3NpdGlvbnMgPSB7fTtcbiAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdhdXRvJyA/IHRoaXMuX2dldERlZmF1bHRQb3NpdGlvbigpIDogdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgdGhpcy5hbGlnbm1lbnQgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnYXV0bycgPyB0aGlzLl9nZXREZWZhdWx0QWxpZ25tZW50KCkgOiB0aGlzLm9wdGlvbnMuYWxpZ25tZW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdFBvc2l0aW9uKCkge1xuICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0QWxpZ25tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERlZmF1bHRBbGlnbm1lbnQoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMucG9zaXRpb24pIHtcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcInJ0bFwiXSkoKSA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdHMgdGhlIHBvc2l0aW9uYWJsZSBwb3NzaWJsZSBwb3NpdGlvbnMgYnkgaXRlcmF0aW5nIHRocm91Z2ggYWxpZ25tZW50c1xuICAgICAqIGFuZCBwb3NpdGlvbnMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3JlcG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVwb3NpdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9hbGlnbm1lbnRzRXhoYXVzdGVkKHRoaXMucG9zaXRpb24pKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXh0SXRlbSh0aGlzLnBvc2l0aW9uLCBQT1NJVElPTlMpO1xuICAgICAgICB0aGlzLmFsaWdubWVudCA9IEFMSUdOTUVOVFNbdGhpcy5wb3NpdGlvbl1bMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yZWFsaWduKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRqdXN0cyB0aGUgZHJvcGRvd24gcGFuZSBwb3NzaWJsZSBwb3NpdGlvbnMgYnkgaXRlcmF0aW5nIHRocm91Z2ggYWxpZ25tZW50c1xuICAgICAqIG9uIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZWFsaWduJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlYWxpZ24oKSB7XG4gICAgICB0aGlzLl9hZGRUcmllZFBvc2l0aW9uKHRoaXMucG9zaXRpb24sIHRoaXMuYWxpZ25tZW50KTtcbiAgICAgIHRoaXMuYWxpZ25tZW50ID0gbmV4dEl0ZW0odGhpcy5hbGlnbm1lbnQsIEFMSUdOTUVOVFNbdGhpcy5wb3NpdGlvbl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19hZGRUcmllZFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZFRyaWVkUG9zaXRpb24ocG9zaXRpb24sIGFsaWdubWVudCkge1xuICAgICAgdGhpcy50cmllZFBvc2l0aW9uc1twb3NpdGlvbl0gPSB0aGlzLnRyaWVkUG9zaXRpb25zW3Bvc2l0aW9uXSB8fCBbXTtcbiAgICAgIHRoaXMudHJpZWRQb3NpdGlvbnNbcG9zaXRpb25dLnB1c2goYWxpZ25tZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcG9zaXRpb25zRXhoYXVzdGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Bvc2l0aW9uc0V4aGF1c3RlZCgpIHtcbiAgICAgIHZhciBpc0V4aGF1c3RlZCA9IHRydWU7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFBPU0lUSU9OUy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpc0V4aGF1c3RlZCA9IGlzRXhoYXVzdGVkICYmIHRoaXMuX2FsaWdubWVudHNFeGhhdXN0ZWQoUE9TSVRJT05TW2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0V4aGF1c3RlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfYWxpZ25tZW50c0V4aGF1c3RlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hbGlnbm1lbnRzRXhoYXVzdGVkKHBvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmllZFBvc2l0aW9uc1twb3NpdGlvbl0gJiYgdGhpcy50cmllZFBvc2l0aW9uc1twb3NpdGlvbl0ubGVuZ3RoID09IEFMSUdOTUVOVFNbcG9zaXRpb25dLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBXaGVuIHdlJ3JlIHRyeWluZyB0byBjZW50ZXIsIHdlIGRvbid0IHdhbnQgdG8gYXBwbHkgb2Zmc2V0IHRoYXQncyBnb2luZyB0b1xuICAgIC8vIHRha2UgdXMganVzdCBvZmYgY2VudGVyLCBzbyB3cmFwIGFyb3VuZCB0byByZXR1cm4gMCBmb3IgdGhlIGFwcHJvcHJpYXRlXG4gICAgLy8gb2Zmc2V0IGluIHRob3NlIGFsaWdubWVudHMuICBUT0RPOiBGaWd1cmUgb3V0IGlmIHdlIHdhbnQgdG8gbWFrZSB0aGlzXG4gICAgLy8gY29uZmlndXJhYmxlIGJlaGF2aW9yLi4uIGl0IGZlZWxzIG1vcmUgaW50dWl0aXZlLCBlc3BlY2lhbGx5IGZvciB0b29sdGlwcywgYnV0XG4gICAgLy8gaXQncyBwb3NzaWJsZSBzb21lb25lIG1pZ2h0IGFjdHVhbGx5IHdhbnQgdG8gc3RhcnQgZnJvbSBjZW50ZXIgYW5kIHRoZW4gbnVkZ2VcbiAgICAvLyBzbGlnaHRseSBvZmYuXG5cbiAgfSwge1xuICAgIGtleTogJ19nZXRWT2Zmc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFZPZmZzZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZPZmZzZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldEhPZmZzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SE9mZnNldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaE9mZnNldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UG9zaXRpb24oJGFuY2hvciwgJGVsZW1lbnQsICRwYXJlbnQpIHtcbiAgICAgIGlmICgkYW5jaG9yLmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgJGVsZURpbXMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX1tcIkJveFwiXS5HZXREaW1lbnNpb25zKCRlbGVtZW50KSxcbiAgICAgICAgICAkYW5jaG9yRGltcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2JveF9fW1wiQm94XCJdLkdldERpbWVuc2lvbnMoJGFuY2hvcik7XG5cbiAgICAgICRlbGVtZW50Lm9mZnNldChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX1tcIkJveFwiXS5HZXRFeHBsaWNpdE9mZnNldHMoJGVsZW1lbnQsICRhbmNob3IsIHRoaXMucG9zaXRpb24sIHRoaXMuYWxpZ25tZW50LCB0aGlzLl9nZXRWT2Zmc2V0KCksIHRoaXMuX2dldEhPZmZzZXQoKSkpO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd092ZXJsYXApIHtcbiAgICAgICAgdmFyIG92ZXJsYXBzID0ge307XG4gICAgICAgIHZhciBtaW5PdmVybGFwID0gMTAwMDAwMDAwO1xuICAgICAgICAvLyBkZWZhdWx0IGNvb3JkaW5hdGVzIHRvIGhvdyB3ZSBzdGFydCwgaW4gY2FzZSB3ZSBjYW4ndCBmaWd1cmUgb3V0IGJldHRlclxuICAgICAgICB2YXIgbWluQ29vcmRpbmF0ZXMgPSB7IHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLCBhbGlnbm1lbnQ6IHRoaXMuYWxpZ25tZW50IH07XG4gICAgICAgIHdoaWxlICghdGhpcy5fcG9zaXRpb25zRXhoYXVzdGVkKCkpIHtcbiAgICAgICAgICB2YXIgb3ZlcmxhcCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl91dGlsX2JveF9fW1wiQm94XCJdLk92ZXJsYXBBcmVhKCRlbGVtZW50LCAkcGFyZW50LCBmYWxzZSwgZmFsc2UsIHRoaXMub3B0aW9ucy5hbGxvd0JvdHRvbU92ZXJsYXApO1xuICAgICAgICAgIGlmIChvdmVybGFwID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG92ZXJsYXAgPCBtaW5PdmVybGFwKSB7XG4gICAgICAgICAgICBtaW5PdmVybGFwID0gb3ZlcmxhcDtcbiAgICAgICAgICAgIG1pbkNvb3JkaW5hdGVzID0geyBwb3NpdGlvbjogdGhpcy5wb3NpdGlvbiwgYWxpZ25tZW50OiB0aGlzLmFsaWdubWVudCB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX3JlcG9zaXRpb24oKTtcblxuICAgICAgICAgICRlbGVtZW50Lm9mZnNldChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2ZvdW5kYXRpb25fdXRpbF9ib3hfX1tcIkJveFwiXS5HZXRFeHBsaWNpdE9mZnNldHMoJGVsZW1lbnQsICRhbmNob3IsIHRoaXMucG9zaXRpb24sIHRoaXMuYWxpZ25tZW50LCB0aGlzLl9nZXRWT2Zmc2V0KCksIHRoaXMuX2dldEhPZmZzZXQoKSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGdldCB0aHJvdWdoIHRoZSBlbnRpcmUgbG9vcCwgdGhlcmUgd2FzIG5vIG5vbi1vdmVybGFwcGluZ1xuICAgICAgICAvLyBwb3NpdGlvbiBhdmFpbGFibGUuIFBpY2sgdGhlIHZlcnNpb24gd2l0aCBsZWFzdCBvdmVybGFwLlxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gbWluQ29vcmRpbmF0ZXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYWxpZ25tZW50ID0gbWluQ29vcmRpbmF0ZXMuYWxpZ25tZW50O1xuICAgICAgICAkZWxlbWVudC5vZmZzZXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX3V0aWxfYm94X19bXCJCb3hcIl0uR2V0RXhwbGljaXRPZmZzZXRzKCRlbGVtZW50LCAkYW5jaG9yLCB0aGlzLnBvc2l0aW9uLCB0aGlzLmFsaWdubWVudCwgdGhpcy5fZ2V0Vk9mZnNldCgpLCB0aGlzLl9nZXRIT2Zmc2V0KCkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9zaXRpb25hYmxlO1xufShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fcGx1Z2luX19bXCJQbHVnaW5cIl0pO1xuXG5Qb3NpdGlvbmFibGUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3NpdGlvbiBvZiBwb3NpdGlvbmFibGUgcmVsYXRpdmUgdG8gYW5jaG9yLiBDYW4gYmUgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBvciBhdXRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgcG9zaXRpb246ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsaWdubWVudCBvZiBwb3NpdGlvbmFibGUgcmVsYXRpdmUgdG8gYW5jaG9yLiBDYW4gYmUgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBjZW50ZXIsIG9yIGF1dG8uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICBhbGlnbm1lbnQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsbG93IG92ZXJsYXAgb2YgY29udGFpbmVyL3dpbmRvdy4gSWYgZmFsc2UsIGRyb3Bkb3duIHBvc2l0aW9uYWJsZSBmaXJzdFxuICAgKiB0cnkgdG8gcG9zaXRpb24gYXMgZGVmaW5lZCBieSBkYXRhLXBvc2l0aW9uIGFuZCBkYXRhLWFsaWdubWVudCwgYnV0XG4gICAqIHJlcG9zaXRpb24gaWYgaXQgd291bGQgY2F1c2UgYW4gb3ZlcmZsb3cuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbGxvd092ZXJsYXA6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgb3ZlcmxhcCBvZiBvbmx5IHRoZSBib3R0b20gb2YgdGhlIGNvbnRhaW5lci4gVGhpcyBpcyB0aGUgbW9zdCBjb21tb25cbiAgICogYmVoYXZpb3IgZm9yIGRyb3Bkb3ducywgYWxsb3dpbmcgdGhlIGRyb3Bkb3duIHRvIGV4dGVuZCB0aGUgYm90dG9tIG9mIHRoZVxuICAgKiBzY3JlZW4gYnV0IG5vdCBvdGhlcndpc2UgaW5mbHVlbmNlIG9yIGJyZWFrIG91dCBvZiB0aGUgY29udGFpbmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhbGxvd0JvdHRvbU92ZXJsYXA6IHRydWUsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRoZSBwb3NpdGlvbmFibGUgc2hvdWxkIGJlIHNlcGFyYXRlZCB2ZXJ0aWNhbGx5IGZyb20gYW5jaG9yXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdk9mZnNldDogMCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdGhlIHBvc2l0aW9uYWJsZSBzaG91bGQgYmUgc2VwYXJhdGVkIGhvcml6b250YWxseSBmcm9tIGFuY2hvclxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGhPZmZzZXQ6IDBcbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7UGx1Z2luOiB3aW5kb3cuRm91bmRhdGlvbi5QbHVnaW59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7cnRsOiB3aW5kb3cuRm91bmRhdGlvbi5ydGwsIEdldFlvRGlnaXRzOiB3aW5kb3cuRm91bmRhdGlvbi5HZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZDogd2luZG93LkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZH07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19mb3VuZGF0aW9uX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl90b29sdGlwX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzKTtcblxuXG5cbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fZm91bmRhdGlvbl9jb3JlX19bXCJGb3VuZGF0aW9uXCJdLnBsdWdpbihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdG9vbHRpcF9fW1wiYVwiIC8qIFRvb2x0aXAgKi9dLCAnVG9vbHRpcCcpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TW90aW9uOiB3aW5kb3cuRm91bmRhdGlvbi5Nb3Rpb24sIE1vdmU6IHdpbmRvdy5Gb3VuZGF0aW9uLk1vdmV9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7TWVkaWFRdWVyeTogd2luZG93LkZvdW5kYXRpb24uTWVkaWFRdWVyeX07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA2Mzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRvb2x0aXA7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2ZvdW5kYXRpb25fdXRpbF9jb3JlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19mb3VuZGF0aW9uX3V0aWxfbWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fZm91bmRhdGlvbl9wb3NpdGlvbmFibGVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogVG9vbHRpcCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udG9vbHRpcFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbnZhciBUb29sdGlwID0gZnVuY3Rpb24gKF9Qb3NpdGlvbmFibGUpIHtcbiAgX2luaGVyaXRzKFRvb2x0aXAsIF9Qb3NpdGlvbmFibGUpO1xuXG4gIGZ1bmN0aW9uIFRvb2x0aXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvb2x0aXApO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUb29sdGlwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9vbHRpcCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBUb29sdGlwLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFRvb2x0aXBcbiAgICAgKiBAZmlyZXMgVG9vbHRpcCNpbml0XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCBhIHRvb2x0aXAgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvYmplY3QgdG8gZXh0ZW5kIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0LmEuZXh0ZW5kKHt9LCBUb29sdGlwLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdUb29sdGlwJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuaXNDbGljayA9IGZhbHNlO1xuXG4gICAgICAvLyBUcmlnZ2VycyBpbml0IGlzIGlkZW1wb3RlbnQsIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgaXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fZm91bmRhdGlvbl91dGlsX3RyaWdnZXJzX19bXCJhXCIgLyogVHJpZ2dlcnMgKi9dLmluaXQoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQuYSk7XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgdG9vbHRpcCBieSBzZXR0aW5nIHRoZSBjcmVhdGluZyB0aGUgdGlwIGVsZW1lbnQsIGFkZGluZyBpdCdzIHRleHQsIHNldHRpbmcgcHJpdmF0ZSB2YXJpYWJsZXMgYW5kIHNldHRpbmcgYXR0cmlidXRlcyBvbiB0aGUgYW5jaG9yLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLl9pbml0KCk7XG4gICAgICB2YXIgZWxlbUlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JykgfHwgX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX2NvcmVfX1tcIkdldFlvRGlnaXRzXCJdKSg2LCAndG9vbHRpcCcpO1xuXG4gICAgICB0aGlzLm9wdGlvbnMudGlwVGV4dCA9IHRoaXMub3B0aW9ucy50aXBUZXh0IHx8IHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnKTtcbiAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUgPyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSkgOiB0aGlzLl9idWlsZFRlbXBsYXRlKGVsZW1JZCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dIdG1sKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGUuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSkuaHRtbCh0aGlzLm9wdGlvbnMudGlwVGV4dCkuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS50ZXh0KHRoaXMub3B0aW9ucy50aXBUZXh0KS5oaWRlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICd0aXRsZSc6ICcnLFxuICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGVsZW1JZCxcbiAgICAgICAgJ2RhdGEteWV0aS1ib3gnOiBlbGVtSWQsXG4gICAgICAgICdkYXRhLXRvZ2dsZSc6IGVsZW1JZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogZWxlbUlkXG4gICAgICB9KS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudHJpZ2dlckNsYXNzKTtcblxuICAgICAgX2dldChUb29sdGlwLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRvb2x0aXAucHJvdG90eXBlKSwgJ19pbml0JywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdFBvc2l0aW9uKCkge1xuICAgICAgLy8gaGFuZGxlIGxlZ2FjeSBjbGFzc25hbWVzXG4gICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLiRlbGVtZW50WzBdLmNsYXNzTmFtZS5tYXRjaCgvXFxiKHRvcHxsZWZ0fHJpZ2h0fGJvdHRvbSlcXGIvZyk7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPyBwb3NpdGlvblswXSA6ICd0b3AnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0QWxpZ25tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERlZmF1bHRBbGlnbm1lbnQoKSB7XG4gICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldEhPZmZzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SE9mZnNldCgpIHtcbiAgICAgIGlmICh0aGlzLnBvc2l0aW9uID09PSAnbGVmdCcgfHwgdGhpcy5wb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhPZmZzZXQgKyB0aGlzLm9wdGlvbnMudG9vbHRpcFdpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5oT2Zmc2V0O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXRWT2Zmc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFZPZmZzZXQoKSB7XG4gICAgICBpZiAodGhpcy5wb3NpdGlvbiA9PT0gJ3RvcCcgfHwgdGhpcy5wb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52T2Zmc2V0ICsgdGhpcy5vcHRpb25zLnRvb2x0aXBIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYnVpbGRzIHRoZSB0b29sdGlwIGVsZW1lbnQsIGFkZHMgYXR0cmlidXRlcywgYW5kIHJldHVybnMgdGhlIHRlbXBsYXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19idWlsZFRlbXBsYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2J1aWxkVGVtcGxhdGUoaWQpIHtcbiAgICAgIHZhciB0ZW1wbGF0ZUNsYXNzZXMgPSAodGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyArICcgJyArIHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzICsgJyAnICsgdGhpcy5vcHRpb25zLnRlbXBsYXRlQ2xhc3NlcykudHJpbSgpO1xuICAgICAgdmFyICR0ZW1wbGF0ZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3ModGVtcGxhdGVDbGFzc2VzKS5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndG9vbHRpcCcsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IGZhbHNlLFxuICAgICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgICAnaWQnOiBpZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gJHRlbXBsYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldHMgdGhlIHBvc2l0aW9uIGNsYXNzIG9mIGFuIGVsZW1lbnQgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiB1bnRpbCB0aGVyZSBhcmUgbm8gbW9yZSBwb3NzaWJsZSBwb3NpdGlvbnMgdG8gYXR0ZW1wdCwgb3IgdGhlIHRvb2x0aXAgZWxlbWVudCBpcyBubyBsb25nZXIgY29sbGlkaW5nLlxuICAgICAqIGlmIHRoZSB0b29sdGlwIGlzIGxhcmdlciB0aGFuIHRoZSBzY3JlZW4gd2lkdGgsIGRlZmF1bHQgdG8gZnVsbCB3aWR0aCAtIGFueSB1c2VyIHNlbGVjdGVkIG1hcmdpblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRQb3NpdGlvbigpIHtcbiAgICAgIF9nZXQoVG9vbHRpcC5wcm90b3R5cGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb29sdGlwLnByb3RvdHlwZSksICdfc2V0UG9zaXRpb24nLCB0aGlzKS5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQsIHRoaXMudGVtcGxhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJldmVhbHMgdGhlIHRvb2x0aXAsIGFuZCBmaXJlcyBhbiBldmVudCB0byBjbG9zZSBhbnkgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgICAqIEBmaXJlcyBUb29sdGlwI2Nsb3NlbWVcbiAgICAgKiBAZmlyZXMgVG9vbHRpcCNzaG93XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93T24gIT09ICdhbGwnICYmICFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2ZvdW5kYXRpb25fdXRpbF9tZWRpYVF1ZXJ5X19bXCJNZWRpYVF1ZXJ5XCJdLmlzKHRoaXMub3B0aW9ucy5zaG93T24pKSB7XG4gICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ1RoZSBzY3JlZW4gaXMgdG9vIHNtYWxsIHRvIGRpc3BsYXkgdGhpcyB0b29sdGlwJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMudGVtcGxhdGUuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpLnNob3coKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKCd0b3AgYm90dG9tIGxlZnQgcmlnaHQnKS5hZGRDbGFzcyh0aGlzLnBvc2l0aW9uKTtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ2FsaWduLXRvcCBhbGlnbi1ib3R0b20gYWxpZ24tbGVmdCBhbGlnbi1yaWdodCBhbGlnbi1jZW50ZXInKS5hZGRDbGFzcygnYWxpZ24tJyArIHRoaXMuYWxpZ25tZW50KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB0byBjbG9zZSBhbGwgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgICAgICogQGV2ZW50IENsb3NlbWUjdG9vbHRpcFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYudG9vbHRpcCcsIHRoaXMudGVtcGxhdGUuYXR0cignaWQnKSk7XG5cbiAgICAgIHRoaXMudGVtcGxhdGUuYXR0cih7XG4gICAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IHRydWUsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIF90aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudGVtcGxhdGUpO1xuICAgICAgdGhpcy50ZW1wbGF0ZS5zdG9wKCkuaGlkZSgpLmNzcygndmlzaWJpbGl0eScsICcnKS5mYWRlSW4odGhpcy5vcHRpb25zLmZhZGVJbkR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vbWF5YmUgZG8gc3R1ZmY/XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgdG9vbHRpcCBpcyBzaG93blxuICAgICAgICogQGV2ZW50IFRvb2x0aXAjc2hvd1xuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Nob3cuemYudG9vbHRpcCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBjdXJyZW50IHRvb2x0aXAsIGFuZCByZXNldHMgdGhlIHBvc2l0aW9uaW5nIGNsYXNzIGlmIGl0IHdhcyBjaGFuZ2VkIGR1ZSB0byBjb2xsaXNpb25cbiAgICAgKiBAZmlyZXMgVG9vbHRpcCNoaWRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2hpZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsIHRoaXMuJGVsZW1lbnQuZGF0YSgneWV0aS1ib3gnKSk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy50ZW1wbGF0ZS5zdG9wKCkuYXR0cih7XG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IGZhbHNlXG4gICAgICB9KS5mYWRlT3V0KHRoaXMub3B0aW9ucy5mYWRlT3V0RHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIGZpcmVzIHdoZW4gdGhlIHRvb2x0aXAgaXMgaGlkZGVuXG4gICAgICAgKiBAZXZlbnQgVG9vbHRpcCNoaWRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaGlkZS56Zi50b29sdGlwJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkcyBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSB0b29sdGlwIGFuZCBpdHMgYW5jaG9yXG4gICAgICogVE9ETyBjb21iaW5lIHNvbWUgb2YgdGhlIGxpc3RlbmVycyBsaWtlIGZvY3VzIGFuZCBtb3VzZWVudGVyLCBldGMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyICR0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG4gICAgICB2YXIgaXNGb2N1cyA9IGZhbHNlO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcblxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtb3VzZWVudGVyLnpmLnRvb2x0aXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmICghX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLnRvb2x0aXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICBpZiAoIWlzRm9jdXMgfHwgX3RoaXMuaXNDbGljayAmJiAhX3RoaXMub3B0aW9ucy5jbGlja09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtb3VzZWRvd24uemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBpZiAoX3RoaXMuaXNDbGljaykge1xuICAgICAgICAgICAgLy9fdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAvLyBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmlzQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKChfdGhpcy5vcHRpb25zLmRpc2FibGVIb3ZlciB8fCAhX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSkgJiYgIV90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgIF90aGlzLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2Vkb3duLnpmLnRvb2x0aXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgX3RoaXMuaXNDbGljayA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlRm9yVG91Y2gpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbigndGFwLnpmLnRvb2x0aXAgdG91Y2hlbmQuemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3RoaXMuaXNBY3RpdmUgPyBfdGhpcy5oaWRlKCkgOiBfdGhpcy5zaG93KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgLy8gJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICAgLy8gJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmhpZGUuYmluZCh0aGlzKVxuICAgICAgICAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuaGlkZS5iaW5kKHRoaXMpXG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignZm9jdXMuemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlzRm9jdXMgPSB0cnVlO1xuICAgICAgICBpZiAoX3RoaXMuaXNDbGljaykge1xuICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBzaG93aW5nIG9wZW4gb24gY2xpY2tzLCB3ZSBuZWVkIHRvIHByZXRlbmQgYSBjbGljay1sYXVuY2hlZCBmb2N1cyBpc24ndFxuICAgICAgICAgIC8vIGEgcmVhbCBmb2N1cywgb3RoZXJ3aXNlIG9uIGhvdmVyIGFuZCBjb21lIGJhY2sgd2UgZ2V0IGJhZCBiZWhhdmlvclxuICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5jbGlja09wZW4pIHtcbiAgICAgICAgICAgIGlzRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ2ZvY3Vzb3V0LnpmLnRvb2x0aXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpc0ZvY3VzID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgfSkub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgIF90aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRzIGEgdG9nZ2xlIG1ldGhvZCwgaW4gYWRkaXRpb24gdG8gdGhlIHN0YXRpYyBzaG93KCkgJiBoaWRlKCkgZnVuY3Rpb25zXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgdG9vbHRpcCwgcmVtb3ZlcyB0ZW1wbGF0ZSBlbGVtZW50IGZyb20gdGhlIHZpZXcuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3RpdGxlJywgdGhpcy50ZW1wbGF0ZS50ZXh0KCkpLm9mZignLnpmLnRyaWdnZXIgLnpmLnRvb2x0aXAnKS5yZW1vdmVDbGFzcygnaGFzLXRpcCB0b3AgcmlnaHQgbGVmdCcpLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnkgYXJpYS1oYXNwb3B1cCBkYXRhLWRpc2FibGUtaG92ZXIgZGF0YS1yZXNpemUgZGF0YS10b2dnbGUgZGF0YS10b29sdGlwIGRhdGEteWV0aS1ib3gnKTtcblxuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmUoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVG9vbHRpcDtcbn0oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19mb3VuZGF0aW9uX3Bvc2l0aW9uYWJsZV9fW1wiYVwiIC8qIFBvc2l0aW9uYWJsZSAqL10pO1xuXG5Ub29sdGlwLmRlZmF1bHRzID0ge1xuICBkaXNhYmxlRm9yVG91Y2g6IGZhbHNlLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGJlZm9yZSBhIHRvb2x0aXAgc2hvdWxkIG9wZW4gb24gaG92ZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMjAwXG4gICAqL1xuICBob3ZlckRlbGF5OiAyMDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYSB0b29sdGlwIHNob3VsZCB0YWtlIHRvIGZhZGUgaW50byB2aWV3LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDE1MFxuICAgKi9cbiAgZmFkZUluRHVyYXRpb246IDE1MCxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBhIHRvb2x0aXAgc2hvdWxkIHRha2UgdG8gZmFkZSBvdXQgb2Ygdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxNTBcbiAgICovXG4gIGZhZGVPdXREdXJhdGlvbjogMTUwLFxuICAvKipcbiAgICogRGlzYWJsZXMgaG92ZXIgZXZlbnRzIGZyb20gb3BlbmluZyB0aGUgdG9vbHRpcCBpZiBzZXQgdG8gdHJ1ZVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGFkZHRpb25hbCBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSB0b29sdGlwIHRlbXBsYXRlIG9uIGluaXQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHRlbXBsYXRlQ2xhc3NlczogJycsXG4gIC8qKlxuICAgKiBOb24tb3B0aW9uYWwgY2xhc3MgYWRkZWQgdG8gdG9vbHRpcCB0ZW1wbGF0ZXMuIEZvdW5kYXRpb24gZGVmYXVsdCBpcyAndG9vbHRpcCcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3Rvb2x0aXAnXG4gICAqL1xuICB0b29sdGlwQ2xhc3M6ICd0b29sdGlwJyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIHRvb2x0aXAgYW5jaG9yIGVsZW1lbnQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2hhcy10aXAnXG4gICAqL1xuICB0cmlnZ2VyQ2xhc3M6ICdoYXMtdGlwJyxcbiAgLyoqXG4gICAqIE1pbmltdW0gYnJlYWtwb2ludCBzaXplIGF0IHdoaWNoIHRvIG9wZW4gdGhlIHRvb2x0aXAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3NtYWxsJ1xuICAgKi9cbiAgc2hvd09uOiAnc21hbGwnLFxuICAvKipcbiAgICogQ3VzdG9tIHRlbXBsYXRlIHRvIGJlIHVzZWQgdG8gZ2VuZXJhdGUgbWFya3VwIGZvciB0b29sdGlwLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICB0ZW1wbGF0ZTogJycsXG4gIC8qKlxuICAgKiBUZXh0IGRpc3BsYXllZCBpbiB0aGUgdG9vbHRpcCB0ZW1wbGF0ZSBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICB0aXBUZXh0OiAnJyxcbiAgdG91Y2hDbG9zZVRleHQ6ICdUYXAgdG8gY2xvc2UuJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdG9vbHRpcCB0byByZW1haW4gb3BlbiBpZiB0cmlnZ2VyZWQgd2l0aCBhIGNsaWNrIG9yIHRvdWNoIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbGlja09wZW46IHRydWUsXG4gIC8qKlxuICAgKiBERVBSRUNBVEVEIEFkZGl0aW9uYWwgcG9zaXRpb25pbmcgY2xhc3Nlcywgc2V0IGJ5IHRoZSBKU1xuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIFBvc2l0aW9uIG9mIHRvb2x0aXAuIENhbiBiZSBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG9yIGF1dG8uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICBwb3NpdGlvbjogJ2F1dG8nLFxuICAvKipcbiAgICogQWxpZ25tZW50IG9mIHRvb2x0aXAgcmVsYXRpdmUgdG8gYW5jaG9yLiBDYW4gYmUgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBjZW50ZXIsIG9yIGF1dG8uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICBhbGlnbm1lbnQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsbG93IG92ZXJsYXAgb2YgY29udGFpbmVyL3dpbmRvdy4gSWYgZmFsc2UsIHRvb2x0aXAgd2lsbCBmaXJzdCB0cnkgdG9cbiAgICogcG9zaXRpb24gYXMgZGVmaW5lZCBieSBkYXRhLXBvc2l0aW9uIGFuZCBkYXRhLWFsaWdubWVudCwgYnV0IHJlcG9zaXRpb24gaWZcbiAgICogaXQgd291bGQgY2F1c2UgYW4gb3ZlcmZsb3cuICBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dPdmVybGFwOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IG92ZXJsYXAgb2Ygb25seSB0aGUgYm90dG9tIG9mIHRoZSBjb250YWluZXIuIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uXG4gICAqIGJlaGF2aW9yIGZvciBkcm9wZG93bnMsIGFsbG93aW5nIHRoZSBkcm9wZG93biB0byBleHRlbmQgdGhlIGJvdHRvbSBvZiB0aGVcbiAgICogc2NyZWVuIGJ1dCBub3Qgb3RoZXJ3aXNlIGluZmx1ZW5jZSBvciBicmVhayBvdXQgb2YgdGhlIGNvbnRhaW5lci5cbiAgICogTGVzcyBjb21tb24gZm9yIHRvb2x0aXBzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dCb3R0b21PdmVybGFwOiBmYWxzZSxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWSBheGlzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHZPZmZzZXQ6IDAsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgdGVtcGxhdGUgc2hvdWxkIHB1c2ggYXdheSBmcm9tIHRoZSBhbmNob3Igb24gdGhlIFggYXhpc1xuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGhPZmZzZXQ6IDAsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgdGVtcGxhdGUgc3BhY2luZyBhdXRvLWFkanVzdCBmb3IgYSB2ZXJ0aWNhbCB0b29sdGlwXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTRcbiAgICovXG4gIHRvb2x0aXBIZWlnaHQ6IDE0LFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIHRlbXBsYXRlIHNwYWNpbmcgYXV0by1hZGp1c3QgZm9yIGEgaG9yaXpvbnRhbCB0b29sdGlwXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTJcbiAgICovXG4gIHRvb2x0aXBXaWR0aDogMTIsXG4gIC8qKlxuICAqIEFsbG93IEhUTUwgaW4gdG9vbHRpcC4gV2FybmluZzogSWYgeW91IGFyZSBsb2FkaW5nIHVzZXItZ2VuZXJhdGVkIGNvbnRlbnQgaW50byB0b29sdGlwcyxcbiAgKiBhbGxvd2luZyBIVE1MIG1heSBvcGVuIHlvdXJzZWxmIHVwIHRvIFhTUyBhdHRhY2tzLlxuICAqIEBvcHRpb25cbiAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCBmYWxzZVxuICAqL1xuICBhbGxvd0h0bWw6IGZhbHNlXG59O1xuXG4vKipcbiAqIFRPRE8gdXRpbGl6ZSByZXNpemUgZXZlbnQgdHJpZ2dlclxuICovXG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRyaWdnZXJzOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fZm91bmRhdGlvbl91dGlsX21vdGlvbl9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX18pO1xuXG5cblxuXG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChwcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbiAgICAgIHJldHVybiB3aW5kb3dbcHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlciddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KCk7XG5cbnZhciB0cmlnZ2VycyA9IGZ1bmN0aW9uIChlbCwgdHlwZSkge1xuICBlbC5kYXRhKHR5cGUpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCcjJyArIGlkKVt0eXBlID09PSAnY2xvc2UnID8gJ3RyaWdnZXInIDogJ3RyaWdnZXJIYW5kbGVyJ10odHlwZSArICcuemYudHJpZ2dlcicsIFtlbF0pO1xuICB9KTtcbn07XG5cbnZhciBUcmlnZ2VycyA9IHtcbiAgTGlzdGVuZXJzOiB7XG4gICAgQmFzaWM6IHt9LFxuICAgIEdsb2JhbDoge31cbiAgfSxcbiAgSW5pdGlhbGl6ZXJzOiB7fVxufTtcblxuVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljID0ge1xuICBvcGVuTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB0cmlnZ2VycyhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCAnb3BlbicpO1xuICB9LFxuICBjbG9zZUxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlkID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS5kYXRhKCdjbG9zZScpO1xuICAgIGlmIChpZCkge1xuICAgICAgdHJpZ2dlcnMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgJ2Nsb3NlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlcignY2xvc2UuemYudHJpZ2dlcicpO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ3RvZ2dsZScpO1xuICAgIGlmIChpZCkge1xuICAgICAgdHJpZ2dlcnMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKSwgJ3RvZ2dsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLnRyaWdnZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9LFxuICBjbG9zZWFibGVMaXN0ZW5lcjogZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHZhciBhbmltYXRpb24gPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ2Nsb3NhYmxlJyk7XG5cbiAgICBpZiAoYW5pbWF0aW9uICE9PSAnJykge1xuICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3VuZGF0aW9uX3V0aWxfbW90aW9uX19bXCJNb3Rpb25cIl0uYW5pbWF0ZU91dChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLCBhbmltYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmZhZGVPdXQoKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICB9XG4gIH0sXG4gIHRvZ2dsZUZvY3VzTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJyMnICsgaWQpLnRyaWdnZXJIYW5kbGVyKCd0b2dnbGUuemYudHJpZ2dlcicsIFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKHRoaXMpXSk7XG4gIH1cbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtb3Blbl0gd2lsbCByZXZlYWwgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkT3Blbkxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5vcGVuTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1vcGVuXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5vcGVuTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zZV0gd2lsbCBjbG9zZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbi8vIElmIHVzZWQgd2l0aG91dCBhIHZhbHVlIG9uIFtkYXRhLWNsb3NlXSwgdGhlIGV2ZW50IHdpbGwgYnViYmxlLCBhbGxvd2luZyBpdCB0byBjbG9zZSBhIHBhcmVudCBjb21wb25lbnQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlXSB3aWxsIHRvZ2dsZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGVdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2FibGVdIHdpbGwgcmVzcG9uZCB0byBjbG9zZS56Zi50cmlnZ2VyIGV2ZW50cy5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZWFibGVMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2Nsb3NlLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xvc2UuemYudHJpZ2dlcicsICdbZGF0YS1jbG9zZWFibGVdLCBbZGF0YS1jbG9zYWJsZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGUtZm9jdXNdIHdpbGwgcmVzcG9uZCB0byBjb21pbmcgaW4gYW5kIG91dCBvZiBmb2N1c1xuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUZvY3VzTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVGb2N1c0xpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZS1mb2N1c10nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlRm9jdXNMaXN0ZW5lcik7XG59O1xuXG4vLyBNb3JlIEdsb2JhbC9jb21wbGV4IGxpc3RlbmVycyBhbmQgdHJpZ2dlcnNcblRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwgPSB7XG4gIHJlc2l6ZUxpc3RlbmVyOiBmdW5jdGlvbiAoJG5vZGVzKSB7XG4gICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgcmVzaXplIGV2ZW50XG4gICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJyZXNpemVcIik7XG4gIH0sXG4gIHNjcm9sbExpc3RlbmVyOiBmdW5jdGlvbiAoJG5vZGVzKSB7XG4gICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJzY3JvbGxcIik7XG4gIH0sXG4gIGNsb3NlTWVMaXN0ZW5lcjogZnVuY3Rpb24gKGUsIHBsdWdpbklkKSB7XG4gICAgdmFyIHBsdWdpbiA9IGUubmFtZXNwYWNlLnNwbGl0KCcuJylbMF07XG4gICAgdmFyIHBsdWdpbnMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfanF1ZXJ5X19fZGVmYXVsdCgpKCdbZGF0YS0nICsgcGx1Z2luICsgJ10nKS5ub3QoJ1tkYXRhLXlldGktYm94PVwiJyArIHBsdWdpbklkICsgJ1wiXScpO1xuXG4gICAgcGx1Z2lucy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkodGhpcyk7XG4gICAgICBfdGhpcy50cmlnZ2VySGFuZGxlcignY2xvc2UuemYudHJpZ2dlcicsIFtfdGhpc10pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gR2xvYmFsLCBwYXJzZXMgd2hvbGUgZG9jdW1lbnQuXG59O1RyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZW1lTGlzdGVuZXIgPSBmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICB2YXIgeWV0aUJveGVzID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKSgnW2RhdGEteWV0aS1ib3hdJyksXG4gICAgICBwbHVnTmFtZXMgPSBbJ2Ryb3Bkb3duJywgJ3Rvb2x0aXAnLCAncmV2ZWFsJ107XG5cbiAgaWYgKHBsdWdpbk5hbWUpIHtcbiAgICBpZiAodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwbHVnTmFtZXMucHVzaChwbHVnaW5OYW1lKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGx1Z2luTmFtZVswXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBsdWdOYW1lcy5jb25jYXQocGx1Z2luTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsdWdpbiBuYW1lcyBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHlldGlCb3hlcy5sZW5ndGgpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuICdjbG9zZW1lLnpmLicgKyBuYW1lO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwuY2xvc2VNZUxpc3RlbmVyKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGVib3VuY2VHbG9iYWxMaXN0ZW5lcihkZWJvdW5jZSwgdHJpZ2dlciwgbGlzdGVuZXIpIHtcbiAgdmFyIHRpbWVyID0gdm9pZCAwLFxuICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG4gIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkod2luZG93KS5vZmYodHJpZ2dlcikub24odHJpZ2dlciwgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgfVxuICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCBkZWJvdW5jZSB8fCAxMCk7IC8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gIH0pO1xufVxuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoZGVib3VuY2UpIHtcbiAgdmFyICRub2RlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCAncmVzaXplLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLnJlc2l6ZUxpc3RlbmVyLCAkbm9kZXMpO1xuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2Nyb2xsTGlzdGVuZXIgPSBmdW5jdGlvbiAoZGVib3VuY2UpIHtcbiAgdmFyICRub2RlcyA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoJ1tkYXRhLXNjcm9sbF0nKTtcbiAgaWYgKCRub2Rlcy5sZW5ndGgpIHtcbiAgICBkZWJvdW5jZUdsb2JhbExpc3RlbmVyKGRlYm91bmNlLCAnc2Nyb2xsLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLnNjcm9sbExpc3RlbmVyLCAkbm9kZXMpO1xuICB9XG59O1xuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkTXV0YXRpb25FdmVudHNMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyICRub2RlcyA9ICRlbGVtLmZpbmQoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAvL2VsZW1lbnQgY2FsbGJhY2tcbiAgdmFyIGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24gPSBmdW5jdGlvbiAobXV0YXRpb25SZWNvcmRzTGlzdCkge1xuICAgIHZhciAkdGFyZ2V0ID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2pxdWVyeV9fX2RlZmF1bHQoKShtdXRhdGlvblJlY29yZHNMaXN0WzBdLnRhcmdldCk7XG5cbiAgICAvL3RyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBlbGVtZW50IGRlcGVuZGluZyBvbiB0eXBlXG4gICAgc3dpdGNoIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJhdHRyaWJ1dGVzXCI6XG4gICAgICAgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJzY3JvbGxcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuICAgICAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInLCBbJHRhcmdldCwgd2luZG93LnBhZ2VZT2Zmc2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInJlc2l6ZVwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG4gICAgICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS5hdHRyKFwiZGF0YS1ldmVudHNcIiwgXCJtdXRhdGVcIik7XG4gICAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJjaGlsZExpc3RcIjpcbiAgICAgICAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS5hdHRyKFwiZGF0YS1ldmVudHNcIiwgXCJtdXRhdGVcIik7XG4gICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlckhhbmRsZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKV0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy9ub3RoaW5nXG4gICAgfVxuICB9O1xuXG4gIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgLy9mb3IgZWFjaCBlbGVtZW50IHRoYXQgbmVlZHMgdG8gbGlzdGVuIGZvciByZXNpemluZywgc2Nyb2xsaW5nLCBvciBtdXRhdGlvbiBhZGQgYSBzaW5nbGUgb2JzZXJ2ZXJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSAkbm9kZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICB2YXIgZWxlbWVudE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbik7XG4gICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZSgkbm9kZXNbaV0sIHsgYXR0cmlidXRlczogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlRmlsdGVyOiBbXCJkYXRhLWV2ZW50c1wiLCBcInN0eWxlXCJdIH0pO1xuICAgIH1cbiAgfVxufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyICRkb2N1bWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQpO1xuXG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRPcGVuTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZWFibGVMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlRm9jdXNMaXN0ZW5lcigkZG9jdW1lbnQpO1xufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyICRkb2N1bWVudCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9qcXVlcnlfX19kZWZhdWx0KCkoZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkTXV0YXRpb25FdmVudHNMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkUmVzaXplTGlzdGVuZXIoKTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNjcm9sbExpc3RlbmVyKCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZW1lTGlzdGVuZXIoKTtcbn07XG5cblRyaWdnZXJzLmluaXQgPSBmdW5jdGlvbiAoJCwgRm91bmRhdGlvbikge1xuICBpZiAodHlwZW9mICQudHJpZ2dlcnNJbml0aWFsaXplZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgJGRvY3VtZW50ID0gJChkb2N1bWVudCk7XG5cbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzKCk7XG4gICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFNpbXBsZUxpc3RlbmVycygpO1xuICAgICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkR2xvYmFsTGlzdGVuZXJzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkLnRyaWdnZXJzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKEZvdW5kYXRpb24pIHtcbiAgICBGb3VuZGF0aW9uLlRyaWdnZXJzID0gVHJpZ2dlcnM7XG4gICAgLy8gTGVnYWN5IGluY2x1ZGVkIHRvIGJlIGJhY2t3YXJkcyBjb21wYXRpYmxlIGZvciBub3cuXG4gICAgRm91bmRhdGlvbi5JSGVhcllvdSA9IFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnM7XG4gIH1cbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7Qm94OiB3aW5kb3cuRm91bmRhdGlvbi5Cb3h9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gOTk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiLyohIFN3aXBlYm94IHYxLjQuNCB8IENvbnN0YW50aW4gU2FndWluIGNzYWcuY28gfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vYnJ1dGFsZGVzaWduL3N3aXBlYm94ICovXHJcblxyXG47KCBmdW5jdGlvbiAoIHdpbmRvdywgZG9jdW1lbnQsICQsIHVuZGVmaW5lZCApIHtcclxuXHJcblx0JC5zd2lwZWJveCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zICkge1xyXG5cclxuXHRcdC8vIERlZmF1bHQgb3B0aW9uc1xyXG5cdFx0dmFyIHVpLFxyXG5cdFx0XHRkZWZhdWx0cyA9IHtcclxuXHRcdFx0XHR1c2VDU1MgOiB0cnVlLFxyXG5cdFx0XHRcdHVzZVNWRyA6IHRydWUsXHJcblx0XHRcdFx0aW5pdGlhbEluZGV4T25BcnJheSA6IDAsXHJcblx0XHRcdFx0cmVtb3ZlQmFyc09uTW9iaWxlIDogdHJ1ZSxcclxuXHRcdFx0XHRoaWRlQ2xvc2VCdXR0b25Pbk1vYmlsZSA6IGZhbHNlLFxyXG5cdFx0XHRcdGhpZGVCYXJzRGVsYXkgOiAzMDAwLFxyXG5cdFx0XHRcdHZpZGVvTWF4V2lkdGggOiAxMTQwLFxyXG5cdFx0XHRcdHZpbWVvQ29sb3IgOiAnY2NjY2NjJyxcclxuXHRcdFx0XHRiZWZvcmVPcGVuOiBudWxsLFxyXG5cdFx0XHRcdGFmdGVyT3BlbjogbnVsbCxcclxuXHRcdFx0XHRhZnRlckNsb3NlOiBudWxsLFxyXG5cdFx0XHRcdGFmdGVyTWVkaWE6IG51bGwsXHJcblx0XHRcdFx0bmV4dFNsaWRlOiBudWxsLFxyXG5cdFx0XHRcdHByZXZTbGlkZTogbnVsbCxcclxuXHRcdFx0XHRsb29wQXRFbmQ6IGZhbHNlLFxyXG5cdFx0XHRcdGF1dG9wbGF5VmlkZW9zOiBmYWxzZSxcclxuXHRcdFx0XHRxdWVyeVN0cmluZ0RhdGE6IHt9LFxyXG5cdFx0XHRcdHRvZ2dsZUNsYXNzT25Mb2FkOiAnJ1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0cGx1Z2luID0gdGhpcyxcclxuXHRcdFx0ZWxlbWVudHMgPSBbXSwgLy8gc2xpZGVzIGFycmF5IFsgeyBocmVmOicuLi4nLCB0aXRsZTonLi4uJyB9LCAuLi5dLFxyXG5cdFx0XHQkZWxlbSxcclxuXHRcdFx0c2VsZWN0b3IgPSBlbGVtLnNlbGVjdG9yLFxyXG5cdFx0XHRpc01vYmlsZSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goIC8oaVBhZCl8KGlQaG9uZSl8KGlQb2QpfChBbmRyb2lkKXwoUGxheUJvb2spfChCQjEwKXwoQmxhY2tCZXJyeSl8KE9wZXJhIE1pbmkpfChJRU1vYmlsZSl8KHdlYk9TKXwoTWVlR28pL2kgKSxcclxuXHRcdFx0aXNUb3VjaCA9IGlzTW9iaWxlICE9PSBudWxsIHx8IGRvY3VtZW50LmNyZWF0ZVRvdWNoICE9PSB1bmRlZmluZWQgfHwgKCAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgKSB8fCAoICdvbm1zZ2VzdHVyZWNoYW5nZScgaW4gd2luZG93ICkgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMsXHJcblx0XHRcdHN1cHBvcnRTVkcgPSAhISBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgISEgZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJykuY3JlYXRlU1ZHUmVjdCxcclxuXHRcdFx0d2luV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCA/IHdpbmRvdy5pbm5lcldpZHRoIDogJCggd2luZG93ICkud2lkdGgoKSxcclxuXHRcdFx0d2luSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ID8gd2luZG93LmlubmVySGVpZ2h0IDogJCggd2luZG93ICkuaGVpZ2h0KCksXHJcblx0XHRcdGN1cnJlbnRYID0gMCxcclxuXHRcdFx0LyoganNoaW50IG11bHRpc3RyOiB0cnVlICovXHJcblx0XHRcdGh0bWwgPSAnPGRpdiBpZD1cInN3aXBlYm94LW92ZXJsYXlcIj5cXFxyXG5cdFx0XHRcdFx0PGRpdiBpZD1cInN3aXBlYm94LWNvbnRhaW5lclwiPlxcXHJcblx0XHRcdFx0XHRcdDxkaXYgaWQ9XCJzd2lwZWJveC1zbGlkZXJcIj48L2Rpdj5cXFxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGlkPVwic3dpcGVib3gtdG9wLWJhclwiPlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBpZD1cInN3aXBlYm94LXRpdGxlXCI+PC9kaXY+XFxcclxuXHRcdFx0XHRcdFx0PC9kaXY+XFxcclxuXHRcdFx0XHRcdFx0PGRpdiBpZD1cInN3aXBlYm94LWJvdHRvbS1iYXJcIj5cXFxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgaWQ9XCJzd2lwZWJveC1hcnJvd3NcIj5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0PGEgaWQ9XCJzd2lwZWJveC1wcmV2XCI+PC9hPlxcXHJcblx0XHRcdFx0XHRcdFx0XHQ8YSBpZD1cInN3aXBlYm94LW5leHRcIj48L2E+XFxcclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cXFxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXFxyXG5cdFx0XHRcdFx0XHQ8YSBpZD1cInN3aXBlYm94LWNsb3NlXCI+PC9hPlxcXHJcblx0XHRcdFx0XHQ8L2Rpdj5cXFxyXG5cdFx0XHQ8L2Rpdj4nO1xyXG5cclxuXHRcdHBsdWdpbi5zZXR0aW5ncyA9IHt9O1xyXG5cclxuXHRcdCQuc3dpcGVib3guY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHVpLmNsb3NlU2xpZGUoKTtcclxuXHRcdH07XHJcblxyXG5cdFx0JC5zd2lwZWJveC5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHQkKCBkb2N1bWVudCApLm9mZiggJ2NsaWNrLnN3aXBlYm94JyApO1xyXG5cdFx0fTtcclxuXHJcblx0XHQkLnN3aXBlYm94LmV4dGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIHVpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRwbHVnaW4uaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0cGx1Z2luLnNldHRpbmdzID0gJC5leHRlbmQoIHt9LCBkZWZhdWx0cywgb3B0aW9ucyApO1xyXG5cdFx0XHRzZWxlY3RvciA9IHBsdWdpbi5zZXR0aW5ncy5zZWxlY3RvcjtcclxuXHJcblx0XHRcdGlmICggJC5pc0FycmF5KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdGVsZW1lbnRzID0gZWxlbTtcclxuXHRcdFx0XHR1aS50YXJnZXQgPSAkKCB3aW5kb3cgKTtcclxuXHRcdFx0XHR1aS5pbml0KCBwbHVnaW4uc2V0dGluZ3MuaW5pdGlhbEluZGV4T25BcnJheSApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0JCggZG9jdW1lbnQgKS5vbiggJ2NsaWNrLnN3aXBlYm94Jywgc2VsZWN0b3IsIGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyggaXNUb3VjaCApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NOYW1lID09PSAnc2xpZGUgY3VycmVudCcgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKCAhICQuaXNBcnJheSggZWxlbSApICkge1xyXG5cdFx0XHRcdFx0XHR1aS5kZXN0cm95KCk7XHJcblx0XHRcdFx0XHRcdCRlbGVtID0gJCggc2VsZWN0b3IgKTtcclxuXHRcdFx0XHRcdFx0dWkuYWN0aW9ucygpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGVsZW1lbnRzID0gW107XHJcblx0XHRcdFx0XHR2YXIgaW5kZXgsIHJlbFR5cGUsIHJlbFZhbDtcclxuXHJcblx0XHRcdFx0XHQvLyBBbGxvdyBmb3IgSFRNTDUgY29tcGxpYW50IGF0dHJpYnV0ZSBiZWZvcmUgbGVnYWN5IHVzZSBvZiByZWxcclxuXHRcdFx0XHRcdGlmICggISByZWxWYWwgKSB7XHJcblx0XHRcdFx0XHRcdHJlbFR5cGUgPSAnZGF0YS1yZWwnO1xyXG5cdFx0XHRcdFx0XHRyZWxWYWwgPSAkKCB0aGlzICkuYXR0ciggcmVsVHlwZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmICggISByZWxWYWwgKSB7XHJcblx0XHRcdFx0XHRcdHJlbFR5cGUgPSAncmVsJztcclxuXHRcdFx0XHRcdFx0cmVsVmFsID0gJCggdGhpcyApLmF0dHIoIHJlbFR5cGUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIHJlbFZhbCAmJiByZWxWYWwgIT09ICcnICYmIHJlbFZhbCAhPT0gJ25vZm9sbG93JyApIHtcclxuXHRcdFx0XHRcdFx0JGVsZW0gPSAkKCBzZWxlY3RvciApLmZpbHRlciggJ1snICsgcmVsVHlwZSArICc9XCInICsgcmVsVmFsICsgJ1wiXScgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdCRlbGVtID0gJCggc2VsZWN0b3IgKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQkZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciB0aXRsZSA9IG51bGwsXHJcblx0XHRcdFx0XHRcdFx0aHJlZiA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoICQoIHRoaXMgKS5hdHRyKCAndGl0bGUnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0dGl0bGUgPSAkKCB0aGlzICkuYXR0ciggJ3RpdGxlJyApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCAkKCB0aGlzICkuYXR0ciggJ2hyZWYnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0aHJlZiA9ICQoIHRoaXMgKS5hdHRyKCAnaHJlZicgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0ZWxlbWVudHMucHVzaCgge1xyXG5cdFx0XHRcdFx0XHRcdGhyZWY6IGhyZWYsXHJcblx0XHRcdFx0XHRcdFx0dGl0bGU6IHRpdGxlXHJcblx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0XHRpbmRleCA9ICRlbGVtLmluZGV4KCAkKCB0aGlzICkgKTtcclxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0XHRcdHVpLnRhcmdldCA9ICQoIGV2ZW50LnRhcmdldCApO1xyXG5cdFx0XHRcdFx0dWkuaW5pdCggaW5kZXggKTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0dWkgPSB7XHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogSW5pdGlhdGUgU3dpcGVib3hcclxuXHRcdFx0ICovXHJcblx0XHRcdGluaXQgOiBmdW5jdGlvbiggaW5kZXggKSB7XHJcblx0XHRcdFx0aWYgKCBwbHVnaW4uc2V0dGluZ3MuYmVmb3JlT3BlbiApIHtcclxuXHRcdFx0XHRcdHBsdWdpbi5zZXR0aW5ncy5iZWZvcmVPcGVuKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMudGFyZ2V0LnRyaWdnZXIoICdzd2lwZWJveC1zdGFydCcgKTtcclxuXHRcdFx0XHQkLnN3aXBlYm94LmlzT3BlbiA9IHRydWU7XHJcblx0XHRcdFx0dGhpcy5idWlsZCgpO1xyXG5cdFx0XHRcdHRoaXMub3BlblNsaWRlKCBpbmRleCApO1xyXG5cdFx0XHRcdHRoaXMub3Blbk1lZGlhKCBpbmRleCApO1xyXG5cdFx0XHRcdHRoaXMucHJlbG9hZE1lZGlhKCBpbmRleCsxICk7XHJcblx0XHRcdFx0dGhpcy5wcmVsb2FkTWVkaWEoIGluZGV4LTEgKTtcclxuXHRcdFx0XHRpZiAoIHBsdWdpbi5zZXR0aW5ncy5hZnRlck9wZW4gKSB7XHJcblx0XHRcdFx0XHRwbHVnaW4uc2V0dGluZ3MuYWZ0ZXJPcGVuKGluZGV4KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQnVpbHQgSFRNTCBjb250YWluZXJzIGFuZCBmaXJlIG1haW4gZnVuY3Rpb25zXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRidWlsZCA6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR2YXIgJHRoaXMgPSB0aGlzLCBiZztcclxuXHJcblx0XHRcdFx0JCggJ2JvZHknICkuYXBwZW5kKCBodG1sICk7XHJcblxyXG5cdFx0XHRcdGlmICggc3VwcG9ydFNWRyAmJiBwbHVnaW4uc2V0dGluZ3MudXNlU1ZHID09PSB0cnVlICkge1xyXG5cdFx0XHRcdFx0YmcgPSAkKCAnI3N3aXBlYm94LWNsb3NlJyApLmNzcyggJ2JhY2tncm91bmQtaW1hZ2UnICk7XHJcblx0XHRcdFx0XHRiZyA9IGJnLnJlcGxhY2UoICdwbmcnLCAnc3ZnJyApO1xyXG5cdFx0XHRcdFx0JCggJyNzd2lwZWJveC1wcmV2LCAjc3dpcGVib3gtbmV4dCwgI3N3aXBlYm94LWNsb3NlJyApLmNzcygge1xyXG5cdFx0XHRcdFx0XHQnYmFja2dyb3VuZC1pbWFnZScgOiBiZ1xyXG5cdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBpc01vYmlsZSAmJiBwbHVnaW4uc2V0dGluZ3MucmVtb3ZlQmFyc09uTW9iaWxlICkge1xyXG5cdFx0XHRcdFx0JCggJyNzd2lwZWJveC1ib3R0b20tYmFyLCAjc3dpcGVib3gtdG9wLWJhcicgKS5yZW1vdmUoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdCQuZWFjaCggZWxlbWVudHMsICBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdCQoICcjc3dpcGVib3gtc2xpZGVyJyApLmFwcGVuZCggJzxkaXYgY2xhc3M9XCJzbGlkZVwiPjwvZGl2PicgKTtcclxuXHRcdFx0XHR9ICk7XHJcblxyXG5cdFx0XHRcdCR0aGlzLnNldERpbSgpO1xyXG5cdFx0XHRcdCR0aGlzLmFjdGlvbnMoKTtcclxuXHJcblx0XHRcdFx0aWYgKCBpc1RvdWNoICkge1xyXG5cdFx0XHRcdFx0JHRoaXMuZ2VzdHVyZSgpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRGV2aWNlcyBjYW4gaGF2ZSBib3RoIHRvdWNoIGFuZCBrZXlib2FyZCBpbnB1dCBzbyBhbHdheXMgYWxsb3cga2V5IGV2ZW50c1xyXG5cdFx0XHRcdCR0aGlzLmtleWJvYXJkKCk7XHJcblxyXG5cdFx0XHRcdCR0aGlzLmFuaW1CYXJzKCk7XHJcblx0XHRcdFx0JHRoaXMucmVzaXplKCk7XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNldCBkaW1lbnNpb25zIGRlcGVuZGluZyBvbiB3aW5kb3dzIHdpZHRoIGFuZCBoZWlnaHRcclxuXHRcdFx0ICovXHJcblx0XHRcdHNldERpbSA6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0dmFyIHdpZHRoLCBoZWlnaHQsIHNsaWRlckNzcyA9IHt9O1xyXG5cclxuXHRcdFx0XHQvLyBSZXNldCBkaW1lbnNpb25zIG9uIG1vYmlsZSBvcmllbnRhdGlvbiBjaGFuZ2VcclxuXHRcdFx0XHRpZiAoICdvbm9yaWVudGF0aW9uY2hhbmdlJyBpbiB3aW5kb3cgKSB7XHJcblxyXG5cdFx0XHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdvcmllbnRhdGlvbmNoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIHdpbmRvdy5vcmllbnRhdGlvbiA9PT0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHR3aWR0aCA9IHdpbldpZHRoO1xyXG5cdFx0XHRcdFx0XHRcdGhlaWdodCA9IHdpbkhlaWdodDtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggd2luZG93Lm9yaWVudGF0aW9uID09PSA5MCB8fCB3aW5kb3cub3JpZW50YXRpb24gPT09IC05MCApIHtcclxuXHRcdFx0XHRcdFx0XHR3aWR0aCA9IHdpbkhlaWdodDtcclxuXHRcdFx0XHRcdFx0XHRoZWlnaHQgPSB3aW5XaWR0aDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSwgZmFsc2UgKTtcclxuXHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0d2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCA/IHdpbmRvdy5pbm5lcldpZHRoIDogJCggd2luZG93ICkud2lkdGgoKTtcclxuXHRcdFx0XHRcdGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCA/IHdpbmRvdy5pbm5lckhlaWdodCA6ICQoIHdpbmRvdyApLmhlaWdodCgpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c2xpZGVyQ3NzID0ge1xyXG5cdFx0XHRcdFx0d2lkdGggOiB3aWR0aCxcclxuXHRcdFx0XHRcdGhlaWdodCA6IGhlaWdodFxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdCQoICcjc3dpcGVib3gtb3ZlcmxheScgKS5jc3MoIHNsaWRlckNzcyApO1xyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBSZXNldCBkaW1lbnNpb25zIG9uIHdpbmRvdyByZXNpemUgZW52ZW50XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRyZXNpemUgOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dmFyICR0aGlzID0gdGhpcztcclxuXHJcblx0XHRcdFx0JCggd2luZG93ICkucmVzaXplKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdCR0aGlzLnNldERpbSgpO1xyXG5cdFx0XHRcdH0gKS5yZXNpemUoKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBDaGVjayBpZiBkZXZpY2Ugc3VwcG9ydHMgQ1NTIHRyYW5zaXRpb25zXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzdXBwb3J0VHJhbnNpdGlvbiA6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0dmFyIHByZWZpeGVzID0gJ3RyYW5zaXRpb24gV2Via2l0VHJhbnNpdGlvbiBNb3pUcmFuc2l0aW9uIE9UcmFuc2l0aW9uIG1zVHJhbnNpdGlvbiBLaHRtbFRyYW5zaXRpb24nLnNwbGl0KCAnICcgKSxcclxuXHRcdFx0XHRcdGk7XHJcblxyXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICkuc3R5bGVbIHByZWZpeGVzW2ldIF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHByZWZpeGVzW2ldO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQ2hlY2sgaWYgQ1NTIHRyYW5zaXRpb25zIGFyZSBhbGxvd2VkIChvcHRpb25zICsgZGV2aWNlc3VwcG9ydClcclxuXHRcdFx0ICovXHJcblx0XHRcdGRvQ3NzVHJhbnMgOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0aWYgKCBwbHVnaW4uc2V0dGluZ3MudXNlQ1NTICYmIHRoaXMuc3VwcG9ydFRyYW5zaXRpb24oKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBUb3VjaCBuYXZpZ2F0aW9uXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXN0dXJlIDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHR2YXIgJHRoaXMgPSB0aGlzLFxyXG5cdFx0XHRcdFx0aW5kZXgsXHJcblx0XHRcdFx0XHRoRGlzdGFuY2UsXHJcblx0XHRcdFx0XHR2RGlzdGFuY2UsXHJcblx0XHRcdFx0XHRoRGlzdGFuY2VMYXN0LFxyXG5cdFx0XHRcdFx0dkRpc3RhbmNlTGFzdCxcclxuXHRcdFx0XHRcdGhEaXN0YW5jZVBlcmNlbnQsXHJcblx0XHRcdFx0XHR2U3dpcGUgPSBmYWxzZSxcclxuXHRcdFx0XHRcdGhTd2lwZSA9IGZhbHNlLFxyXG5cdFx0XHRcdFx0aFN3aXBNaW5EaXN0YW5jZSA9IDEwLFxyXG5cdFx0XHRcdFx0dlN3aXBNaW5EaXN0YW5jZSA9IDUwLFxyXG5cdFx0XHRcdFx0c3RhcnRDb29yZHMgPSB7fSxcclxuXHRcdFx0XHRcdGVuZENvb3JkcyA9IHt9LFxyXG5cdFx0XHRcdFx0YmFycyA9ICQoICcjc3dpcGVib3gtdG9wLWJhciwgI3N3aXBlYm94LWJvdHRvbS1iYXInICksXHJcblx0XHRcdFx0XHRzbGlkZXIgPSAkKCAnI3N3aXBlYm94LXNsaWRlcicgKTtcclxuXHJcblx0XHRcdFx0YmFycy5hZGRDbGFzcyggJ3Zpc2libGUtYmFycycgKTtcclxuXHRcdFx0XHQkdGhpcy5zZXRUaW1lb3V0KCk7XHJcblxyXG5cdFx0XHRcdCQoICdib2R5JyApLmJpbmQoICd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdCQoIHRoaXMgKS5hZGRDbGFzcyggJ3RvdWNoaW5nJyApO1xyXG5cdFx0XHRcdFx0aW5kZXggPSAkKCAnI3N3aXBlYm94LXNsaWRlciAuc2xpZGUnICkuaW5kZXgoICQoICcjc3dpcGVib3gtc2xpZGVyIC5zbGlkZS5jdXJyZW50JyApICk7XHJcblx0XHRcdFx0XHRlbmRDb29yZHMgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF07XHJcblx0XHRcdFx0XHRzdGFydENvb3Jkcy5wYWdlWCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcclxuXHRcdFx0XHRcdHN0YXJ0Q29vcmRzLnBhZ2VZID0gZXZlbnQub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xyXG5cclxuXHRcdFx0XHRcdCQoICcjc3dpcGVib3gtc2xpZGVyJyApLmNzcygge1xyXG5cdFx0XHRcdFx0XHQnLXdlYmtpdC10cmFuc2Zvcm0nIDogJ3RyYW5zbGF0ZTNkKCcgKyBjdXJyZW50WCArJyUsIDAsIDApJyxcclxuXHRcdFx0XHRcdFx0J3RyYW5zZm9ybScgOiAndHJhbnNsYXRlM2QoJyArIGN1cnJlbnRYICsgJyUsIDAsIDApJ1xyXG5cdFx0XHRcdFx0fSApO1xyXG5cclxuXHRcdFx0XHRcdCQoICcudG91Y2hpbmcnICkuYmluZCggJ3RvdWNobW92ZScsZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0XHRcdFx0ZW5kQ29vcmRzID0gZXZlbnQub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCAhIGhTd2lwZSApIHtcclxuXHRcdFx0XHRcdFx0XHR2RGlzdGFuY2VMYXN0ID0gdkRpc3RhbmNlO1xyXG5cdFx0XHRcdFx0XHRcdHZEaXN0YW5jZSA9IGVuZENvb3Jkcy5wYWdlWSAtIHN0YXJ0Q29vcmRzLnBhZ2VZO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggTWF0aC5hYnMoIHZEaXN0YW5jZSApID49IHZTd2lwTWluRGlzdGFuY2UgfHwgdlN3aXBlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIG9wYWNpdHkgPSAwLjc1IC0gTWF0aC5hYnModkRpc3RhbmNlKSAvIHNsaWRlci5oZWlnaHQoKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRzbGlkZXIuY3NzKCB7ICd0b3AnOiB2RGlzdGFuY2UgKyAncHgnIH0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdHNsaWRlci5jc3MoIHsgJ29wYWNpdHknOiBvcGFjaXR5IH0gKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHR2U3dpcGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aERpc3RhbmNlTGFzdCA9IGhEaXN0YW5jZTtcclxuXHRcdFx0XHRcdFx0aERpc3RhbmNlID0gZW5kQ29vcmRzLnBhZ2VYIC0gc3RhcnRDb29yZHMucGFnZVg7XHJcblx0XHRcdFx0XHRcdGhEaXN0YW5jZVBlcmNlbnQgPSBoRGlzdGFuY2UgKiAxMDAgLyB3aW5XaWR0aDtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggISBoU3dpcGUgJiYgISB2U3dpcGUgJiYgTWF0aC5hYnMoIGhEaXN0YW5jZSApID49IGhTd2lwTWluRGlzdGFuY2UgKSB7XHJcblx0XHRcdFx0XHRcdFx0JCggJyNzd2lwZWJveC1zbGlkZXInICkuY3NzKCB7XHJcblx0XHRcdFx0XHRcdFx0XHQnLXdlYmtpdC10cmFuc2l0aW9uJyA6ICcnLFxyXG5cdFx0XHRcdFx0XHRcdFx0J3RyYW5zaXRpb24nIDogJydcclxuXHRcdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRcdFx0aFN3aXBlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBoU3dpcGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIHN3aXBlIGxlZnRcclxuXHRcdFx0XHRcdFx0XHRpZiAoIDAgPCBoRGlzdGFuY2UgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZmlyc3Qgc2xpZGVcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggMCA9PT0gaW5kZXggKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKCAnZmlyc3QnICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCQoICcjc3dpcGVib3gtb3ZlcmxheScgKS5hZGRDbGFzcyggJ2xlZnRTcHJpbmdUb3VjaCcgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvbGxvdyBnZXN0dXJlXHJcblx0XHRcdFx0XHRcdFx0XHRcdCQoICcjc3dpcGVib3gtb3ZlcmxheScgKS5yZW1vdmVDbGFzcyggJ2xlZnRTcHJpbmdUb3VjaCcgKS5yZW1vdmVDbGFzcyggJ3JpZ2h0U3ByaW5nVG91Y2gnICk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCQoICcjc3dpcGVib3gtc2xpZGVyJyApLmNzcygge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCctd2Via2l0LXRyYW5zZm9ybScgOiAndHJhbnNsYXRlM2QoJyArICggY3VycmVudFggKyBoRGlzdGFuY2VQZXJjZW50ICkgKyclLCAwLCAwKScsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0J3RyYW5zZm9ybScgOiAndHJhbnNsYXRlM2QoJyArICggY3VycmVudFggKyBoRGlzdGFuY2VQZXJjZW50ICkgKyAnJSwgMCwgMCknXHJcblx0XHRcdFx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gc3dpcGUgcnVnaHRcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAwID4gaERpc3RhbmNlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIGxhc3QgU2xpZGVcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggZWxlbWVudHMubGVuZ3RoID09PSBpbmRleCArMSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coICdsYXN0JyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LW92ZXJsYXknICkuYWRkQ2xhc3MoICdyaWdodFNwcmluZ1RvdWNoJyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JCggJyNzd2lwZWJveC1vdmVybGF5JyApLnJlbW92ZUNsYXNzKCAnbGVmdFNwcmluZ1RvdWNoJyApLnJlbW92ZUNsYXNzKCAncmlnaHRTcHJpbmdUb3VjaCcgKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JCggJyNzd2lwZWJveC1zbGlkZXInICkuY3NzKCB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Jy13ZWJraXQtdHJhbnNmb3JtJyA6ICd0cmFuc2xhdGUzZCgnICsgKCBjdXJyZW50WCArIGhEaXN0YW5jZVBlcmNlbnQgKSArJyUsIDAsIDApJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQndHJhbnNmb3JtJyA6ICd0cmFuc2xhdGUzZCgnICsgKCBjdXJyZW50WCArIGhEaXN0YW5jZVBlcmNlbnQgKSArICclLCAwLCAwKSdcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHRcdH0gKS5iaW5kKCAndG91Y2hlbmQnLGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcblx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LXNsaWRlcicgKS5jc3MoIHtcclxuXHRcdFx0XHRcdFx0Jy13ZWJraXQtdHJhbnNpdGlvbicgOiAnLXdlYmtpdC10cmFuc2Zvcm0gMC40cyBlYXNlJyxcclxuXHRcdFx0XHRcdFx0J3RyYW5zaXRpb24nIDogJ3RyYW5zZm9ybSAwLjRzIGVhc2UnXHJcblx0XHRcdFx0XHR9ICk7XHJcblxyXG5cdFx0XHRcdFx0dkRpc3RhbmNlID0gZW5kQ29vcmRzLnBhZ2VZIC0gc3RhcnRDb29yZHMucGFnZVk7XHJcblx0XHRcdFx0XHRoRGlzdGFuY2UgPSBlbmRDb29yZHMucGFnZVggLSBzdGFydENvb3Jkcy5wYWdlWDtcclxuXHRcdFx0XHRcdGhEaXN0YW5jZVBlcmNlbnQgPSBoRGlzdGFuY2UqMTAwL3dpbldpZHRoO1xyXG5cclxuXHRcdFx0XHRcdC8vIFN3aXBlIHRvIGJvdHRvbSB0byBjbG9zZVxyXG5cdFx0XHRcdFx0aWYgKCB2U3dpcGUgKSB7XHJcblx0XHRcdFx0XHRcdHZTd2lwZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCB2RGlzdGFuY2UgKSA+PSAyICogdlN3aXBNaW5EaXN0YW5jZSAmJiBNYXRoLmFicyggdkRpc3RhbmNlICkgPiBNYXRoLmFicyggdkRpc3RhbmNlTGFzdCApICkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciB2T2Zmc2V0ID0gdkRpc3RhbmNlID4gMCA/IHNsaWRlci5oZWlnaHQoKSA6IC0gc2xpZGVyLmhlaWdodCgpO1xyXG5cdFx0XHRcdFx0XHRcdHNsaWRlci5hbmltYXRlKCB7IHRvcDogdk9mZnNldCArICdweCcsICdvcGFjaXR5JzogMCB9LFxyXG5cdFx0XHRcdFx0XHRcdFx0MzAwLFxyXG5cdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkdGhpcy5jbG9zZVNsaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0c2xpZGVyLmFuaW1hdGUoIHsgdG9wOiAwLCAnb3BhY2l0eSc6IDEgfSwgMzAwICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBoU3dpcGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRoU3dpcGUgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHN3aXBlTGVmdFxyXG5cdFx0XHRcdFx0XHRpZiggaERpc3RhbmNlID49IGhTd2lwTWluRGlzdGFuY2UgJiYgaERpc3RhbmNlID49IGhEaXN0YW5jZUxhc3QpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0JHRoaXMuZ2V0UHJldigpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gc3dpcGVSaWdodFxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBoRGlzdGFuY2UgPD0gLWhTd2lwTWluRGlzdGFuY2UgJiYgaERpc3RhbmNlIDw9IGhEaXN0YW5jZUxhc3QpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0JHRoaXMuZ2V0TmV4dCgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHsgLy8gVG9wIGFuZCBib3R0b20gYmFycyBoYXZlIGJlZW4gcmVtb3ZlZCBvbiB0b3VjaGFibGUgZGV2aWNlc1xyXG5cdFx0XHRcdFx0XHQvLyB0YXBcclxuXHRcdFx0XHRcdFx0aWYgKCAhIGJhcnMuaGFzQ2xhc3MoICd2aXNpYmxlLWJhcnMnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0JHRoaXMuc2hvd0JhcnMoKTtcclxuXHRcdFx0XHRcdFx0XHQkdGhpcy5zZXRUaW1lb3V0KCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0JHRoaXMuY2xlYXJUaW1lb3V0KCk7XHJcblx0XHRcdFx0XHRcdFx0JHRoaXMuaGlkZUJhcnMoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCQoICcjc3dpcGVib3gtc2xpZGVyJyApLmNzcygge1xyXG5cdFx0XHRcdFx0XHQnLXdlYmtpdC10cmFuc2Zvcm0nIDogJ3RyYW5zbGF0ZTNkKCcgKyBjdXJyZW50WCArICclLCAwLCAwKScsXHJcblx0XHRcdFx0XHRcdCd0cmFuc2Zvcm0nIDogJ3RyYW5zbGF0ZTNkKCcgKyBjdXJyZW50WCArICclLCAwLCAwKSdcclxuXHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LW92ZXJsYXknICkucmVtb3ZlQ2xhc3MoICdsZWZ0U3ByaW5nVG91Y2gnICkucmVtb3ZlQ2xhc3MoICdyaWdodFNwcmluZ1RvdWNoJyApO1xyXG5cdFx0XHRcdFx0JCggJy50b3VjaGluZycgKS5vZmYoICd0b3VjaG1vdmUnICkucmVtb3ZlQ2xhc3MoICd0b3VjaGluZycgKTtcclxuXHJcblx0XHRcdFx0fSApO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNldCB0aW1lciB0byBoaWRlIHRoZSBhY3Rpb24gYmFyc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0VGltZW91dDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGlmICggcGx1Z2luLnNldHRpbmdzLmhpZGVCYXJzRGVsYXkgPiAwICkge1xyXG5cdFx0XHRcdFx0dmFyICR0aGlzID0gdGhpcztcclxuXHRcdFx0XHRcdCR0aGlzLmNsZWFyVGltZW91dCgpO1xyXG5cdFx0XHRcdFx0JHRoaXMudGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHQkdGhpcy5oaWRlQmFycygpO1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRcdFx0cGx1Z2luLnNldHRpbmdzLmhpZGVCYXJzRGVsYXlcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIENsZWFyIHRpbWVyXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVvdXQgKTtcclxuXHRcdFx0XHR0aGlzLnRpbWVvdXQgPSBudWxsO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNob3cgbmF2aWdhdGlvbiBhbmQgdGl0bGUgYmFyc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2hvd0JhcnMgOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dmFyIGJhcnMgPSAkKCAnI3N3aXBlYm94LXRvcC1iYXIsICNzd2lwZWJveC1ib3R0b20tYmFyJyApO1xyXG5cdFx0XHRcdGlmICggdGhpcy5kb0Nzc1RyYW5zKCkgKSB7XHJcblx0XHRcdFx0XHRiYXJzLmFkZENsYXNzKCAndmlzaWJsZS1iYXJzJyApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LXRvcC1iYXInICkuYW5pbWF0ZSggeyB0b3AgOiAwIH0sIDUwMCApO1xyXG5cdFx0XHRcdFx0JCggJyNzd2lwZWJveC1ib3R0b20tYmFyJyApLmFuaW1hdGUoIHsgYm90dG9tIDogMCB9LCA1MDAgKTtcclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRiYXJzLmFkZENsYXNzKCAndmlzaWJsZS1iYXJzJyApO1xyXG5cdFx0XHRcdFx0fSwgMTAwMCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBIaWRlIG5hdmlnYXRpb24gYW5kIHRpdGxlIGJhcnNcclxuXHRcdFx0ICovXHJcblx0XHRcdGhpZGVCYXJzIDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHZhciBiYXJzID0gJCggJyNzd2lwZWJveC10b3AtYmFyLCAjc3dpcGVib3gtYm90dG9tLWJhcicgKTtcclxuXHRcdFx0XHRpZiAoIHRoaXMuZG9Dc3NUcmFucygpICkge1xyXG5cdFx0XHRcdFx0YmFycy5yZW1vdmVDbGFzcyggJ3Zpc2libGUtYmFycycgKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0JCggJyNzd2lwZWJveC10b3AtYmFyJyApLmFuaW1hdGUoIHsgdG9wIDogJy01MHB4JyB9LCA1MDAgKTtcclxuXHRcdFx0XHRcdCQoICcjc3dpcGVib3gtYm90dG9tLWJhcicgKS5hbmltYXRlKCB7IGJvdHRvbSA6ICctNTBweCcgfSwgNTAwICk7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0YmFycy5yZW1vdmVDbGFzcyggJ3Zpc2libGUtYmFycycgKTtcclxuXHRcdFx0XHRcdH0sIDEwMDAgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQW5pbWF0ZSBuYXZpZ2F0aW9uIGFuZCB0b3AgYmFyc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0YW5pbUJhcnMgOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dmFyICR0aGlzID0gdGhpcyxcclxuXHRcdFx0XHRcdGJhcnMgPSAkKCAnI3N3aXBlYm94LXRvcC1iYXIsICNzd2lwZWJveC1ib3R0b20tYmFyJyApO1xyXG5cclxuXHRcdFx0XHRiYXJzLmFkZENsYXNzKCAndmlzaWJsZS1iYXJzJyApO1xyXG5cdFx0XHRcdCR0aGlzLnNldFRpbWVvdXQoKTtcclxuXHJcblx0XHRcdFx0JCggJyNzd2lwZWJveC1zbGlkZXInICkuY2xpY2soIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKCAhIGJhcnMuaGFzQ2xhc3MoICd2aXNpYmxlLWJhcnMnICkgKSB7XHJcblx0XHRcdFx0XHRcdCR0aGlzLnNob3dCYXJzKCk7XHJcblx0XHRcdFx0XHRcdCR0aGlzLnNldFRpbWVvdXQoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ICk7XHJcblxyXG5cdFx0XHRcdCQoICcjc3dpcGVib3gtYm90dG9tLWJhcicgKS5ob3ZlciggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQkdGhpcy5zaG93QmFycygpO1xyXG5cdFx0XHRcdFx0YmFycy5hZGRDbGFzcyggJ3Zpc2libGUtYmFycycgKTtcclxuXHRcdFx0XHRcdCR0aGlzLmNsZWFyVGltZW91dCgpO1xyXG5cclxuXHRcdFx0XHR9LCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGlmICggcGx1Z2luLnNldHRpbmdzLmhpZGVCYXJzRGVsYXkgPiAwICkge1xyXG5cdFx0XHRcdFx0XHRiYXJzLnJlbW92ZUNsYXNzKCAndmlzaWJsZS1iYXJzJyApO1xyXG5cdFx0XHRcdFx0XHQkdGhpcy5zZXRUaW1lb3V0KCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBLZXlib2FyZCBuYXZpZ2F0aW9uXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRrZXlib2FyZCA6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR2YXIgJHRoaXMgPSB0aGlzO1xyXG5cdFx0XHRcdCQoIHdpbmRvdyApLmJpbmQoICdrZXl1cCcsIGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGV2ZW50LmtleUNvZGUgPT09IDM3ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0JHRoaXMuZ2V0UHJldigpO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGV2ZW50LmtleUNvZGUgPT09IDM5ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0JHRoaXMuZ2V0TmV4dCgpO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGV2ZW50LmtleUNvZGUgPT09IDI3ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0JHRoaXMuY2xvc2VTbGlkZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBOYXZpZ2F0aW9uIGV2ZW50cyA6IGdvIHRvIG5leHQgc2xpZGUsIGdvIHRvIHByZXZvdXMgc2xpZGUgYW5kIGNsb3NlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRhY3Rpb25zIDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHZhciAkdGhpcyA9IHRoaXMsXHJcblx0XHRcdFx0XHRhY3Rpb24gPSAndG91Y2hlbmQgY2xpY2snOyAvLyBKdXN0IGRldGVjdCBmb3IgYm90aCBldmVudCB0eXBlcyB0byBhbGxvdyBmb3IgbXVsdGktaW5wdXRcclxuXHJcblx0XHRcdFx0aWYgKCBlbGVtZW50cy5sZW5ndGggPCAyICkge1xyXG5cclxuXHRcdFx0XHRcdCQoICcjc3dpcGVib3gtYm90dG9tLWJhcicgKS5oaWRlKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB1bmRlZmluZWQgPT09IGVsZW1lbnRzWyAxIF0gKSB7XHJcblx0XHRcdFx0XHRcdCQoICcjc3dpcGVib3gtdG9wLWJhcicgKS5oaWRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LXByZXYnICkuYmluZCggYWN0aW9uLCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRcdFx0XHQkdGhpcy5nZXRQcmV2KCk7XHJcblx0XHRcdFx0XHRcdCR0aGlzLnNldFRpbWVvdXQoKTtcclxuXHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LW5leHQnICkuYmluZCggYWN0aW9uLCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRcdFx0XHQkdGhpcy5nZXROZXh0KCk7XHJcblx0XHRcdFx0XHRcdCR0aGlzLnNldFRpbWVvdXQoKTtcclxuXHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdCQoICcjc3dpcGVib3gtY2xvc2UnICkuYmluZCggYWN0aW9uLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdCR0aGlzLmNsb3NlU2xpZGUoKTtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGN1cnJlbnQgc2xpZGVcclxuXHRcdFx0ICovXHJcblx0XHRcdHNldFNsaWRlIDogZnVuY3Rpb24gKCBpbmRleCwgaXNGaXJzdCApIHtcclxuXHJcblx0XHRcdFx0aXNGaXJzdCA9IGlzRmlyc3QgfHwgZmFsc2U7XHJcblxyXG5cdFx0XHRcdHZhciBzbGlkZXIgPSAkKCAnI3N3aXBlYm94LXNsaWRlcicgKTtcclxuXHJcblx0XHRcdFx0Y3VycmVudFggPSAtaW5kZXgqMTAwO1xyXG5cclxuXHRcdFx0XHRpZiAoIHRoaXMuZG9Dc3NUcmFucygpICkge1xyXG5cdFx0XHRcdFx0c2xpZGVyLmNzcygge1xyXG5cdFx0XHRcdFx0XHQnLXdlYmtpdC10cmFuc2Zvcm0nIDogJ3RyYW5zbGF0ZTNkKCcgKyAoLWluZGV4KjEwMCkrJyUsIDAsIDApJyxcclxuXHRcdFx0XHRcdFx0J3RyYW5zZm9ybScgOiAndHJhbnNsYXRlM2QoJyArICgtaW5kZXgqMTAwKSsnJSwgMCwgMCknXHJcblx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHNsaWRlci5hbmltYXRlKCB7IGxlZnQgOiAoIC1pbmRleCoxMDAgKSsnJScgfSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JCggJyNzd2lwZWJveC1zbGlkZXIgLnNsaWRlJyApLnJlbW92ZUNsYXNzKCAnY3VycmVudCcgKTtcclxuXHRcdFx0XHQkKCAnI3N3aXBlYm94LXNsaWRlciAuc2xpZGUnICkuZXEoIGluZGV4ICkuYWRkQ2xhc3MoICdjdXJyZW50JyApO1xyXG5cdFx0XHRcdHRoaXMuc2V0VGl0bGUoIGluZGV4ICk7XHJcblxyXG5cdFx0XHRcdGlmICggaXNGaXJzdCApIHtcclxuXHRcdFx0XHRcdHNsaWRlci5mYWRlSW4oKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdCQoICcjc3dpcGVib3gtcHJldiwgI3N3aXBlYm94LW5leHQnICkucmVtb3ZlQ2xhc3MoICdkaXNhYmxlZCcgKTtcclxuXHJcblx0XHRcdFx0aWYgKCBpbmRleCA9PT0gMCApIHtcclxuXHRcdFx0XHRcdCQoICcjc3dpcGVib3gtcHJldicgKS5hZGRDbGFzcyggJ2Rpc2FibGVkJyApO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGluZGV4ID09PSBlbGVtZW50cy5sZW5ndGggLSAxICYmIHBsdWdpbi5zZXR0aW5ncy5sb29wQXRFbmQgIT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LW5leHQnICkuYWRkQ2xhc3MoICdkaXNhYmxlZCcgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogT3BlbiBzbGlkZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0b3BlblNsaWRlIDogZnVuY3Rpb24gKCBpbmRleCApIHtcclxuXHRcdFx0XHQkKCAnaHRtbCcgKS5hZGRDbGFzcyggJ3N3aXBlYm94LWh0bWwnICk7XHJcblx0XHRcdFx0aWYgKCBpc1RvdWNoICkge1xyXG5cdFx0XHRcdFx0JCggJ2h0bWwnICkuYWRkQ2xhc3MoICdzd2lwZWJveC10b3VjaCcgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHBsdWdpbi5zZXR0aW5ncy5oaWRlQ2xvc2VCdXR0b25Pbk1vYmlsZSApIHtcclxuXHRcdFx0XHRcdFx0JCggJ2h0bWwnICkuYWRkQ2xhc3MoICdzd2lwZWJveC1uby1jbG9zZS1idXR0b24nICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCQoICdodG1sJyApLmFkZENsYXNzKCAnc3dpcGVib3gtbm8tdG91Y2gnICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdCQoIHdpbmRvdyApLnRyaWdnZXIoICdyZXNpemUnICk7IC8vIGZpeCBzY3JvbGwgYmFyIHZpc2liaWxpdHkgb24gZGVza3RvcFxyXG5cdFx0XHRcdHRoaXMuc2V0U2xpZGUoIGluZGV4LCB0cnVlICk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGEgdGltZSBvdXQgaWYgdGhlIG1lZGlhIGlzIGEgdmlkZW9cclxuXHRcdFx0ICovXHJcblx0XHRcdHByZWxvYWRNZWRpYSA6IGZ1bmN0aW9uICggaW5kZXggKSB7XHJcblx0XHRcdFx0dmFyICR0aGlzID0gdGhpcyxcclxuXHRcdFx0XHRcdHNyYyA9IG51bGw7XHJcblxyXG5cdFx0XHRcdGlmICggZWxlbWVudHNbIGluZGV4IF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHNyYyA9IGVsZW1lbnRzWyBpbmRleCBdLmhyZWY7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoICEgJHRoaXMuaXNWaWRlbyggc3JjICkgKSB7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0JHRoaXMub3Blbk1lZGlhKCBpbmRleCApO1xyXG5cdFx0XHRcdFx0fSwgMTAwMCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCR0aGlzLm9wZW5NZWRpYSggaW5kZXggKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogT3BlblxyXG5cdFx0XHQgKi9cclxuXHRcdFx0b3Blbk1lZGlhIDogZnVuY3Rpb24gKCBpbmRleCApIHtcclxuXHRcdFx0XHR2YXIgJHRoaXMgPSB0aGlzLFxyXG5cdFx0XHRcdFx0c3JjLFxyXG5cdFx0XHRcdFx0c2xpZGU7XHJcblxyXG5cdFx0XHRcdGlmICggZWxlbWVudHNbIGluZGV4IF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHNyYyA9IGVsZW1lbnRzWyBpbmRleCBdLmhyZWY7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCB8fCBpbmRleCA+PSBlbGVtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRzbGlkZSA9ICQoICcjc3dpcGVib3gtc2xpZGVyIC5zbGlkZScgKS5lcSggaW5kZXggKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhICR0aGlzLmlzVmlkZW8oIHNyYyApICkge1xyXG5cdFx0XHRcdFx0c2xpZGUuYWRkQ2xhc3MoICdzbGlkZS1sb2FkaW5nJyApO1xyXG5cdFx0XHRcdFx0JHRoaXMubG9hZE1lZGlhKCBzcmMsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRzbGlkZS5yZW1vdmVDbGFzcyggJ3NsaWRlLWxvYWRpbmcnICk7XHJcblx0XHRcdFx0XHRcdHNsaWRlLmh0bWwoIHRoaXMgKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggcGx1Z2luLnNldHRpbmdzLmFmdGVyTWVkaWEgKSB7XHJcblx0XHRcdFx0XHRcdFx0cGx1Z2luLnNldHRpbmdzLmFmdGVyTWVkaWEoIGluZGV4ICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c2xpZGUuaHRtbCggJHRoaXMuZ2V0VmlkZW8oIHNyYyApICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBwbHVnaW4uc2V0dGluZ3MuYWZ0ZXJNZWRpYSApIHtcclxuXHRcdFx0XHRcdFx0cGx1Z2luLnNldHRpbmdzLmFmdGVyTWVkaWEoIGluZGV4ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXQgbGluayB0aXRsZSBhdHRyaWJ1dGUgYXMgY2FwdGlvblxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0VGl0bGUgOiBmdW5jdGlvbiAoIGluZGV4ICkge1xyXG5cdFx0XHRcdHZhciB0aXRsZSA9IG51bGw7XHJcblxyXG5cdFx0XHRcdCQoICcjc3dpcGVib3gtdGl0bGUnICkuZW1wdHkoKTtcclxuXHJcblx0XHRcdFx0aWYgKCBlbGVtZW50c1sgaW5kZXggXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0dGl0bGUgPSBlbGVtZW50c1sgaW5kZXggXS50aXRsZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggdGl0bGUgKSB7XHJcblx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LXRvcC1iYXInICkuc2hvdygpO1xyXG5cdFx0XHRcdFx0JCggJyNzd2lwZWJveC10aXRsZScgKS5hcHBlbmQoIHRpdGxlICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCQoICcjc3dpcGVib3gtdG9wLWJhcicgKS5oaWRlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIENoZWNrIGlmIHRoZSBVUkwgaXMgYSB2aWRlb1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0aXNWaWRlbyA6IGZ1bmN0aW9uICggc3JjICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIHNyYyApIHtcclxuXHRcdFx0XHRcdGlmICggc3JjLm1hdGNoKCAvKHlvdXR1YmVcXC5jb218eW91dHViZS1ub2Nvb2tpZVxcLmNvbSlcXC93YXRjaFxcP3Y9KFthLXpBLVowLTlcXC1fXSspLykgfHwgc3JjLm1hdGNoKCAvdmltZW9cXC5jb21cXC8oWzAtOV0qKS8gKSB8fCBzcmMubWF0Y2goIC95b3V0dVxcLmJlXFwvKFthLXpBLVowLTlcXC1fXSspLyApICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIHNyYy50b0xvd2VyQ2FzZSgpLmluZGV4T2YoICdzd2lwZWJveHZpZGVvPTEnICkgPj0gMCApIHtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogUGFyc2UgVVJJIHF1ZXJ5c3RyaW5nIGFuZDpcclxuXHRcdFx0ICogLSBvdmVycmlkZXMgdmFsdWUgcHJvdmlkZWQgdmlhIGRpY3Rpb25hcnlcclxuXHRcdFx0ICogLSByZWJ1aWxkIGl0IGFnYWluIHJldHVybmluZyBhIHN0cmluZ1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0cGFyc2VVcmkgOiBmdW5jdGlvbiAodXJpLCBjdXN0b21EYXRhKSB7XHJcblx0XHRcdFx0dmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyksXHJcblx0XHRcdFx0XHRxcyA9IHt9O1xyXG5cclxuXHRcdFx0XHQvLyBEZWNvZGUgdGhlIFVSSVxyXG5cdFx0XHRcdGEuaHJlZiA9IGRlY29kZVVSSUNvbXBvbmVudCggdXJpICk7XHJcblxyXG5cdFx0XHRcdC8vIFF1ZXJ5U3RyaW5nIHRvIE9iamVjdFxyXG5cdFx0XHRcdGlmICggYS5zZWFyY2ggKSB7XHJcblx0XHRcdFx0XHRxcyA9IEpTT04ucGFyc2UoICd7XCInICsgYS5zZWFyY2gudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCc/JywnJykucmVwbGFjZSgvJi9nLCdcIixcIicpLnJlcGxhY2UoLz0vZywnXCI6XCInKSArICdcIn0nICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBFeHRlbmQgd2l0aCBjdXN0b20gZGF0YVxyXG5cdFx0XHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCBjdXN0b21EYXRhICkgKSB7XHJcblx0XHRcdFx0XHRxcyA9ICQuZXh0ZW5kKCBxcywgY3VzdG9tRGF0YSwgcGx1Z2luLnNldHRpbmdzLnF1ZXJ5U3RyaW5nRGF0YSApOyAvLyBUaGUgZGV2IGhhcyBhbHdheXMgdGhlIGZpbmFsIHdvcmRcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJldHVybiBxdWVyeXN0cmluZyBhcyBhIHN0cmluZ1xyXG5cdFx0XHRcdHJldHVybiAkXHJcblx0XHRcdFx0XHQubWFwKCBxcywgZnVuY3Rpb24gKHZhbCwga2V5KSB7XHJcblx0XHRcdFx0XHRcdGlmICggdmFsICYmIHZhbCA+ICcnICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWwgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdC5qb2luKCcmJyk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHZpZGVvIGlmcmFtZSBjb2RlIGZyb20gVVJMXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRWaWRlbyA6IGZ1bmN0aW9uKCB1cmwgKSB7XHJcblx0XHRcdFx0dmFyIGlmcmFtZSA9ICcnLFxyXG5cdFx0XHRcdFx0eW91dHViZVVybCA9IHVybC5tYXRjaCggLygoPzp3d3dcXC4pP3lvdXR1YmVcXC5jb218KD86d3d3XFwuKT95b3V0dWJlLW5vY29va2llXFwuY29tKVxcL3dhdGNoXFw/dj0oW2EtekEtWjAtOVxcLV9dKykvICksXHJcblx0XHRcdFx0XHR5b3V0dWJlU2hvcnRVcmwgPSB1cmwubWF0Y2goLyg/Ond3d1xcLik/eW91dHVcXC5iZVxcLyhbYS16QS1aMC05XFwtX10rKS8pLFxyXG5cdFx0XHRcdFx0dmltZW9VcmwgPSB1cmwubWF0Y2goIC8oPzp3d3dcXC4pP3ZpbWVvXFwuY29tXFwvKFswLTldKikvICksXHJcblx0XHRcdFx0XHRxcyA9ICcnO1xyXG5cdFx0XHRcdGlmICggeW91dHViZVVybCB8fCB5b3V0dWJlU2hvcnRVcmwpIHtcclxuXHRcdFx0XHRcdGlmICggeW91dHViZVNob3J0VXJsICkge1xyXG5cdFx0XHRcdFx0XHR5b3V0dWJlVXJsID0geW91dHViZVNob3J0VXJsO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cXMgPSB1aS5wYXJzZVVyaSggdXJsLCB7XHJcblx0XHRcdFx0XHRcdCdhdXRvcGxheScgOiAoIHBsdWdpbi5zZXR0aW5ncy5hdXRvcGxheVZpZGVvcyA/ICcxJyA6ICcwJyApLFxyXG5cdFx0XHRcdFx0XHQndicgOiAnJ1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRpZnJhbWUgPSAnPGlmcmFtZSB3aWR0aD1cIjU2MFwiIGhlaWdodD1cIjMxNVwiIHNyYz1cIi8vJyArIHlvdXR1YmVVcmxbMV0gKyAnL2VtYmVkLycgKyB5b3V0dWJlVXJsWzJdICsgJz8nICsgcXMgKyAnXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHZpbWVvVXJsICkge1xyXG5cdFx0XHRcdFx0cXMgPSB1aS5wYXJzZVVyaSggdXJsLCB7XHJcblx0XHRcdFx0XHRcdCdhdXRvcGxheScgOiAoIHBsdWdpbi5zZXR0aW5ncy5hdXRvcGxheVZpZGVvcyA/ICcxJyA6ICcwJyApLFxyXG5cdFx0XHRcdFx0XHQnYnlsaW5lJyA6ICcwJyxcclxuXHRcdFx0XHRcdFx0J3BvcnRyYWl0JyA6ICcwJyxcclxuXHRcdFx0XHRcdFx0J2NvbG9yJzogcGx1Z2luLnNldHRpbmdzLnZpbWVvQ29sb3JcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0aWZyYW1lID0gJzxpZnJhbWUgd2lkdGg9XCI1NjBcIiBoZWlnaHQ9XCIzMTVcIiAgc3JjPVwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLycgKyB2aW1lb1VybFsxXSArICc/JyArIHFzICsgJ1wiIGZyYW1lYm9yZGVyPVwiMFwiIHdlYmtpdEFsbG93RnVsbFNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gYWxsb3dGdWxsU2NyZWVuPjwvaWZyYW1lPic7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZnJhbWUgPSAnPGlmcmFtZSB3aWR0aD1cIjU2MFwiIGhlaWdodD1cIjMxNVwiIHNyYz1cIicgKyB1cmwgKyAnXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gJzxkaXYgY2xhc3M9XCJzd2lwZWJveC12aWRlby1jb250YWluZXJcIiBzdHlsZT1cIm1heC13aWR0aDonICsgcGx1Z2luLnNldHRpbmdzLnZpZGVvTWF4V2lkdGggKyAncHhcIj48ZGl2IGNsYXNzPVwic3dpcGVib3gtdmlkZW9cIj4nICsgaWZyYW1lICsgJzwvZGl2PjwvZGl2Pic7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogTG9hZCBpbWFnZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0bG9hZE1lZGlhIDogZnVuY3Rpb24gKCBzcmMsIGNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5saW5lIGNvbnRlbnRcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggc3JjLnRyaW0oKS5pbmRleE9mKCcjJykgPT09IDAgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2suY2FsbChcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQoJzxkaXY+Jywge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQnY2xhc3MnIDogJ3N3aXBlYm94LWlubGluZS1jb250YWluZXInXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZChcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JChzcmMpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5jbG9uZSgpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC50b2dnbGVDbGFzcyggcGx1Z2luLnNldHRpbmdzLnRvZ2dsZUNsYXNzT25Mb2FkIClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRXZlcnl0aGluZyBlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAhIHRoaXMuaXNWaWRlbyggc3JjICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGltZyA9ICQoICc8aW1nPicgKS5vbiggJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGltZyApO1xyXG5cdFx0XHRcdFx0XHRcdH0gKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0aW1nLmF0dHIoICdzcmMnLCBzcmMgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCBuZXh0IHNsaWRlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXROZXh0IDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHZhciAkdGhpcyA9IHRoaXMsXHJcblx0XHRcdFx0XHRzcmMsXHJcblx0XHRcdFx0XHRpbmRleCA9ICQoICcjc3dpcGVib3gtc2xpZGVyIC5zbGlkZScgKS5pbmRleCggJCggJyNzd2lwZWJveC1zbGlkZXIgLnNsaWRlLmN1cnJlbnQnICkgKTtcclxuXHRcdFx0XHRpZiAoIGluZGV4ICsgMSA8IGVsZW1lbnRzLmxlbmd0aCApIHtcclxuXHJcblx0XHRcdFx0XHRzcmMgPSAkKCAnI3N3aXBlYm94LXNsaWRlciAuc2xpZGUnICkuZXEoIGluZGV4ICkuY29udGVudHMoKS5maW5kKCAnaWZyYW1lJyApLmF0dHIoICdzcmMnICk7XHJcblx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LXNsaWRlciAuc2xpZGUnICkuZXEoIGluZGV4ICkuY29udGVudHMoKS5maW5kKCAnaWZyYW1lJyApLmF0dHIoICdzcmMnLCBzcmMgKTtcclxuXHRcdFx0XHRcdGluZGV4Kys7XHJcblx0XHRcdFx0XHQkdGhpcy5zZXRTbGlkZSggaW5kZXggKTtcclxuXHRcdFx0XHRcdCR0aGlzLnByZWxvYWRNZWRpYSggaW5kZXgrMSApO1xyXG5cdFx0XHRcdFx0aWYgKCBwbHVnaW4uc2V0dGluZ3MubmV4dFNsaWRlICkge1xyXG5cdFx0XHRcdFx0XHRwbHVnaW4uc2V0dGluZ3MubmV4dFNsaWRlKGluZGV4KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGlmICggcGx1Z2luLnNldHRpbmdzLmxvb3BBdEVuZCA9PT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0c3JjID0gJCggJyNzd2lwZWJveC1zbGlkZXIgLnNsaWRlJyApLmVxKCBpbmRleCApLmNvbnRlbnRzKCkuZmluZCggJ2lmcmFtZScgKS5hdHRyKCAnc3JjJyApO1xyXG5cdFx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LXNsaWRlciAuc2xpZGUnICkuZXEoIGluZGV4ICkuY29udGVudHMoKS5maW5kKCAnaWZyYW1lJyApLmF0dHIoICdzcmMnLCBzcmMgKTtcclxuXHRcdFx0XHRcdFx0aW5kZXggPSAwO1xyXG5cdFx0XHRcdFx0XHQkdGhpcy5wcmVsb2FkTWVkaWEoIGluZGV4ICk7XHJcblx0XHRcdFx0XHRcdCR0aGlzLnNldFNsaWRlKCBpbmRleCApO1xyXG5cdFx0XHRcdFx0XHQkdGhpcy5wcmVsb2FkTWVkaWEoIGluZGV4ICsgMSApO1xyXG5cdFx0XHRcdFx0XHRpZiAoIHBsdWdpbi5zZXR0aW5ncy5uZXh0U2xpZGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0cGx1Z2luLnNldHRpbmdzLm5leHRTbGlkZShpbmRleCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdCQoICcjc3dpcGVib3gtb3ZlcmxheScgKS5hZGRDbGFzcyggJ3JpZ2h0U3ByaW5nJyApO1xyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LW92ZXJsYXknICkucmVtb3ZlQ2xhc3MoICdyaWdodFNwcmluZycgKTtcclxuXHRcdFx0XHRcdFx0fSwgNTAwICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCBwcmV2aW91cyBzbGlkZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0UHJldiA6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR2YXIgaW5kZXggPSAkKCAnI3N3aXBlYm94LXNsaWRlciAuc2xpZGUnICkuaW5kZXgoICQoICcjc3dpcGVib3gtc2xpZGVyIC5zbGlkZS5jdXJyZW50JyApICksXHJcblx0XHRcdFx0XHRzcmM7XHJcblx0XHRcdFx0aWYgKCBpbmRleCA+IDAgKSB7XHJcblx0XHRcdFx0XHRzcmMgPSAkKCAnI3N3aXBlYm94LXNsaWRlciAuc2xpZGUnICkuZXEoIGluZGV4ICkuY29udGVudHMoKS5maW5kKCAnaWZyYW1lJykuYXR0ciggJ3NyYycgKTtcclxuXHRcdFx0XHRcdCQoICcjc3dpcGVib3gtc2xpZGVyIC5zbGlkZScgKS5lcSggaW5kZXggKS5jb250ZW50cygpLmZpbmQoICdpZnJhbWUnICkuYXR0ciggJ3NyYycsIHNyYyApO1xyXG5cdFx0XHRcdFx0aW5kZXgtLTtcclxuXHRcdFx0XHRcdHRoaXMuc2V0U2xpZGUoIGluZGV4ICk7XHJcblx0XHRcdFx0XHR0aGlzLnByZWxvYWRNZWRpYSggaW5kZXgtMSApO1xyXG5cdFx0XHRcdFx0aWYgKCBwbHVnaW4uc2V0dGluZ3MucHJldlNsaWRlICkge1xyXG5cdFx0XHRcdFx0XHRwbHVnaW4uc2V0dGluZ3MucHJldlNsaWRlKGluZGV4KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0JCggJyNzd2lwZWJveC1vdmVybGF5JyApLmFkZENsYXNzKCAnbGVmdFNwcmluZycgKTtcclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHQkKCAnI3N3aXBlYm94LW92ZXJsYXknICkucmVtb3ZlQ2xhc3MoICdsZWZ0U3ByaW5nJyApO1xyXG5cdFx0XHRcdFx0fSwgNTAwICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHQvKiBqc2hpbnQgdW51c2VkOmZhbHNlICovXHJcblx0XHRcdG5leHRTbGlkZSA6IGZ1bmN0aW9uICggaW5kZXggKSB7XHJcblx0XHRcdFx0Ly8gQ2FsbGJhY2sgZm9yIG5leHQgc2xpZGVcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHByZXZTbGlkZSA6IGZ1bmN0aW9uICggaW5kZXggKSB7XHJcblx0XHRcdFx0Ly8gQ2FsbGJhY2sgZm9yIHByZXYgc2xpZGVcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBDbG9zZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Y2xvc2VTbGlkZSA6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHQkKCAnaHRtbCcgKS5yZW1vdmVDbGFzcyggJ3N3aXBlYm94LWh0bWwnICk7XHJcblx0XHRcdFx0JCggJ2h0bWwnICkucmVtb3ZlQ2xhc3MoICdzd2lwZWJveC10b3VjaCcgKTtcclxuXHRcdFx0XHQkKCB3aW5kb3cgKS50cmlnZ2VyKCAncmVzaXplJyApO1xyXG5cdFx0XHRcdHRoaXMuZGVzdHJveSgpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIERlc3Ryb3kgdGhlIHdob2xlIHRoaW5nXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRkZXN0cm95IDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdCQoIHdpbmRvdyApLnVuYmluZCggJ2tleXVwJyApO1xyXG5cdFx0XHRcdCQoICdib2R5JyApLnVuYmluZCggJ3RvdWNoc3RhcnQnICk7XHJcblx0XHRcdFx0JCggJ2JvZHknICkudW5iaW5kKCAndG91Y2htb3ZlJyApO1xyXG5cdFx0XHRcdCQoICdib2R5JyApLnVuYmluZCggJ3RvdWNoZW5kJyApO1xyXG5cdFx0XHRcdCQoICcjc3dpcGVib3gtc2xpZGVyJyApLnVuYmluZCgpO1xyXG5cdFx0XHRcdCQoICcjc3dpcGVib3gtb3ZlcmxheScgKS5yZW1vdmUoKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhICQuaXNBcnJheSggZWxlbSApICkge1xyXG5cdFx0XHRcdFx0ZWxlbS5yZW1vdmVEYXRhKCAnX3N3aXBlYm94JyApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCB0aGlzLnRhcmdldCApIHtcclxuXHRcdFx0XHRcdHRoaXMudGFyZ2V0LnRyaWdnZXIoICdzd2lwZWJveC1kZXN0cm95JyApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JC5zd2lwZWJveC5pc09wZW4gPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0aWYgKCBwbHVnaW4uc2V0dGluZ3MuYWZ0ZXJDbG9zZSApIHtcclxuXHRcdFx0XHRcdHBsdWdpbi5zZXR0aW5ncy5hZnRlckNsb3NlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdHBsdWdpbi5pbml0KCk7XHJcblx0fTtcclxuXHJcblx0JC5mbi5zd2lwZWJveCA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG5cclxuXHRcdGlmICggISAkLmRhdGEoIHRoaXMsICdfc3dpcGVib3gnICkgKSB7XHJcblx0XHRcdHZhciBzd2lwZWJveCA9IG5ldyAkLnN3aXBlYm94KCB0aGlzLCBvcHRpb25zICk7XHJcblx0XHRcdHRoaXMuZGF0YSggJ19zd2lwZWJveCcsIHN3aXBlYm94ICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5kYXRhKCAnX3N3aXBlYm94JyApO1xyXG5cclxuXHR9O1xyXG5cclxufSggd2luZG93LCBkb2N1bWVudCwgalF1ZXJ5ICkgKTtcclxuIiwiIWZ1bmN0aW9uKGkpe1widXNlIHN0cmljdFwiO1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wianF1ZXJ5XCJdLGkpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWkocmVxdWlyZShcImpxdWVyeVwiKSk6aShqUXVlcnkpfShmdW5jdGlvbihpKXtcInVzZSBzdHJpY3RcIjt2YXIgZT13aW5kb3cuU2xpY2t8fHt9OyhlPWZ1bmN0aW9uKCl7dmFyIGU9MDtyZXR1cm4gZnVuY3Rpb24odCxvKXt2YXIgcyxuPXRoaXM7bi5kZWZhdWx0cz17YWNjZXNzaWJpbGl0eTohMCxhZGFwdGl2ZUhlaWdodDohMSxhcHBlbmRBcnJvd3M6aSh0KSxhcHBlbmREb3RzOmkodCksYXJyb3dzOiEwLGFzTmF2Rm9yOm51bGwscHJldkFycm93Oic8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsbmV4dEFycm93Oic8YnV0dG9uIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdHlwZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLGF1dG9wbGF5OiExLGF1dG9wbGF5U3BlZWQ6M2UzLGNlbnRlck1vZGU6ITEsY2VudGVyUGFkZGluZzpcIjUwcHhcIixjc3NFYXNlOlwiZWFzZVwiLGN1c3RvbVBhZ2luZzpmdW5jdGlvbihlLHQpe3JldHVybiBpKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAvPicpLnRleHQodCsxKX0sZG90czohMSxkb3RzQ2xhc3M6XCJzbGljay1kb3RzXCIsZHJhZ2dhYmxlOiEwLGVhc2luZzpcImxpbmVhclwiLGVkZ2VGcmljdGlvbjouMzUsZmFkZTohMSxmb2N1c09uU2VsZWN0OiExLGZvY3VzT25DaGFuZ2U6ITEsaW5maW5pdGU6ITAsaW5pdGlhbFNsaWRlOjAsbGF6eUxvYWQ6XCJvbmRlbWFuZFwiLG1vYmlsZUZpcnN0OiExLHBhdXNlT25Ib3ZlcjohMCxwYXVzZU9uRm9jdXM6ITAscGF1c2VPbkRvdHNIb3ZlcjohMSxyZXNwb25kVG86XCJ3aW5kb3dcIixyZXNwb25zaXZlOm51bGwscm93czoxLHJ0bDohMSxzbGlkZTpcIlwiLHNsaWRlc1BlclJvdzoxLHNsaWRlc1RvU2hvdzoxLHNsaWRlc1RvU2Nyb2xsOjEsc3BlZWQ6NTAwLHN3aXBlOiEwLHN3aXBlVG9TbGlkZTohMSx0b3VjaE1vdmU6ITAsdG91Y2hUaHJlc2hvbGQ6NSx1c2VDU1M6ITAsdXNlVHJhbnNmb3JtOiEwLHZhcmlhYmxlV2lkdGg6ITEsdmVydGljYWw6ITEsdmVydGljYWxTd2lwaW5nOiExLHdhaXRGb3JBbmltYXRlOiEwLHpJbmRleDoxZTN9LG4uaW5pdGlhbHM9e2FuaW1hdGluZzohMSxkcmFnZ2luZzohMSxhdXRvUGxheVRpbWVyOm51bGwsY3VycmVudERpcmVjdGlvbjowLGN1cnJlbnRMZWZ0Om51bGwsY3VycmVudFNsaWRlOjAsZGlyZWN0aW9uOjEsJGRvdHM6bnVsbCxsaXN0V2lkdGg6bnVsbCxsaXN0SGVpZ2h0Om51bGwsbG9hZEluZGV4OjAsJG5leHRBcnJvdzpudWxsLCRwcmV2QXJyb3c6bnVsbCxzY3JvbGxpbmc6ITEsc2xpZGVDb3VudDpudWxsLHNsaWRlV2lkdGg6bnVsbCwkc2xpZGVUcmFjazpudWxsLCRzbGlkZXM6bnVsbCxzbGlkaW5nOiExLHNsaWRlT2Zmc2V0OjAsc3dpcGVMZWZ0Om51bGwsc3dpcGluZzohMSwkbGlzdDpudWxsLHRvdWNoT2JqZWN0Ont9LHRyYW5zZm9ybXNFbmFibGVkOiExLHVuc2xpY2tlZDohMX0saS5leHRlbmQobixuLmluaXRpYWxzKSxuLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxuLmFuaW1UeXBlPW51bGwsbi5hbmltUHJvcD1udWxsLG4uYnJlYWtwb2ludHM9W10sbi5icmVha3BvaW50U2V0dGluZ3M9W10sbi5jc3NUcmFuc2l0aW9ucz0hMSxuLmZvY3Vzc2VkPSExLG4uaW50ZXJydXB0ZWQ9ITEsbi5oaWRkZW49XCJoaWRkZW5cIixuLnBhdXNlZD0hMCxuLnBvc2l0aW9uUHJvcD1udWxsLG4ucmVzcG9uZFRvPW51bGwsbi5yb3dDb3VudD0xLG4uc2hvdWxkQ2xpY2s9ITAsbi4kc2xpZGVyPWkodCksbi4kc2xpZGVzQ2FjaGU9bnVsbCxuLnRyYW5zZm9ybVR5cGU9bnVsbCxuLnRyYW5zaXRpb25UeXBlPW51bGwsbi52aXNpYmlsaXR5Q2hhbmdlPVwidmlzaWJpbGl0eWNoYW5nZVwiLG4ud2luZG93V2lkdGg9MCxuLndpbmRvd1RpbWVyPW51bGwscz1pKHQpLmRhdGEoXCJzbGlja1wiKXx8e30sbi5vcHRpb25zPWkuZXh0ZW5kKHt9LG4uZGVmYXVsdHMsbyxzKSxuLmN1cnJlbnRTbGlkZT1uLm9wdGlvbnMuaW5pdGlhbFNsaWRlLG4ub3JpZ2luYWxTZXR0aW5ncz1uLm9wdGlvbnMsdm9pZCAwIT09ZG9jdW1lbnQubW96SGlkZGVuPyhuLmhpZGRlbj1cIm1vekhpZGRlblwiLG4udmlzaWJpbGl0eUNoYW5nZT1cIm1venZpc2liaWxpdHljaGFuZ2VcIik6dm9pZCAwIT09ZG9jdW1lbnQud2Via2l0SGlkZGVuJiYobi5oaWRkZW49XCJ3ZWJraXRIaWRkZW5cIixuLnZpc2liaWxpdHlDaGFuZ2U9XCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCIpLG4uYXV0b1BsYXk9aS5wcm94eShuLmF1dG9QbGF5LG4pLG4uYXV0b1BsYXlDbGVhcj1pLnByb3h5KG4uYXV0b1BsYXlDbGVhcixuKSxuLmF1dG9QbGF5SXRlcmF0b3I9aS5wcm94eShuLmF1dG9QbGF5SXRlcmF0b3Isbiksbi5jaGFuZ2VTbGlkZT1pLnByb3h5KG4uY2hhbmdlU2xpZGUsbiksbi5jbGlja0hhbmRsZXI9aS5wcm94eShuLmNsaWNrSGFuZGxlcixuKSxuLnNlbGVjdEhhbmRsZXI9aS5wcm94eShuLnNlbGVjdEhhbmRsZXIsbiksbi5zZXRQb3NpdGlvbj1pLnByb3h5KG4uc2V0UG9zaXRpb24sbiksbi5zd2lwZUhhbmRsZXI9aS5wcm94eShuLnN3aXBlSGFuZGxlcixuKSxuLmRyYWdIYW5kbGVyPWkucHJveHkobi5kcmFnSGFuZGxlcixuKSxuLmtleUhhbmRsZXI9aS5wcm94eShuLmtleUhhbmRsZXIsbiksbi5pbnN0YW5jZVVpZD1lKyssbi5odG1sRXhwcj0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC8sbi5yZWdpc3RlckJyZWFrcG9pbnRzKCksbi5pbml0KCEwKX19KCkpLnByb3RvdHlwZS5hY3RpdmF0ZUFEQT1mdW5jdGlvbigpe3RoaXMuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1hY3RpdmVcIikuYXR0cih7XCJhcmlhLWhpZGRlblwiOlwiZmFsc2VcIn0pLmZpbmQoXCJhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3RcIikuYXR0cih7dGFiaW5kZXg6XCIwXCJ9KX0sZS5wcm90b3R5cGUuYWRkU2xpZGU9ZS5wcm90b3R5cGUuc2xpY2tBZGQ9ZnVuY3Rpb24oZSx0LG8pe3ZhciBzPXRoaXM7aWYoXCJib29sZWFuXCI9PXR5cGVvZiB0KW89dCx0PW51bGw7ZWxzZSBpZih0PDB8fHQ+PXMuc2xpZGVDb3VudClyZXR1cm4hMTtzLnVubG9hZCgpLFwibnVtYmVyXCI9PXR5cGVvZiB0PzA9PT10JiYwPT09cy4kc2xpZGVzLmxlbmd0aD9pKGUpLmFwcGVuZFRvKHMuJHNsaWRlVHJhY2spOm8/aShlKS5pbnNlcnRCZWZvcmUocy4kc2xpZGVzLmVxKHQpKTppKGUpLmluc2VydEFmdGVyKHMuJHNsaWRlcy5lcSh0KSk6ITA9PT1vP2koZSkucHJlcGVuZFRvKHMuJHNsaWRlVHJhY2spOmkoZSkuYXBwZW5kVG8ocy4kc2xpZGVUcmFjaykscy4kc2xpZGVzPXMuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKSxzLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCkscy4kc2xpZGVUcmFjay5hcHBlbmQocy4kc2xpZGVzKSxzLiRzbGlkZXMuZWFjaChmdW5jdGlvbihlLHQpe2kodCkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixlKX0pLHMuJHNsaWRlc0NhY2hlPXMuJHNsaWRlcyxzLnJlaW5pdCgpfSxlLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpZigxPT09aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmITA9PT1pLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQmJiExPT09aS5vcHRpb25zLnZlcnRpY2FsKXt2YXIgZT1pLiRzbGlkZXMuZXEoaS5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KCEwKTtpLiRsaXN0LmFuaW1hdGUoe2hlaWdodDplfSxpLm9wdGlvbnMuc3BlZWQpfX0sZS5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlPWZ1bmN0aW9uKGUsdCl7dmFyIG89e30scz10aGlzO3MuYW5pbWF0ZUhlaWdodCgpLCEwPT09cy5vcHRpb25zLnJ0bCYmITE9PT1zLm9wdGlvbnMudmVydGljYWwmJihlPS1lKSwhMT09PXMudHJhbnNmb3Jtc0VuYWJsZWQ/ITE9PT1zLm9wdGlvbnMudmVydGljYWw/cy4kc2xpZGVUcmFjay5hbmltYXRlKHtsZWZ0OmV9LHMub3B0aW9ucy5zcGVlZCxzLm9wdGlvbnMuZWFzaW5nLHQpOnMuJHNsaWRlVHJhY2suYW5pbWF0ZSh7dG9wOmV9LHMub3B0aW9ucy5zcGVlZCxzLm9wdGlvbnMuZWFzaW5nLHQpOiExPT09cy5jc3NUcmFuc2l0aW9ucz8oITA9PT1zLm9wdGlvbnMucnRsJiYocy5jdXJyZW50TGVmdD0tcy5jdXJyZW50TGVmdCksaSh7YW5pbVN0YXJ0OnMuY3VycmVudExlZnR9KS5hbmltYXRlKHthbmltU3RhcnQ6ZX0se2R1cmF0aW9uOnMub3B0aW9ucy5zcGVlZCxlYXNpbmc6cy5vcHRpb25zLmVhc2luZyxzdGVwOmZ1bmN0aW9uKGkpe2k9TWF0aC5jZWlsKGkpLCExPT09cy5vcHRpb25zLnZlcnRpY2FsPyhvW3MuYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2krXCJweCwgMHB4KVwiLHMuJHNsaWRlVHJhY2suY3NzKG8pKToob1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZSgwcHgsXCIraStcInB4KVwiLHMuJHNsaWRlVHJhY2suY3NzKG8pKX0sY29tcGxldGU6ZnVuY3Rpb24oKXt0JiZ0LmNhbGwoKX19KSk6KHMuYXBwbHlUcmFuc2l0aW9uKCksZT1NYXRoLmNlaWwoZSksITE9PT1zLm9wdGlvbnMudmVydGljYWw/b1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKFwiK2UrXCJweCwgMHB4LCAwcHgpXCI6b1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKDBweCxcIitlK1wicHgsIDBweClcIixzLiRzbGlkZVRyYWNrLmNzcyhvKSx0JiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cy5kaXNhYmxlVHJhbnNpdGlvbigpLHQuY2FsbCgpfSxzLm9wdGlvbnMuc3BlZWQpKX0sZS5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUub3B0aW9ucy5hc05hdkZvcjtyZXR1cm4gdCYmbnVsbCE9PXQmJih0PWkodCkubm90KGUuJHNsaWRlcikpLHR9LGUucHJvdG90eXBlLmFzTmF2Rm9yPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0TmF2VGFyZ2V0KCk7bnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0LmVhY2goZnVuY3Rpb24oKXt2YXIgdD1pKHRoaXMpLnNsaWNrKFwiZ2V0U2xpY2tcIik7dC51bnNsaWNrZWR8fHQuc2xpZGVIYW5kbGVyKGUsITApfSl9LGUucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbj1mdW5jdGlvbihpKXt2YXIgZT10aGlzLHQ9e307ITE9PT1lLm9wdGlvbnMuZmFkZT90W2UudHJhbnNpdGlvblR5cGVdPWUudHJhbnNmb3JtVHlwZStcIiBcIitlLm9wdGlvbnMuc3BlZWQrXCJtcyBcIitlLm9wdGlvbnMuY3NzRWFzZTp0W2UudHJhbnNpdGlvblR5cGVdPVwib3BhY2l0eSBcIitlLm9wdGlvbnMuc3BlZWQrXCJtcyBcIitlLm9wdGlvbnMuY3NzRWFzZSwhMT09PWUub3B0aW9ucy5mYWRlP2UuJHNsaWRlVHJhY2suY3NzKHQpOmUuJHNsaWRlcy5lcShpKS5jc3ModCl9LGUucHJvdG90eXBlLmF1dG9QbGF5PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmF1dG9QbGF5Q2xlYXIoKSxpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuYXV0b1BsYXlUaW1lcj1zZXRJbnRlcnZhbChpLmF1dG9QbGF5SXRlcmF0b3IsaS5vcHRpb25zLmF1dG9wbGF5U3BlZWQpKX0sZS5wcm90b3R5cGUuYXV0b1BsYXlDbGVhcj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheVRpbWVyJiZjbGVhckludGVydmFsKGkuYXV0b1BsYXlUaW1lcil9LGUucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3I9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9aS5jdXJyZW50U2xpZGUraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO2kucGF1c2VkfHxpLmludGVycnVwdGVkfHxpLmZvY3Vzc2VkfHwoITE9PT1pLm9wdGlvbnMuaW5maW5pdGUmJigxPT09aS5kaXJlY3Rpb24mJmkuY3VycmVudFNsaWRlKzE9PT1pLnNsaWRlQ291bnQtMT9pLmRpcmVjdGlvbj0wOjA9PT1pLmRpcmVjdGlvbiYmKGU9aS5jdXJyZW50U2xpZGUtaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLGkuY3VycmVudFNsaWRlLTE9PTAmJihpLmRpcmVjdGlvbj0xKSkpLGkuc2xpZGVIYW5kbGVyKGUpKX0sZS5wcm90b3R5cGUuYnVpbGRBcnJvd3M9ZnVuY3Rpb24oKXt2YXIgZT10aGlzOyEwPT09ZS5vcHRpb25zLmFycm93cyYmKGUuJHByZXZBcnJvdz1pKGUub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKFwic2xpY2stYXJyb3dcIiksZS4kbmV4dEFycm93PWkoZS5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1hcnJvd1wiKSxlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdz8oZS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiB0YWJpbmRleFwiKSxlLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIHRhYmluZGV4XCIpLGUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMucHJldkFycm93KSYmZS4kcHJldkFycm93LnByZXBlbmRUbyhlLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSxlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLm5leHRBcnJvdykmJmUuJG5leHRBcnJvdy5hcHBlbmRUbyhlLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSwhMCE9PWUub3B0aW9ucy5pbmZpbml0ZSYmZS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIikpOmUuJHByZXZBcnJvdy5hZGQoZS4kbmV4dEFycm93KS5hZGRDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5hdHRyKHtcImFyaWEtZGlzYWJsZWRcIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KSl9LGUucHJvdG90eXBlLmJ1aWxkRG90cz1mdW5jdGlvbigpe3ZhciBlLHQsbz10aGlzO2lmKCEwPT09by5vcHRpb25zLmRvdHMpe2ZvcihvLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1kb3R0ZWRcIiksdD1pKFwiPHVsIC8+XCIpLmFkZENsYXNzKG8ub3B0aW9ucy5kb3RzQ2xhc3MpLGU9MDtlPD1vLmdldERvdENvdW50KCk7ZSs9MSl0LmFwcGVuZChpKFwiPGxpIC8+XCIpLmFwcGVuZChvLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcyxvLGUpKSk7by4kZG90cz10LmFwcGVuZFRvKG8ub3B0aW9ucy5hcHBlbmREb3RzKSxvLiRkb3RzLmZpbmQoXCJsaVwiKS5maXJzdCgpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpfX0sZS5wcm90b3R5cGUuYnVpbGRPdXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlcz1lLiRzbGlkZXIuY2hpbGRyZW4oZS5vcHRpb25zLnNsaWRlK1wiOm5vdCguc2xpY2stY2xvbmVkKVwiKS5hZGRDbGFzcyhcInNsaWNrLXNsaWRlXCIpLGUuc2xpZGVDb3VudD1lLiRzbGlkZXMubGVuZ3RoLGUuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGUsdCl7aSh0KS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLGUpLmRhdGEoXCJvcmlnaW5hbFN0eWxpbmdcIixpKHQpLmF0dHIoXCJzdHlsZVwiKXx8XCJcIil9KSxlLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1zbGlkZXJcIiksZS4kc2xpZGVUcmFjaz0wPT09ZS5zbGlkZUNvdW50P2koJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhlLiRzbGlkZXIpOmUuJHNsaWRlcy53cmFwQWxsKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykucGFyZW50KCksZS4kbGlzdD1lLiRzbGlkZVRyYWNrLndyYXAoJzxkaXYgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpLGUuJHNsaWRlVHJhY2suY3NzKFwib3BhY2l0eVwiLDApLCEwIT09ZS5vcHRpb25zLmNlbnRlck1vZGUmJiEwIT09ZS5vcHRpb25zLnN3aXBlVG9TbGlkZXx8KGUub3B0aW9ucy5zbGlkZXNUb1Njcm9sbD0xKSxpKFwiaW1nW2RhdGEtbGF6eV1cIixlLiRzbGlkZXIpLm5vdChcIltzcmNdXCIpLmFkZENsYXNzKFwic2xpY2stbG9hZGluZ1wiKSxlLnNldHVwSW5maW5pdGUoKSxlLmJ1aWxkQXJyb3dzKCksZS5idWlsZERvdHMoKSxlLnVwZGF0ZURvdHMoKSxlLnNldFNsaWRlQ2xhc3NlcyhcIm51bWJlclwiPT10eXBlb2YgZS5jdXJyZW50U2xpZGU/ZS5jdXJyZW50U2xpZGU6MCksITA9PT1lLm9wdGlvbnMuZHJhZ2dhYmxlJiZlLiRsaXN0LmFkZENsYXNzKFwiZHJhZ2dhYmxlXCIpfSxlLnByb3RvdHlwZS5idWlsZFJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlLHQsbyxzLG4scixsPXRoaXM7aWYobz1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksbj1sLiRzbGlkZXIuY2hpbGRyZW4oKSxsLm9wdGlvbnMucm93cz4xKXtmb3Iocj1sLm9wdGlvbnMuc2xpZGVzUGVyUm93Kmwub3B0aW9ucy5yb3dzLHM9TWF0aC5jZWlsKG4ubGVuZ3RoL3IpLGk9MDtpPHM7aSsrKXt2YXIgZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2ZvcihlPTA7ZTxsLm9wdGlvbnMucm93cztlKyspe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKHQ9MDt0PGwub3B0aW9ucy5zbGlkZXNQZXJSb3c7dCsrKXt2YXIgYz1pKnIrKGUqbC5vcHRpb25zLnNsaWRlc1BlclJvdyt0KTtuLmdldChjKSYmYS5hcHBlbmRDaGlsZChuLmdldChjKSl9ZC5hcHBlbmRDaGlsZChhKX1vLmFwcGVuZENoaWxkKGQpfWwuJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvKSxsLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY3NzKHt3aWR0aDoxMDAvbC5vcHRpb25zLnNsaWRlc1BlclJvdytcIiVcIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9KX19LGUucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZT1mdW5jdGlvbihlLHQpe3ZhciBvLHMsbixyPXRoaXMsbD0hMSxkPXIuJHNsaWRlci53aWR0aCgpLGE9d2luZG93LmlubmVyV2lkdGh8fGkod2luZG93KS53aWR0aCgpO2lmKFwid2luZG93XCI9PT1yLnJlc3BvbmRUbz9uPWE6XCJzbGlkZXJcIj09PXIucmVzcG9uZFRvP249ZDpcIm1pblwiPT09ci5yZXNwb25kVG8mJihuPU1hdGgubWluKGEsZCkpLHIub3B0aW9ucy5yZXNwb25zaXZlJiZyLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgmJm51bGwhPT1yLm9wdGlvbnMucmVzcG9uc2l2ZSl7cz1udWxsO2ZvcihvIGluIHIuYnJlYWtwb2ludHMpci5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShvKSYmKCExPT09ci5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0P248ci5icmVha3BvaW50c1tvXSYmKHM9ci5icmVha3BvaW50c1tvXSk6bj5yLmJyZWFrcG9pbnRzW29dJiYocz1yLmJyZWFrcG9pbnRzW29dKSk7bnVsbCE9PXM/bnVsbCE9PXIuYWN0aXZlQnJlYWtwb2ludD8ocyE9PXIuYWN0aXZlQnJlYWtwb2ludHx8dCkmJihyLmFjdGl2ZUJyZWFrcG9pbnQ9cyxcInVuc2xpY2tcIj09PXIuYnJlYWtwb2ludFNldHRpbmdzW3NdP3IudW5zbGljayhzKTooci5vcHRpb25zPWkuZXh0ZW5kKHt9LHIub3JpZ2luYWxTZXR0aW5ncyxyLmJyZWFrcG9pbnRTZXR0aW5nc1tzXSksITA9PT1lJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKGUpKSxsPXMpOihyLmFjdGl2ZUJyZWFrcG9pbnQ9cyxcInVuc2xpY2tcIj09PXIuYnJlYWtwb2ludFNldHRpbmdzW3NdP3IudW5zbGljayhzKTooci5vcHRpb25zPWkuZXh0ZW5kKHt9LHIub3JpZ2luYWxTZXR0aW5ncyxyLmJyZWFrcG9pbnRTZXR0aW5nc1tzXSksITA9PT1lJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKGUpKSxsPXMpOm51bGwhPT1yLmFjdGl2ZUJyZWFrcG9pbnQmJihyLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxyLm9wdGlvbnM9ci5vcmlnaW5hbFNldHRpbmdzLCEwPT09ZSYmKHIuY3VycmVudFNsaWRlPXIub3B0aW9ucy5pbml0aWFsU2xpZGUpLHIucmVmcmVzaChlKSxsPXMpLGV8fCExPT09bHx8ci4kc2xpZGVyLnRyaWdnZXIoXCJicmVha3BvaW50XCIsW3IsbF0pfX0sZS5wcm90b3R5cGUuY2hhbmdlU2xpZGU9ZnVuY3Rpb24oZSx0KXt2YXIgbyxzLG4scj10aGlzLGw9aShlLmN1cnJlbnRUYXJnZXQpO3N3aXRjaChsLmlzKFwiYVwiKSYmZS5wcmV2ZW50RGVmYXVsdCgpLGwuaXMoXCJsaVwiKXx8KGw9bC5jbG9zZXN0KFwibGlcIikpLG49ci5zbGlkZUNvdW50JXIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9MCxvPW4/MDooci5zbGlkZUNvdW50LXIuY3VycmVudFNsaWRlKSVyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsZS5kYXRhLm1lc3NhZ2Upe2Nhc2VcInByZXZpb3VzXCI6cz0wPT09bz9yLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6ci5vcHRpb25zLnNsaWRlc1RvU2hvdy1vLHIuc2xpZGVDb3VudD5yLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZyLnNsaWRlSGFuZGxlcihyLmN1cnJlbnRTbGlkZS1zLCExLHQpO2JyZWFrO2Nhc2VcIm5leHRcIjpzPTA9PT1vP3Iub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDpvLHIuc2xpZGVDb3VudD5yLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZyLnNsaWRlSGFuZGxlcihyLmN1cnJlbnRTbGlkZStzLCExLHQpO2JyZWFrO2Nhc2VcImluZGV4XCI6dmFyIGQ9MD09PWUuZGF0YS5pbmRleD8wOmUuZGF0YS5pbmRleHx8bC5pbmRleCgpKnIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtyLnNsaWRlSGFuZGxlcihyLmNoZWNrTmF2aWdhYmxlKGQpLCExLHQpLGwuY2hpbGRyZW4oKS50cmlnZ2VyKFwiZm9jdXNcIik7YnJlYWs7ZGVmYXVsdDpyZXR1cm59fSxlLnByb3RvdHlwZS5jaGVja05hdmlnYWJsZT1mdW5jdGlvbihpKXt2YXIgZSx0O2lmKGU9dGhpcy5nZXROYXZpZ2FibGVJbmRleGVzKCksdD0wLGk+ZVtlLmxlbmd0aC0xXSlpPWVbZS5sZW5ndGgtMV07ZWxzZSBmb3IodmFyIG8gaW4gZSl7aWYoaTxlW29dKXtpPXQ7YnJlYWt9dD1lW29dfXJldHVybiBpfSxlLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLm9wdGlvbnMuZG90cyYmbnVsbCE9PWUuJGRvdHMmJihpKFwibGlcIixlLiRkb3RzKS5vZmYoXCJjbGljay5zbGlja1wiLGUuY2hhbmdlU2xpZGUpLm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKS5vZmYoXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSksITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmZS4kZG90cy5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSksZS4kc2xpZGVyLm9mZihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIiksITA9PT1lLm9wdGlvbnMuYXJyb3dzJiZlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuJHByZXZBcnJvdyYmZS4kcHJldkFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIsZS5jaGFuZ2VTbGlkZSksZS4kbmV4dEFycm93JiZlLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNoYW5nZVNsaWRlKSwhMD09PWUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYoZS4kcHJldkFycm93JiZlLiRwcmV2QXJyb3cub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlciksZS4kbmV4dEFycm93JiZlLiRuZXh0QXJyb3cub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlcikpKSxlLiRsaXN0Lm9mZihcInRvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwidG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGlja1wiLGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9mZihcInRvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2tcIixlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vZmYoXCJ0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNsaWNrSGFuZGxlciksaShkb2N1bWVudCkub2ZmKGUudmlzaWJpbGl0eUNoYW5nZSxlLnZpc2liaWxpdHkpLGUuY2xlYW5VcFNsaWRlRXZlbnRzKCksITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmZS4kbGlzdC5vZmYoXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSwhMD09PWUub3B0aW9ucy5mb2N1c09uU2VsZWN0JiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGkod2luZG93KS5vZmYoXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGUub3JpZW50YXRpb25DaGFuZ2UpLGkod2luZG93KS5vZmYoXCJyZXNpemUuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnJlc2l6ZSksaShcIltkcmFnZ2FibGUhPXRydWVdXCIsZS4kc2xpZGVUcmFjaykub2ZmKFwiZHJhZ3N0YXJ0XCIsZS5wcmV2ZW50RGVmYXVsdCksaSh3aW5kb3cpLm9mZihcImxvYWQuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnNldFBvc2l0aW9uKX0sZS5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRsaXN0Lm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITApKSxlLiRsaXN0Lm9mZihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKX0sZS5wcm90b3R5cGUuY2xlYW5VcFJvd3M9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXM7ZS5vcHRpb25zLnJvd3M+MSYmKChpPWUuJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCkpLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSxlLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQoaSkpfSxlLnByb3RvdHlwZS5jbGlja0hhbmRsZXI9ZnVuY3Rpb24oaSl7ITE9PT10aGlzLnNob3VsZENsaWNrJiYoaS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxpLnN0b3BQcm9wYWdhdGlvbigpLGkucHJldmVudERlZmF1bHQoKSl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0LmF1dG9QbGF5Q2xlYXIoKSx0LnRvdWNoT2JqZWN0PXt9LHQuY2xlYW5VcEV2ZW50cygpLGkoXCIuc2xpY2stY2xvbmVkXCIsdC4kc2xpZGVyKS5kZXRhY2goKSx0LiRkb3RzJiZ0LiRkb3RzLnJlbW92ZSgpLHQuJHByZXZBcnJvdyYmdC4kcHJldkFycm93Lmxlbmd0aCYmKHQuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleFwiKS5jc3MoXCJkaXNwbGF5XCIsXCJcIiksdC5odG1sRXhwci50ZXN0KHQub3B0aW9ucy5wcmV2QXJyb3cpJiZ0LiRwcmV2QXJyb3cucmVtb3ZlKCkpLHQuJG5leHRBcnJvdyYmdC4kbmV4dEFycm93Lmxlbmd0aCYmKHQuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleFwiKS5jc3MoXCJkaXNwbGF5XCIsXCJcIiksdC5odG1sRXhwci50ZXN0KHQub3B0aW9ucy5uZXh0QXJyb3cpJiZ0LiRuZXh0QXJyb3cucmVtb3ZlKCkpLHQuJHNsaWRlcyYmKHQuJHNsaWRlcy5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50XCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiZGF0YS1zbGljay1pbmRleFwiKS5lYWNoKGZ1bmN0aW9uKCl7aSh0aGlzKS5hdHRyKFwic3R5bGVcIixpKHRoaXMpLmRhdGEoXCJvcmlnaW5hbFN0eWxpbmdcIikpfSksdC4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLHQuJHNsaWRlVHJhY2suZGV0YWNoKCksdC4kbGlzdC5kZXRhY2goKSx0LiRzbGlkZXIuYXBwZW5kKHQuJHNsaWRlcykpLHQuY2xlYW5VcFJvd3MoKSx0LiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZXJcIiksdC4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIiksdC4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stZG90dGVkXCIpLHQudW5zbGlja2VkPSEwLGV8fHQuJHNsaWRlci50cmlnZ2VyKFwiZGVzdHJveVwiLFt0XSl9LGUucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXMsdD17fTt0W2UudHJhbnNpdGlvblR5cGVdPVwiXCIsITE9PT1lLm9wdGlvbnMuZmFkZT9lLiRzbGlkZVRyYWNrLmNzcyh0KTplLiRzbGlkZXMuZXEoaSkuY3NzKHQpfSxlLnByb3RvdHlwZS5mYWRlU2xpZGU9ZnVuY3Rpb24oaSxlKXt2YXIgdD10aGlzOyExPT09dC5jc3NUcmFuc2l0aW9ucz8odC4kc2xpZGVzLmVxKGkpLmNzcyh7ekluZGV4OnQub3B0aW9ucy56SW5kZXh9KSx0LiRzbGlkZXMuZXEoaSkuYW5pbWF0ZSh7b3BhY2l0eToxfSx0Lm9wdGlvbnMuc3BlZWQsdC5vcHRpb25zLmVhc2luZyxlKSk6KHQuYXBwbHlUcmFuc2l0aW9uKGkpLHQuJHNsaWRlcy5lcShpKS5jc3Moe29wYWNpdHk6MSx6SW5kZXg6dC5vcHRpb25zLnpJbmRleH0pLGUmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LmRpc2FibGVUcmFuc2l0aW9uKGkpLGUuY2FsbCgpfSx0Lm9wdGlvbnMuc3BlZWQpKX0sZS5wcm90b3R5cGUuZmFkZVNsaWRlT3V0PWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7ITE9PT1lLmNzc1RyYW5zaXRpb25zP2UuJHNsaWRlcy5lcShpKS5hbmltYXRlKHtvcGFjaXR5OjAsekluZGV4OmUub3B0aW9ucy56SW5kZXgtMn0sZS5vcHRpb25zLnNwZWVkLGUub3B0aW9ucy5lYXNpbmcpOihlLmFwcGx5VHJhbnNpdGlvbihpKSxlLiRzbGlkZXMuZXEoaSkuY3NzKHtvcGFjaXR5OjAsekluZGV4OmUub3B0aW9ucy56SW5kZXgtMn0pKX0sZS5wcm90b3R5cGUuZmlsdGVyU2xpZGVzPWUucHJvdG90eXBlLnNsaWNrRmlsdGVyPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7bnVsbCE9PWkmJihlLiRzbGlkZXNDYWNoZT1lLiRzbGlkZXMsZS51bmxvYWQoKSxlLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksZS4kc2xpZGVzQ2FjaGUuZmlsdGVyKGkpLmFwcGVuZFRvKGUuJHNsaWRlVHJhY2spLGUucmVpbml0KCkpfSxlLnByb3RvdHlwZS5mb2N1c0hhbmRsZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlci5vZmYoXCJmb2N1cy5zbGljayBibHVyLnNsaWNrXCIpLm9uKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiLFwiKlwiLGZ1bmN0aW9uKHQpe3Quc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7dmFyIG89aSh0aGlzKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5vcHRpb25zLnBhdXNlT25Gb2N1cyYmKGUuZm9jdXNzZWQ9by5pcyhcIjpmb2N1c1wiKSxlLmF1dG9QbGF5KCkpfSwwKX0pfSxlLnByb3RvdHlwZS5nZXRDdXJyZW50PWUucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudFNsaWRlfSxlLnByb3RvdHlwZS5nZXREb3RDb3VudD1mdW5jdGlvbigpe3ZhciBpPXRoaXMsZT0wLHQ9MCxvPTA7aWYoITA9PT1pLm9wdGlvbnMuaW5maW5pdGUpaWYoaS5zbGlkZUNvdW50PD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93KSsrbztlbHNlIGZvcig7ZTxpLnNsaWRlQ291bnQ7KSsrbyxlPXQraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLHQrPWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdz9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6aS5vcHRpb25zLnNsaWRlc1RvU2hvdztlbHNlIGlmKCEwPT09aS5vcHRpb25zLmNlbnRlck1vZGUpbz1pLnNsaWRlQ291bnQ7ZWxzZSBpZihpLm9wdGlvbnMuYXNOYXZGb3IpZm9yKDtlPGkuc2xpZGVDb3VudDspKytvLGU9dCtpLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsdCs9aS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93P2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDppLm9wdGlvbnMuc2xpZGVzVG9TaG93O2Vsc2Ugbz0xK01hdGguY2VpbCgoaS5zbGlkZUNvdW50LWkub3B0aW9ucy5zbGlkZXNUb1Nob3cpL2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7cmV0dXJuIG8tMX0sZS5wcm90b3R5cGUuZ2V0TGVmdD1mdW5jdGlvbihpKXt2YXIgZSx0LG8scyxuPXRoaXMscj0wO3JldHVybiBuLnNsaWRlT2Zmc2V0PTAsdD1uLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCksITA9PT1uLm9wdGlvbnMuaW5maW5pdGU/KG4uc2xpZGVDb3VudD5uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYobi5zbGlkZU9mZnNldD1uLnNsaWRlV2lkdGgqbi5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSxzPS0xLCEwPT09bi5vcHRpb25zLnZlcnRpY2FsJiYhMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiYoMj09PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/cz0tMS41OjE9PT1uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYocz0tMikpLHI9dCpuLm9wdGlvbnMuc2xpZGVzVG9TaG93KnMpLG4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPTAmJmkrbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPm4uc2xpZGVDb3VudCYmbi5zbGlkZUNvdW50Pm4ub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpPm4uc2xpZGVDb3VudD8obi5zbGlkZU9mZnNldD0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy0oaS1uLnNsaWRlQ291bnQpKSpuLnNsaWRlV2lkdGgqLTEscj0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy0oaS1uLnNsaWRlQ291bnQpKSp0Ki0xKToobi5zbGlkZU9mZnNldD1uLnNsaWRlQ291bnQlbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKm4uc2xpZGVXaWR0aCotMSxyPW4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwqdCotMSkpKTppK24ub3B0aW9ucy5zbGlkZXNUb1Nob3c+bi5zbGlkZUNvdW50JiYobi5zbGlkZU9mZnNldD0oaStuLm9wdGlvbnMuc2xpZGVzVG9TaG93LW4uc2xpZGVDb3VudCkqbi5zbGlkZVdpZHRoLHI9KGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdy1uLnNsaWRlQ291bnQpKnQpLG4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKG4uc2xpZGVPZmZzZXQ9MCxyPTApLCEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJm4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdz9uLnNsaWRlT2Zmc2V0PW4uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLzItbi5zbGlkZVdpZHRoKm4uc2xpZGVDb3VudC8yOiEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJiEwPT09bi5vcHRpb25zLmluZmluaXRlP24uc2xpZGVPZmZzZXQrPW4uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiktbi5zbGlkZVdpZHRoOiEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUmJihuLnNsaWRlT2Zmc2V0PTAsbi5zbGlkZU9mZnNldCs9bi5zbGlkZVdpZHRoKk1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSksZT0hMT09PW4ub3B0aW9ucy52ZXJ0aWNhbD9pKm4uc2xpZGVXaWR0aCotMStuLnNsaWRlT2Zmc2V0OmkqdCotMStyLCEwPT09bi5vcHRpb25zLnZhcmlhYmxlV2lkdGgmJihvPW4uc2xpZGVDb3VudDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvd3x8ITE9PT1uLm9wdGlvbnMuaW5maW5pdGU/bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpKTpuLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdyksZT0hMD09PW4ub3B0aW9ucy5ydGw/b1swXT8tMSoobi4kc2xpZGVUcmFjay53aWR0aCgpLW9bMF0ub2Zmc2V0TGVmdC1vLndpZHRoKCkpOjA6b1swXT8tMSpvWzBdLm9mZnNldExlZnQ6MCwhMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiYobz1uLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3d8fCExPT09bi5vcHRpb25zLmluZmluaXRlP24uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoaSk6bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3crMSksZT0hMD09PW4ub3B0aW9ucy5ydGw/b1swXT8tMSoobi4kc2xpZGVUcmFjay53aWR0aCgpLW9bMF0ub2Zmc2V0TGVmdC1vLndpZHRoKCkpOjA6b1swXT8tMSpvWzBdLm9mZnNldExlZnQ6MCxlKz0obi4kbGlzdC53aWR0aCgpLW8ub3V0ZXJXaWR0aCgpKS8yKSksZX0sZS5wcm90b3R5cGUuZ2V0T3B0aW9uPWUucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uPWZ1bmN0aW9uKGkpe3JldHVybiB0aGlzLm9wdGlvbnNbaV19LGUucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXM9ZnVuY3Rpb24oKXt2YXIgaSxlPXRoaXMsdD0wLG89MCxzPVtdO2ZvcighMT09PWUub3B0aW9ucy5pbmZpbml0ZT9pPWUuc2xpZGVDb3VudDoodD0tMSplLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsbz0tMSplLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsaT0yKmUuc2xpZGVDb3VudCk7dDxpOylzLnB1c2godCksdD1vK2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxvKz1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWUub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmUub3B0aW9ucy5zbGlkZXNUb1Nob3c7cmV0dXJuIHN9LGUucHJvdG90eXBlLmdldFNsaWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGUucHJvdG90eXBlLmdldFNsaWRlQ291bnQ9ZnVuY3Rpb24oKXt2YXIgZSx0LG89dGhpcztyZXR1cm4gdD0hMD09PW8ub3B0aW9ucy5jZW50ZXJNb2RlP28uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG8ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMik6MCwhMD09PW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/KG8uJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1zbGlkZVwiKS5lYWNoKGZ1bmN0aW9uKHMsbil7aWYobi5vZmZzZXRMZWZ0LXQraShuKS5vdXRlcldpZHRoKCkvMj4tMSpvLnN3aXBlTGVmdClyZXR1cm4gZT1uLCExfSksTWF0aC5hYnMoaShlKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiKS1vLmN1cnJlbnRTbGlkZSl8fDEpOm8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbH0sZS5wcm90b3R5cGUuZ29Ubz1lLnByb3RvdHlwZS5zbGlja0dvVG89ZnVuY3Rpb24oaSxlKXt0aGlzLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwiaW5kZXhcIixpbmRleDpwYXJzZUludChpKX19LGUpfSxlLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aSh0LiRzbGlkZXIpLmhhc0NsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIil8fChpKHQuJHNsaWRlcikuYWRkQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKSx0LmJ1aWxkUm93cygpLHQuYnVpbGRPdXQoKSx0LnNldFByb3BzKCksdC5zdGFydExvYWQoKSx0LmxvYWRTbGlkZXIoKSx0LmluaXRpYWxpemVFdmVudHMoKSx0LnVwZGF0ZUFycm93cygpLHQudXBkYXRlRG90cygpLHQuY2hlY2tSZXNwb25zaXZlKCEwKSx0LmZvY3VzSGFuZGxlcigpKSxlJiZ0LiRzbGlkZXIudHJpZ2dlcihcImluaXRcIixbdF0pLCEwPT09dC5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJnQuaW5pdEFEQSgpLHQub3B0aW9ucy5hdXRvcGxheSYmKHQucGF1c2VkPSExLHQuYXV0b1BsYXkoKSl9LGUucHJvdG90eXBlLmluaXRBREE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9TWF0aC5jZWlsKGUuc2xpZGVDb3VudC9lLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxvPWUuZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbihpKXtyZXR1cm4gaT49MCYmaTxlLnNsaWRlQ291bnR9KTtlLiRzbGlkZXMuYWRkKGUuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1jbG9uZWRcIikpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KS5maW5kKFwiYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0XCIpLmF0dHIoe3RhYmluZGV4OlwiLTFcIn0pLG51bGwhPT1lLiRkb3RzJiYoZS4kc2xpZGVzLm5vdChlLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpKS5lYWNoKGZ1bmN0aW9uKHQpe3ZhciBzPW8uaW5kZXhPZih0KTtpKHRoaXMpLmF0dHIoe3JvbGU6XCJ0YWJwYW5lbFwiLGlkOlwic2xpY2stc2xpZGVcIitlLmluc3RhbmNlVWlkK3QsdGFiaW5kZXg6LTF9KSwtMSE9PXMmJmkodGhpcykuYXR0cih7XCJhcmlhLWRlc2NyaWJlZGJ5XCI6XCJzbGljay1zbGlkZS1jb250cm9sXCIrZS5pbnN0YW5jZVVpZCtzfSl9KSxlLiRkb3RzLmF0dHIoXCJyb2xlXCIsXCJ0YWJsaXN0XCIpLmZpbmQoXCJsaVwiKS5lYWNoKGZ1bmN0aW9uKHMpe3ZhciBuPW9bc107aSh0aGlzKS5hdHRyKHtyb2xlOlwicHJlc2VudGF0aW9uXCJ9KSxpKHRoaXMpLmZpbmQoXCJidXR0b25cIikuZmlyc3QoKS5hdHRyKHtyb2xlOlwidGFiXCIsaWQ6XCJzbGljay1zbGlkZS1jb250cm9sXCIrZS5pbnN0YW5jZVVpZCtzLFwiYXJpYS1jb250cm9sc1wiOlwic2xpY2stc2xpZGVcIitlLmluc3RhbmNlVWlkK24sXCJhcmlhLWxhYmVsXCI6cysxK1wiIG9mIFwiK3QsXCJhcmlhLXNlbGVjdGVkXCI6bnVsbCx0YWJpbmRleDpcIi0xXCJ9KX0pLmVxKGUuY3VycmVudFNsaWRlKS5maW5kKFwiYnV0dG9uXCIpLmF0dHIoe1wiYXJpYS1zZWxlY3RlZFwiOlwidHJ1ZVwiLHRhYmluZGV4OlwiMFwifSkuZW5kKCkpO2Zvcih2YXIgcz1lLmN1cnJlbnRTbGlkZSxuPXMrZS5vcHRpb25zLnNsaWRlc1RvU2hvdztzPG47cysrKWUuJHNsaWRlcy5lcShzKS5hdHRyKFwidGFiaW5kZXhcIiwwKTtlLmFjdGl2YXRlQURBKCl9LGUucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7ITA9PT1pLm9wdGlvbnMuYXJyb3dzJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiKS5vbihcImNsaWNrLnNsaWNrXCIse21lc3NhZ2U6XCJwcmV2aW91c1wifSxpLmNoYW5nZVNsaWRlKSxpLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIikub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwibmV4dFwifSxpLmNoYW5nZVNsaWRlKSwhMD09PWkub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYoaS4kcHJldkFycm93Lm9uKFwia2V5ZG93bi5zbGlja1wiLGkua2V5SGFuZGxlciksaS4kbmV4dEFycm93Lm9uKFwia2V5ZG93bi5zbGlja1wiLGkua2V5SGFuZGxlcikpKX0sZS5wcm90b3R5cGUuaW5pdERvdEV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ITA9PT1lLm9wdGlvbnMuZG90cyYmKGkoXCJsaVwiLGUuJGRvdHMpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcImluZGV4XCJ9LGUuY2hhbmdlU2xpZGUpLCEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJmUuJGRvdHMub24oXCJrZXlkb3duLnNsaWNrXCIsZS5rZXlIYW5kbGVyKSksITA9PT1lLm9wdGlvbnMuZG90cyYmITA9PT1lLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciYmaShcImxpXCIsZS4kZG90cykub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCEwKSkub24oXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSl9LGUucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5vcHRpb25zLnBhdXNlT25Ib3ZlciYmKGUuJGxpc3Qub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCEwKSksZS4kbGlzdC5vbihcIm1vdXNlbGVhdmUuc2xpY2tcIixpLnByb3h5KGUuaW50ZXJydXB0LGUsITEpKSl9LGUucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuaW5pdEFycm93RXZlbnRzKCksZS5pbml0RG90RXZlbnRzKCksZS5pbml0U2xpZGVFdmVudHMoKSxlLiRsaXN0Lm9uKFwidG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2tcIix7YWN0aW9uOlwic3RhcnRcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJ0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrXCIse2FjdGlvbjpcIm1vdmVcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJ0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrXCIse2FjdGlvbjpcImVuZFwifSxlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vbihcInRvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2tcIix7YWN0aW9uOlwiZW5kXCJ9LGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9uKFwiY2xpY2suc2xpY2tcIixlLmNsaWNrSGFuZGxlciksaShkb2N1bWVudCkub24oZS52aXNpYmlsaXR5Q2hhbmdlLGkucHJveHkoZS52aXNpYmlsaXR5LGUpKSwhMD09PWUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiZlLiRsaXN0Lm9uKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlciksITA9PT1lLm9wdGlvbnMuZm9jdXNPblNlbGVjdCYmaShlLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGkod2luZG93KS5vbihcIm9yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsaS5wcm94eShlLm9yaWVudGF0aW9uQ2hhbmdlLGUpKSxpKHdpbmRvdykub24oXCJyZXNpemUuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxpLnByb3h5KGUucmVzaXplLGUpKSxpKFwiW2RyYWdnYWJsZSE9dHJ1ZV1cIixlLiRzbGlkZVRyYWNrKS5vbihcImRyYWdzdGFydFwiLGUucHJldmVudERlZmF1bHQpLGkod2luZG93KS5vbihcImxvYWQuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLnNldFBvc2l0aW9uKSxpKGUuc2V0UG9zaXRpb24pfSxlLnByb3RvdHlwZS5pbml0VUk9ZnVuY3Rpb24oKXt2YXIgaT10aGlzOyEwPT09aS5vcHRpb25zLmFycm93cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpLiRwcmV2QXJyb3cuc2hvdygpLGkuJG5leHRBcnJvdy5zaG93KCkpLCEwPT09aS5vcHRpb25zLmRvdHMmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZpLiRkb3RzLnNob3coKX0sZS5wcm90b3R5cGUua2V5SGFuZGxlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2kudGFyZ2V0LnRhZ05hbWUubWF0Y2goXCJURVhUQVJFQXxJTlBVVHxTRUxFQ1RcIil8fCgzNz09PWkua2V5Q29kZSYmITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT9lLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOiEwPT09ZS5vcHRpb25zLnJ0bD9cIm5leHRcIjpcInByZXZpb3VzXCJ9fSk6Mzk9PT1pLmtleUNvZGUmJiEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJmUuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6ITA9PT1lLm9wdGlvbnMucnRsP1wicHJldmlvdXNcIjpcIm5leHRcIn19KSl9LGUucHJvdG90eXBlLmxhenlMb2FkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtpKFwiaW1nW2RhdGEtbGF6eV1cIixlKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9aSh0aGlzKSx0PWkodGhpcykuYXR0cihcImRhdGEtbGF6eVwiKSxvPWkodGhpcykuYXR0cihcImRhdGEtc3Jjc2V0XCIpLHM9aSh0aGlzKS5hdHRyKFwiZGF0YS1zaXplc1wiKXx8bi4kc2xpZGVyLmF0dHIoXCJkYXRhLXNpemVzXCIpLHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtyLm9ubG9hZD1mdW5jdGlvbigpe2UuYW5pbWF0ZSh7b3BhY2l0eTowfSwxMDAsZnVuY3Rpb24oKXtvJiYoZS5hdHRyKFwic3Jjc2V0XCIsbykscyYmZS5hdHRyKFwic2l6ZXNcIixzKSksZS5hdHRyKFwic3JjXCIsdCkuYW5pbWF0ZSh7b3BhY2l0eToxfSwyMDAsZnVuY3Rpb24oKXtlLnJlbW92ZUF0dHIoXCJkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplc1wiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9KSxuLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbbixlLHRdKX0pfSxyLm9uZXJyb3I9ZnVuY3Rpb24oKXtlLnJlbW92ZUF0dHIoXCJkYXRhLWxhenlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLmFkZENsYXNzKFwic2xpY2stbGF6eWxvYWQtZXJyb3JcIiksbi4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZEVycm9yXCIsW24sZSx0XSl9LHIuc3JjPXR9KX12YXIgdCxvLHMsbj10aGlzO2lmKCEwPT09bi5vcHRpb25zLmNlbnRlck1vZGU/ITA9PT1uLm9wdGlvbnMuaW5maW5pdGU/cz0obz1uLmN1cnJlbnRTbGlkZSsobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpKStuLm9wdGlvbnMuc2xpZGVzVG9TaG93KzI6KG89TWF0aC5tYXgoMCxuLmN1cnJlbnRTbGlkZS0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpKSxzPW4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKzIrbi5jdXJyZW50U2xpZGUpOihvPW4ub3B0aW9ucy5pbmZpbml0ZT9uLm9wdGlvbnMuc2xpZGVzVG9TaG93K24uY3VycmVudFNsaWRlOm4uY3VycmVudFNsaWRlLHM9TWF0aC5jZWlsKG8rbi5vcHRpb25zLnNsaWRlc1RvU2hvdyksITA9PT1uLm9wdGlvbnMuZmFkZSYmKG8+MCYmby0tLHM8PW4uc2xpZGVDb3VudCYmcysrKSksdD1uLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKS5zbGljZShvLHMpLFwiYW50aWNpcGF0ZWRcIj09PW4ub3B0aW9ucy5sYXp5TG9hZClmb3IodmFyIHI9by0xLGw9cyxkPW4uJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLGE9MDthPG4ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDthKyspcjwwJiYocj1uLnNsaWRlQ291bnQtMSksdD0odD10LmFkZChkLmVxKHIpKSkuYWRkKGQuZXEobCkpLHItLSxsKys7ZSh0KSxuLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZShuLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKSk6bi5jdXJyZW50U2xpZGU+PW4uc2xpZGVDb3VudC1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Uobi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpLnNsaWNlKDAsbi5vcHRpb25zLnNsaWRlc1RvU2hvdykpOjA9PT1uLmN1cnJlbnRTbGlkZSYmZShuLiRzbGlkZXIuZmluZChcIi5zbGljay1jbG9uZWRcIikuc2xpY2UoLTEqbi5vcHRpb25zLnNsaWRlc1RvU2hvdykpfSxlLnByb3RvdHlwZS5sb2FkU2xpZGVyPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLnNldFBvc2l0aW9uKCksaS4kc2xpZGVUcmFjay5jc3Moe29wYWNpdHk6MX0pLGkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksaS5pbml0VUkoKSxcInByb2dyZXNzaXZlXCI9PT1pLm9wdGlvbnMubGF6eUxvYWQmJmkucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpfSxlLnByb3RvdHlwZS5uZXh0PWUucHJvdG90eXBlLnNsaWNrTmV4dD1mdW5jdGlvbigpe3RoaXMuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJuZXh0XCJ9fSl9LGUucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmNoZWNrUmVzcG9uc2l2ZSgpLGkuc2V0UG9zaXRpb24oKX0sZS5wcm90b3R5cGUucGF1c2U9ZS5wcm90b3R5cGUuc2xpY2tQYXVzZT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheUNsZWFyKCksaS5wYXVzZWQ9ITB9LGUucHJvdG90eXBlLnBsYXk9ZS5wcm90b3R5cGUuc2xpY2tQbGF5PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLmF1dG9QbGF5KCksaS5vcHRpb25zLmF1dG9wbGF5PSEwLGkucGF1c2VkPSExLGkuZm9jdXNzZWQ9ITEsaS5pbnRlcnJ1cHRlZD0hMX0sZS5wcm90b3R5cGUucG9zdFNsaWRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC51bnNsaWNrZWR8fCh0LiRzbGlkZXIudHJpZ2dlcihcImFmdGVyQ2hhbmdlXCIsW3QsZV0pLHQuYW5pbWF0aW5nPSExLHQuc2xpZGVDb3VudD50Lm9wdGlvbnMuc2xpZGVzVG9TaG93JiZ0LnNldFBvc2l0aW9uKCksdC5zd2lwZUxlZnQ9bnVsbCx0Lm9wdGlvbnMuYXV0b3BsYXkmJnQuYXV0b1BsYXkoKSwhMD09PXQub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiYodC5pbml0QURBKCksdC5vcHRpb25zLmZvY3VzT25DaGFuZ2UmJmkodC4kc2xpZGVzLmdldCh0LmN1cnJlbnRTbGlkZSkpLmF0dHIoXCJ0YWJpbmRleFwiLDApLmZvY3VzKCkpKX0sZS5wcm90b3R5cGUucHJldj1lLnByb3RvdHlwZS5zbGlja1ByZXY9ZnVuY3Rpb24oKXt0aGlzLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwicHJldmlvdXNcIn19KX0sZS5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oaSl7aS5wcmV2ZW50RGVmYXVsdCgpfSxlLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkPWZ1bmN0aW9uKGUpe2U9ZXx8MTt2YXIgdCxvLHMsbixyLGw9dGhpcyxkPWkoXCJpbWdbZGF0YS1sYXp5XVwiLGwuJHNsaWRlcik7ZC5sZW5ndGg/KHQ9ZC5maXJzdCgpLG89dC5hdHRyKFwiZGF0YS1sYXp5XCIpLHM9dC5hdHRyKFwiZGF0YS1zcmNzZXRcIiksbj10LmF0dHIoXCJkYXRhLXNpemVzXCIpfHxsLiRzbGlkZXIuYXR0cihcImRhdGEtc2l6ZXNcIiksKHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSkub25sb2FkPWZ1bmN0aW9uKCl7cyYmKHQuYXR0cihcInNyY3NldFwiLHMpLG4mJnQuYXR0cihcInNpemVzXCIsbikpLHQuYXR0cihcInNyY1wiLG8pLnJlbW92ZUF0dHIoXCJkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplc1wiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksITA9PT1sLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQmJmwuc2V0UG9zaXRpb24oKSxsLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbbCx0LG9dKSxsLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sci5vbmVycm9yPWZ1bmN0aW9uKCl7ZTwzP3NldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnByb2dyZXNzaXZlTGF6eUxvYWQoZSsxKX0sNTAwKToodC5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKS5hZGRDbGFzcyhcInNsaWNrLWxhenlsb2FkLWVycm9yXCIpLGwuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRFcnJvclwiLFtsLHQsb10pLGwucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpKX0sci5zcmM9byk6bC4kc2xpZGVyLnRyaWdnZXIoXCJhbGxJbWFnZXNMb2FkZWRcIixbbF0pfSxlLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKGUpe3ZhciB0LG8scz10aGlzO289cy5zbGlkZUNvdW50LXMub3B0aW9ucy5zbGlkZXNUb1Nob3csIXMub3B0aW9ucy5pbmZpbml0ZSYmcy5jdXJyZW50U2xpZGU+byYmKHMuY3VycmVudFNsaWRlPW8pLHMuc2xpZGVDb3VudDw9cy5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKHMuY3VycmVudFNsaWRlPTApLHQ9cy5jdXJyZW50U2xpZGUscy5kZXN0cm95KCEwKSxpLmV4dGVuZChzLHMuaW5pdGlhbHMse2N1cnJlbnRTbGlkZTp0fSkscy5pbml0KCksZXx8cy5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcImluZGV4XCIsaW5kZXg6dH19LCExKX0sZS5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cz1mdW5jdGlvbigpe3ZhciBlLHQsbyxzPXRoaXMsbj1zLm9wdGlvbnMucmVzcG9uc2l2ZXx8bnVsbDtpZihcImFycmF5XCI9PT1pLnR5cGUobikmJm4ubGVuZ3RoKXtzLnJlc3BvbmRUbz1zLm9wdGlvbnMucmVzcG9uZFRvfHxcIndpbmRvd1wiO2ZvcihlIGluIG4paWYobz1zLmJyZWFrcG9pbnRzLmxlbmd0aC0xLG4uaGFzT3duUHJvcGVydHkoZSkpe2Zvcih0PW5bZV0uYnJlYWtwb2ludDtvPj0wOylzLmJyZWFrcG9pbnRzW29dJiZzLmJyZWFrcG9pbnRzW29dPT09dCYmcy5icmVha3BvaW50cy5zcGxpY2UobywxKSxvLS07cy5icmVha3BvaW50cy5wdXNoKHQpLHMuYnJlYWtwb2ludFNldHRpbmdzW3RdPW5bZV0uc2V0dGluZ3N9cy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGksZSl7cmV0dXJuIHMub3B0aW9ucy5tb2JpbGVGaXJzdD9pLWU6ZS1pfSl9fSxlLnByb3RvdHlwZS5yZWluaXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuJHNsaWRlcz1lLiRzbGlkZVRyYWNrLmNoaWxkcmVuKGUub3B0aW9ucy5zbGlkZSkuYWRkQ2xhc3MoXCJzbGljay1zbGlkZVwiKSxlLnNsaWRlQ291bnQ9ZS4kc2xpZGVzLmxlbmd0aCxlLmN1cnJlbnRTbGlkZT49ZS5zbGlkZUNvdW50JiYwIT09ZS5jdXJyZW50U2xpZGUmJihlLmN1cnJlbnRTbGlkZT1lLmN1cnJlbnRTbGlkZS1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpLGUuc2xpZGVDb3VudDw9ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuY3VycmVudFNsaWRlPTApLGUucmVnaXN0ZXJCcmVha3BvaW50cygpLGUuc2V0UHJvcHMoKSxlLnNldHVwSW5maW5pdGUoKSxlLmJ1aWxkQXJyb3dzKCksZS51cGRhdGVBcnJvd3MoKSxlLmluaXRBcnJvd0V2ZW50cygpLGUuYnVpbGREb3RzKCksZS51cGRhdGVEb3RzKCksZS5pbml0RG90RXZlbnRzKCksZS5jbGVhblVwU2xpZGVFdmVudHMoKSxlLmluaXRTbGlkZUV2ZW50cygpLGUuY2hlY2tSZXNwb25zaXZlKCExLCEwKSwhMD09PWUub3B0aW9ucy5mb2N1c09uU2VsZWN0JiZpKGUuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oXCJjbGljay5zbGlja1wiLGUuc2VsZWN0SGFuZGxlciksZS5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIGUuY3VycmVudFNsaWRlP2UuY3VycmVudFNsaWRlOjApLGUuc2V0UG9zaXRpb24oKSxlLmZvY3VzSGFuZGxlcigpLGUucGF1c2VkPSFlLm9wdGlvbnMuYXV0b3BsYXksZS5hdXRvUGxheSgpLGUuJHNsaWRlci50cmlnZ2VyKFwicmVJbml0XCIsW2VdKX0sZS5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpKHdpbmRvdykud2lkdGgoKSE9PWUud2luZG93V2lkdGgmJihjbGVhclRpbWVvdXQoZS53aW5kb3dEZWxheSksZS53aW5kb3dEZWxheT13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2Uud2luZG93V2lkdGg9aSh3aW5kb3cpLndpZHRoKCksZS5jaGVja1Jlc3BvbnNpdmUoKSxlLnVuc2xpY2tlZHx8ZS5zZXRQb3NpdGlvbigpfSw1MCkpfSxlLnByb3RvdHlwZS5yZW1vdmVTbGlkZT1lLnByb3RvdHlwZS5zbGlja1JlbW92ZT1mdW5jdGlvbihpLGUsdCl7dmFyIG89dGhpcztpZihpPVwiYm9vbGVhblwiPT10eXBlb2YgaT8hMD09PShlPWkpPzA6by5zbGlkZUNvdW50LTE6ITA9PT1lPy0taTppLG8uc2xpZGVDb3VudDwxfHxpPDB8fGk+by5zbGlkZUNvdW50LTEpcmV0dXJuITE7by51bmxvYWQoKSwhMD09PXQ/by4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpOm8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpKS5yZW1vdmUoKSxvLiRzbGlkZXM9by4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLG8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxvLiRzbGlkZVRyYWNrLmFwcGVuZChvLiRzbGlkZXMpLG8uJHNsaWRlc0NhY2hlPW8uJHNsaWRlcyxvLnJlaW5pdCgpfSxlLnByb3RvdHlwZS5zZXRDU1M9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvPXRoaXMscz17fTshMD09PW8ub3B0aW9ucy5ydGwmJihpPS1pKSxlPVwibGVmdFwiPT1vLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoaSkrXCJweFwiOlwiMHB4XCIsdD1cInRvcFwiPT1vLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoaSkrXCJweFwiOlwiMHB4XCIsc1tvLnBvc2l0aW9uUHJvcF09aSwhMT09PW8udHJhbnNmb3Jtc0VuYWJsZWQ/by4kc2xpZGVUcmFjay5jc3Mocyk6KHM9e30sITE9PT1vLmNzc1RyYW5zaXRpb25zPyhzW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2UrXCIsIFwiK3QrXCIpXCIsby4kc2xpZGVUcmFjay5jc3MocykpOihzW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlM2QoXCIrZStcIiwgXCIrdCtcIiwgMHB4KVwiLG8uJHNsaWRlVHJhY2suY3NzKHMpKSl9LGUucHJvdG90eXBlLnNldERpbWVuc2lvbnM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzOyExPT09aS5vcHRpb25zLnZlcnRpY2FsPyEwPT09aS5vcHRpb25zLmNlbnRlck1vZGUmJmkuJGxpc3QuY3NzKHtwYWRkaW5nOlwiMHB4IFwiK2kub3B0aW9ucy5jZW50ZXJQYWRkaW5nfSk6KGkuJGxpc3QuaGVpZ2h0KGkuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSppLm9wdGlvbnMuc2xpZGVzVG9TaG93KSwhMD09PWkub3B0aW9ucy5jZW50ZXJNb2RlJiZpLiRsaXN0LmNzcyh7cGFkZGluZzppLm9wdGlvbnMuY2VudGVyUGFkZGluZytcIiAwcHhcIn0pKSxpLmxpc3RXaWR0aD1pLiRsaXN0LndpZHRoKCksaS5saXN0SGVpZ2h0PWkuJGxpc3QuaGVpZ2h0KCksITE9PT1pLm9wdGlvbnMudmVydGljYWwmJiExPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGg/KGkuc2xpZGVXaWR0aD1NYXRoLmNlaWwoaS5saXN0V2lkdGgvaS5vcHRpb25zLnNsaWRlc1RvU2hvdyksaS4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoaS5zbGlkZVdpZHRoKmkuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikubGVuZ3RoKSkpOiEwPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGg/aS4kc2xpZGVUcmFjay53aWR0aCg1ZTMqaS5zbGlkZUNvdW50KTooaS5zbGlkZVdpZHRoPU1hdGguY2VpbChpLmxpc3RXaWR0aCksaS4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKGkuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSppLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmxlbmd0aCkpKTt2YXIgZT1pLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKCEwKS1pLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpOyExPT09aS5vcHRpb25zLnZhcmlhYmxlV2lkdGgmJmkuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikud2lkdGgoaS5zbGlkZVdpZHRoLWUpfSxlLnByb3RvdHlwZS5zZXRGYWRlPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzO3QuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKG8scyl7ZT10LnNsaWRlV2lkdGgqbyotMSwhMD09PXQub3B0aW9ucy5ydGw/aShzKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixyaWdodDplLHRvcDowLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4LTIsb3BhY2l0eTowfSk6aShzKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixsZWZ0OmUsdG9wOjAsekluZGV4OnQub3B0aW9ucy56SW5kZXgtMixvcGFjaXR5OjB9KX0pLHQuJHNsaWRlcy5lcSh0LmN1cnJlbnRTbGlkZSkuY3NzKHt6SW5kZXg6dC5vcHRpb25zLnpJbmRleC0xLG9wYWNpdHk6MX0pfSxlLnByb3RvdHlwZS5zZXRIZWlnaHQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2lmKDE9PT1pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYhMD09PWkub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCYmITE9PT1pLm9wdGlvbnMudmVydGljYWwpe3ZhciBlPWkuJHNsaWRlcy5lcShpLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQoITApO2kuJGxpc3QuY3NzKFwiaGVpZ2h0XCIsZSl9fSxlLnByb3RvdHlwZS5zZXRPcHRpb249ZS5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb249ZnVuY3Rpb24oKXt2YXIgZSx0LG8scyxuLHI9dGhpcyxsPSExO2lmKFwib2JqZWN0XCI9PT1pLnR5cGUoYXJndW1lbnRzWzBdKT8obz1hcmd1bWVudHNbMF0sbD1hcmd1bWVudHNbMV0sbj1cIm11bHRpcGxlXCIpOlwic3RyaW5nXCI9PT1pLnR5cGUoYXJndW1lbnRzWzBdKSYmKG89YXJndW1lbnRzWzBdLHM9YXJndW1lbnRzWzFdLGw9YXJndW1lbnRzWzJdLFwicmVzcG9uc2l2ZVwiPT09YXJndW1lbnRzWzBdJiZcImFycmF5XCI9PT1pLnR5cGUoYXJndW1lbnRzWzFdKT9uPVwicmVzcG9uc2l2ZVwiOnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmKG49XCJzaW5nbGVcIikpLFwic2luZ2xlXCI9PT1uKXIub3B0aW9uc1tvXT1zO2Vsc2UgaWYoXCJtdWx0aXBsZVwiPT09bilpLmVhY2gobyxmdW5jdGlvbihpLGUpe3Iub3B0aW9uc1tpXT1lfSk7ZWxzZSBpZihcInJlc3BvbnNpdmVcIj09PW4pZm9yKHQgaW4gcylpZihcImFycmF5XCIhPT1pLnR5cGUoci5vcHRpb25zLnJlc3BvbnNpdmUpKXIub3B0aW9ucy5yZXNwb25zaXZlPVtzW3RdXTtlbHNle2ZvcihlPXIub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO2U+PTA7KXIub3B0aW9ucy5yZXNwb25zaXZlW2VdLmJyZWFrcG9pbnQ9PT1zW3RdLmJyZWFrcG9pbnQmJnIub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShlLDEpLGUtLTtyLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKHNbdF0pfWwmJihyLnVubG9hZCgpLHIucmVpbml0KCkpfSxlLnByb3RvdHlwZS5zZXRQb3NpdGlvbj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5zZXREaW1lbnNpb25zKCksaS5zZXRIZWlnaHQoKSwhMT09PWkub3B0aW9ucy5mYWRlP2kuc2V0Q1NTKGkuZ2V0TGVmdChpLmN1cnJlbnRTbGlkZSkpOmkuc2V0RmFkZSgpLGkuJHNsaWRlci50cmlnZ2VyKFwic2V0UG9zaXRpb25cIixbaV0pfSxlLnByb3RvdHlwZS5zZXRQcm9wcz1mdW5jdGlvbigpe3ZhciBpPXRoaXMsZT1kb2N1bWVudC5ib2R5LnN0eWxlO2kucG9zaXRpb25Qcm9wPSEwPT09aS5vcHRpb25zLnZlcnRpY2FsP1widG9wXCI6XCJsZWZ0XCIsXCJ0b3BcIj09PWkucG9zaXRpb25Qcm9wP2kuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpOmkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpLHZvaWQgMD09PWUuV2Via2l0VHJhbnNpdGlvbiYmdm9pZCAwPT09ZS5Nb3pUcmFuc2l0aW9uJiZ2b2lkIDA9PT1lLm1zVHJhbnNpdGlvbnx8ITA9PT1pLm9wdGlvbnMudXNlQ1NTJiYoaS5jc3NUcmFuc2l0aW9ucz0hMCksaS5vcHRpb25zLmZhZGUmJihcIm51bWJlclwiPT10eXBlb2YgaS5vcHRpb25zLnpJbmRleD9pLm9wdGlvbnMuekluZGV4PDMmJihpLm9wdGlvbnMuekluZGV4PTMpOmkub3B0aW9ucy56SW5kZXg9aS5kZWZhdWx0cy56SW5kZXgpLHZvaWQgMCE9PWUuT1RyYW5zZm9ybSYmKGkuYW5pbVR5cGU9XCJPVHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW8tdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIk9UcmFuc2l0aW9uXCIsdm9pZCAwPT09ZS5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT1lLndlYmtpdFBlcnNwZWN0aXZlJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUuTW96VHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIk1velRyYW5zZm9ybVwiLGkudHJhbnNmb3JtVHlwZT1cIi1tb3otdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIk1velRyYW5zaXRpb25cIix2b2lkIDA9PT1lLnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PWUuTW96UGVyc3BlY3RpdmUmJihpLmFuaW1UeXBlPSExKSksdm9pZCAwIT09ZS53ZWJraXRUcmFuc2Zvcm0mJihpLmFuaW1UeXBlPVwid2Via2l0VHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLXdlYmtpdC10cmFuc2Zvcm1cIixpLnRyYW5zaXRpb25UeXBlPVwid2Via2l0VHJhbnNpdGlvblwiLHZvaWQgMD09PWUucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09ZS53ZWJraXRQZXJzcGVjdGl2ZSYmKGkuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1lLm1zVHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIm1zVHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwiLW1zLXRyYW5zZm9ybVwiLGkudHJhbnNpdGlvblR5cGU9XCJtc1RyYW5zaXRpb25cIix2b2lkIDA9PT1lLm1zVHJhbnNmb3JtJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUudHJhbnNmb3JtJiYhMSE9PWkuYW5pbVR5cGUmJihpLmFuaW1UeXBlPVwidHJhbnNmb3JtXCIsaS50cmFuc2Zvcm1UeXBlPVwidHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cInRyYW5zaXRpb25cIiksaS50cmFuc2Zvcm1zRW5hYmxlZD1pLm9wdGlvbnMudXNlVHJhbnNmb3JtJiZudWxsIT09aS5hbmltVHlwZSYmITEhPT1pLmFuaW1UeXBlfSxlLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXM9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvLHMsbj10aGlzO2lmKHQ9bi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLG4uJHNsaWRlcy5lcShpKS5hZGRDbGFzcyhcInNsaWNrLWN1cnJlbnRcIiksITA9PT1uLm9wdGlvbnMuY2VudGVyTW9kZSl7dmFyIHI9bi5vcHRpb25zLnNsaWRlc1RvU2hvdyUyPT0wPzE6MDtlPU1hdGguZmxvb3Iobi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSwhMD09PW4ub3B0aW9ucy5pbmZpbml0ZSYmKGk+PWUmJmk8PW4uc2xpZGVDb3VudC0xLWU/bi4kc2xpZGVzLnNsaWNlKGktZStyLGkrZSsxKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpOihvPW4ub3B0aW9ucy5zbGlkZXNUb1Nob3craSx0LnNsaWNlKG8tZSsxK3IsbytlKzIpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIikpLDA9PT1pP3QuZXEodC5sZW5ndGgtMS1uLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKTppPT09bi5zbGlkZUNvdW50LTEmJnQuZXEobi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIikpLG4uJHNsaWRlcy5lcShpKS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKX1lbHNlIGk+PTAmJmk8PW4uc2xpZGVDb3VudC1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P24uJHNsaWRlcy5zbGljZShpLGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTp0Lmxlbmd0aDw9bi5vcHRpb25zLnNsaWRlc1RvU2hvdz90LmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6KHM9bi5zbGlkZUNvdW50JW4ub3B0aW9ucy5zbGlkZXNUb1Nob3csbz0hMD09PW4ub3B0aW9ucy5pbmZpbml0ZT9uLm9wdGlvbnMuc2xpZGVzVG9TaG93K2k6aSxuLm9wdGlvbnMuc2xpZGVzVG9TaG93PT1uLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwmJm4uc2xpZGVDb3VudC1pPG4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/dC5zbGljZShvLShuLm9wdGlvbnMuc2xpZGVzVG9TaG93LXMpLG8rcykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTp0LnNsaWNlKG8sbytuLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKTtcIm9uZGVtYW5kXCIhPT1uLm9wdGlvbnMubGF6eUxvYWQmJlwiYW50aWNpcGF0ZWRcIiE9PW4ub3B0aW9ucy5sYXp5TG9hZHx8bi5sYXp5TG9hZCgpfSxlLnByb3RvdHlwZS5zZXR1cEluZmluaXRlPWZ1bmN0aW9uKCl7dmFyIGUsdCxvLHM9dGhpcztpZighMD09PXMub3B0aW9ucy5mYWRlJiYocy5vcHRpb25zLmNlbnRlck1vZGU9ITEpLCEwPT09cy5vcHRpb25zLmluZmluaXRlJiYhMT09PXMub3B0aW9ucy5mYWRlJiYodD1udWxsLHMuc2xpZGVDb3VudD5zLm9wdGlvbnMuc2xpZGVzVG9TaG93KSl7Zm9yKG89ITA9PT1zLm9wdGlvbnMuY2VudGVyTW9kZT9zLm9wdGlvbnMuc2xpZGVzVG9TaG93KzE6cy5vcHRpb25zLnNsaWRlc1RvU2hvdyxlPXMuc2xpZGVDb3VudDtlPnMuc2xpZGVDb3VudC1vO2UtPTEpdD1lLTEsaShzLiRzbGlkZXNbdF0pLmNsb25lKCEwKS5hdHRyKFwiaWRcIixcIlwiKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLHQtcy5zbGlkZUNvdW50KS5wcmVwZW5kVG8ocy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7Zm9yKGU9MDtlPG8rcy5zbGlkZUNvdW50O2UrPTEpdD1lLGkocy4kc2xpZGVzW3RdKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIix0K3Muc2xpZGVDb3VudCkuYXBwZW5kVG8ocy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7cy4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5maW5kKFwiW2lkXVwiKS5lYWNoKGZ1bmN0aW9uKCl7aSh0aGlzKS5hdHRyKFwiaWRcIixcIlwiKX0pfX0sZS5wcm90b3R5cGUuaW50ZXJydXB0PWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7aXx8ZS5hdXRvUGxheSgpLGUuaW50ZXJydXB0ZWQ9aX0sZS5wcm90b3R5cGUuc2VsZWN0SGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG89aShlLnRhcmdldCkuaXMoXCIuc2xpY2stc2xpZGVcIik/aShlLnRhcmdldCk6aShlLnRhcmdldCkucGFyZW50cyhcIi5zbGljay1zbGlkZVwiKSxzPXBhcnNlSW50KG8uYXR0cihcImRhdGEtc2xpY2staW5kZXhcIikpO3N8fChzPTApLHQuc2xpZGVDb3VudDw9dC5vcHRpb25zLnNsaWRlc1RvU2hvdz90LnNsaWRlSGFuZGxlcihzLCExLCEwKTp0LnNsaWRlSGFuZGxlcihzKX0sZS5wcm90b3R5cGUuc2xpZGVIYW5kbGVyPWZ1bmN0aW9uKGksZSx0KXt2YXIgbyxzLG4scixsLGQ9bnVsbCxhPXRoaXM7aWYoZT1lfHwhMSwhKCEwPT09YS5hbmltYXRpbmcmJiEwPT09YS5vcHRpb25zLndhaXRGb3JBbmltYXRlfHwhMD09PWEub3B0aW9ucy5mYWRlJiZhLmN1cnJlbnRTbGlkZT09PWkpKWlmKCExPT09ZSYmYS5hc05hdkZvcihpKSxvPWksZD1hLmdldExlZnQobykscj1hLmdldExlZnQoYS5jdXJyZW50U2xpZGUpLGEuY3VycmVudExlZnQ9bnVsbD09PWEuc3dpcGVMZWZ0P3I6YS5zd2lwZUxlZnQsITE9PT1hLm9wdGlvbnMuaW5maW5pdGUmJiExPT09YS5vcHRpb25zLmNlbnRlck1vZGUmJihpPDB8fGk+YS5nZXREb3RDb3VudCgpKmEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpITE9PT1hLm9wdGlvbnMuZmFkZSYmKG89YS5jdXJyZW50U2xpZGUsITAhPT10P2EuYW5pbWF0ZVNsaWRlKHIsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShvKX0pOmEucG9zdFNsaWRlKG8pKTtlbHNlIGlmKCExPT09YS5vcHRpb25zLmluZmluaXRlJiYhMD09PWEub3B0aW9ucy5jZW50ZXJNb2RlJiYoaTwwfHxpPmEuc2xpZGVDb3VudC1hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSExPT09YS5vcHRpb25zLmZhZGUmJihvPWEuY3VycmVudFNsaWRlLCEwIT09dD9hLmFuaW1hdGVTbGlkZShyLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUobyl9KTphLnBvc3RTbGlkZShvKSk7ZWxzZXtpZihhLm9wdGlvbnMuYXV0b3BsYXkmJmNsZWFySW50ZXJ2YWwoYS5hdXRvUGxheVRpbWVyKSxzPW88MD9hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT0wP2Euc2xpZGVDb3VudC1hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmEuc2xpZGVDb3VudCtvOm8+PWEuc2xpZGVDb3VudD9hLnNsaWRlQ291bnQlYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT0wPzA6by1hLnNsaWRlQ291bnQ6byxhLmFuaW1hdGluZz0hMCxhLiRzbGlkZXIudHJpZ2dlcihcImJlZm9yZUNoYW5nZVwiLFthLGEuY3VycmVudFNsaWRlLHNdKSxuPWEuY3VycmVudFNsaWRlLGEuY3VycmVudFNsaWRlPXMsYS5zZXRTbGlkZUNsYXNzZXMoYS5jdXJyZW50U2xpZGUpLGEub3B0aW9ucy5hc05hdkZvciYmKGw9KGw9YS5nZXROYXZUYXJnZXQoKSkuc2xpY2soXCJnZXRTbGlja1wiKSkuc2xpZGVDb3VudDw9bC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmbC5zZXRTbGlkZUNsYXNzZXMoYS5jdXJyZW50U2xpZGUpLGEudXBkYXRlRG90cygpLGEudXBkYXRlQXJyb3dzKCksITA9PT1hLm9wdGlvbnMuZmFkZSlyZXR1cm4hMCE9PXQ/KGEuZmFkZVNsaWRlT3V0KG4pLGEuZmFkZVNsaWRlKHMsZnVuY3Rpb24oKXthLnBvc3RTbGlkZShzKX0pKTphLnBvc3RTbGlkZShzKSx2b2lkIGEuYW5pbWF0ZUhlaWdodCgpOyEwIT09dD9hLmFuaW1hdGVTbGlkZShkLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUocyl9KTphLnBvc3RTbGlkZShzKX19LGUucHJvdG90eXBlLnN0YXJ0TG9hZD1mdW5jdGlvbigpe3ZhciBpPXRoaXM7ITA9PT1pLm9wdGlvbnMuYXJyb3dzJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGkuJHByZXZBcnJvdy5oaWRlKCksaS4kbmV4dEFycm93LmhpZGUoKSksITA9PT1pLm9wdGlvbnMuZG90cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmkuJGRvdHMuaGlkZSgpLGkuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9LGUucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGksZSx0LG8scz10aGlzO3JldHVybiBpPXMudG91Y2hPYmplY3Quc3RhcnRYLXMudG91Y2hPYmplY3QuY3VyWCxlPXMudG91Y2hPYmplY3Quc3RhcnRZLXMudG91Y2hPYmplY3QuY3VyWSx0PU1hdGguYXRhbjIoZSxpKSwobz1NYXRoLnJvdW5kKDE4MCp0L01hdGguUEkpKTwwJiYobz0zNjAtTWF0aC5hYnMobykpLG88PTQ1JiZvPj0wPyExPT09cy5vcHRpb25zLnJ0bD9cImxlZnRcIjpcInJpZ2h0XCI6bzw9MzYwJiZvPj0zMTU/ITE9PT1zLm9wdGlvbnMucnRsP1wibGVmdFwiOlwicmlnaHRcIjpvPj0xMzUmJm88PTIyNT8hMT09PXMub3B0aW9ucy5ydGw/XCJyaWdodFwiOlwibGVmdFwiOiEwPT09cy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz9vPj0zNSYmbzw9MTM1P1wiZG93blwiOlwidXBcIjpcInZlcnRpY2FsXCJ9LGUucHJvdG90eXBlLnN3aXBlRW5kPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbz10aGlzO2lmKG8uZHJhZ2dpbmc9ITEsby5zd2lwaW5nPSExLG8uc2Nyb2xsaW5nKXJldHVybiBvLnNjcm9sbGluZz0hMSwhMTtpZihvLmludGVycnVwdGVkPSExLG8uc2hvdWxkQ2xpY2s9IShvLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjEwKSx2b2lkIDA9PT1vLnRvdWNoT2JqZWN0LmN1clgpcmV0dXJuITE7aWYoITA9PT1vLnRvdWNoT2JqZWN0LmVkZ2VIaXQmJm8uJHNsaWRlci50cmlnZ2VyKFwiZWRnZVwiLFtvLG8uc3dpcGVEaXJlY3Rpb24oKV0pLG8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+PW8udG91Y2hPYmplY3QubWluU3dpcGUpe3N3aXRjaCh0PW8uc3dpcGVEaXJlY3Rpb24oKSl7Y2FzZVwibGVmdFwiOmNhc2VcImRvd25cIjplPW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/by5jaGVja05hdmlnYWJsZShvLmN1cnJlbnRTbGlkZStvLmdldFNsaWRlQ291bnQoKSk6by5jdXJyZW50U2xpZGUrby5nZXRTbGlkZUNvdW50KCksby5jdXJyZW50RGlyZWN0aW9uPTA7YnJlYWs7Y2FzZVwicmlnaHRcIjpjYXNlXCJ1cFwiOmU9by5vcHRpb25zLnN3aXBlVG9TbGlkZT9vLmNoZWNrTmF2aWdhYmxlKG8uY3VycmVudFNsaWRlLW8uZ2V0U2xpZGVDb3VudCgpKTpvLmN1cnJlbnRTbGlkZS1vLmdldFNsaWRlQ291bnQoKSxvLmN1cnJlbnREaXJlY3Rpb249MX1cInZlcnRpY2FsXCIhPXQmJihvLnNsaWRlSGFuZGxlcihlKSxvLnRvdWNoT2JqZWN0PXt9LG8uJHNsaWRlci50cmlnZ2VyKFwic3dpcGVcIixbbyx0XSkpfWVsc2Ugby50b3VjaE9iamVjdC5zdGFydFghPT1vLnRvdWNoT2JqZWN0LmN1clgmJihvLnNsaWRlSGFuZGxlcihvLmN1cnJlbnRTbGlkZSksby50b3VjaE9iamVjdD17fSl9LGUucHJvdG90eXBlLnN3aXBlSGFuZGxlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2lmKCEoITE9PT1lLm9wdGlvbnMuc3dpcGV8fFwib250b3VjaGVuZFwiaW4gZG9jdW1lbnQmJiExPT09ZS5vcHRpb25zLnN3aXBlfHwhMT09PWUub3B0aW9ucy5kcmFnZ2FibGUmJi0xIT09aS50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSkpc3dpdGNoKGUudG91Y2hPYmplY3QuZmluZ2VyQ291bnQ9aS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlcz9pLm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGg6MSxlLnRvdWNoT2JqZWN0Lm1pblN3aXBlPWUubGlzdFdpZHRoL2Uub3B0aW9ucy50b3VjaFRocmVzaG9sZCwhMD09PWUub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcmJihlLnRvdWNoT2JqZWN0Lm1pblN3aXBlPWUubGlzdEhlaWdodC9lLm9wdGlvbnMudG91Y2hUaHJlc2hvbGQpLGkuZGF0YS5hY3Rpb24pe2Nhc2VcInN0YXJ0XCI6ZS5zd2lwZVN0YXJ0KGkpO2JyZWFrO2Nhc2VcIm1vdmVcIjplLnN3aXBlTW92ZShpKTticmVhaztjYXNlXCJlbmRcIjplLnN3aXBlRW5kKGkpfX0sZS5wcm90b3R5cGUuc3dpcGVNb3ZlPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbyxzLG4scixsPXRoaXM7cmV0dXJuIG49dm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50P2kub3JpZ2luYWxFdmVudC50b3VjaGVzOm51bGwsISghbC5kcmFnZ2luZ3x8bC5zY3JvbGxpbmd8fG4mJjEhPT1uLmxlbmd0aCkmJihlPWwuZ2V0TGVmdChsLmN1cnJlbnRTbGlkZSksbC50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PW4/blswXS5wYWdlWDppLmNsaWVudFgsbC50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PW4/blswXS5wYWdlWTppLmNsaWVudFksbC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhsLnRvdWNoT2JqZWN0LmN1clgtbC50b3VjaE9iamVjdC5zdGFydFgsMikpKSxyPU1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KGwudG91Y2hPYmplY3QuY3VyWS1sLnRvdWNoT2JqZWN0LnN0YXJ0WSwyKSkpLCFsLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYhbC5zd2lwaW5nJiZyPjQ/KGwuc2Nyb2xsaW5nPSEwLCExKTooITA9PT1sLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYobC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1yKSx0PWwuc3dpcGVEaXJlY3Rpb24oKSx2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQmJmwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+NCYmKGwuc3dpcGluZz0hMCxpLnByZXZlbnREZWZhdWx0KCkpLHM9KCExPT09bC5vcHRpb25zLnJ0bD8xOi0xKSoobC50b3VjaE9iamVjdC5jdXJYPmwudG91Y2hPYmplY3Quc3RhcnRYPzE6LTEpLCEwPT09bC5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyYmKHM9bC50b3VjaE9iamVjdC5jdXJZPmwudG91Y2hPYmplY3Quc3RhcnRZPzE6LTEpLG89bC50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCxsLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITEsITE9PT1sLm9wdGlvbnMuaW5maW5pdGUmJigwPT09bC5jdXJyZW50U2xpZGUmJlwicmlnaHRcIj09PXR8fGwuY3VycmVudFNsaWRlPj1sLmdldERvdENvdW50KCkmJlwibGVmdFwiPT09dCkmJihvPWwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgqbC5vcHRpb25zLmVkZ2VGcmljdGlvbixsLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITApLCExPT09bC5vcHRpb25zLnZlcnRpY2FsP2wuc3dpcGVMZWZ0PWUrbypzOmwuc3dpcGVMZWZ0PWUrbyoobC4kbGlzdC5oZWlnaHQoKS9sLmxpc3RXaWR0aCkqcywhMD09PWwub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcmJihsLnN3aXBlTGVmdD1lK28qcyksITAhPT1sLm9wdGlvbnMuZmFkZSYmITEhPT1sLm9wdGlvbnMudG91Y2hNb3ZlJiYoITA9PT1sLmFuaW1hdGluZz8obC5zd2lwZUxlZnQ9bnVsbCwhMSk6dm9pZCBsLnNldENTUyhsLnN3aXBlTGVmdCkpKSl9LGUucHJvdG90eXBlLnN3aXBlU3RhcnQ9ZnVuY3Rpb24oaSl7dmFyIGUsdD10aGlzO2lmKHQuaW50ZXJydXB0ZWQ9ITAsMSE9PXQudG91Y2hPYmplY3QuZmluZ2VyQ291bnR8fHQuc2xpZGVDb3VudDw9dC5vcHRpb25zLnNsaWRlc1RvU2hvdylyZXR1cm4gdC50b3VjaE9iamVjdD17fSwhMTt2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQmJnZvaWQgMCE9PWkub3JpZ2luYWxFdmVudC50b3VjaGVzJiYoZT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXSksdC50b3VjaE9iamVjdC5zdGFydFg9dC50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PWU/ZS5wYWdlWDppLmNsaWVudFgsdC50b3VjaE9iamVjdC5zdGFydFk9dC50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PWU/ZS5wYWdlWTppLmNsaWVudFksdC5kcmFnZ2luZz0hMH0sZS5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXM9ZS5wcm90b3R5cGUuc2xpY2tVbmZpbHRlcj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7bnVsbCE9PWkuJHNsaWRlc0NhY2hlJiYoaS51bmxvYWQoKSxpLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksaS4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oaS4kc2xpZGVUcmFjayksaS5yZWluaXQoKSl9LGUucHJvdG90eXBlLnVubG9hZD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aShcIi5zbGljay1jbG9uZWRcIixlLiRzbGlkZXIpLnJlbW92ZSgpLGUuJGRvdHMmJmUuJGRvdHMucmVtb3ZlKCksZS4kcHJldkFycm93JiZlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLnByZXZBcnJvdykmJmUuJHByZXZBcnJvdy5yZW1vdmUoKSxlLiRuZXh0QXJyb3cmJmUuaHRtbEV4cHIudGVzdChlLm9wdGlvbnMubmV4dEFycm93KSYmZS4kbmV4dEFycm93LnJlbW92ZSgpLGUuJHNsaWRlcy5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLmNzcyhcIndpZHRoXCIsXCJcIil9LGUucHJvdG90eXBlLnVuc2xpY2s9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztlLiRzbGlkZXIudHJpZ2dlcihcInVuc2xpY2tcIixbZSxpXSksZS5kZXN0cm95KCl9LGUucHJvdG90eXBlLnVwZGF0ZUFycm93cz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7TWF0aC5mbG9vcihpLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLCEwPT09aS5vcHRpb25zLmFycm93cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiFpLm9wdGlvbnMuaW5maW5pdGUmJihpLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIiksaS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLDA9PT1pLmN1cnJlbnRTbGlkZT8oaS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksaS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKTppLmN1cnJlbnRTbGlkZT49aS5zbGlkZUNvdW50LWkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiExPT09aS5vcHRpb25zLmNlbnRlck1vZGU/KGkuJG5leHRBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGkuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSk6aS5jdXJyZW50U2xpZGU+PWkuc2xpZGVDb3VudC0xJiYhMD09PWkub3B0aW9ucy5jZW50ZXJNb2RlJiYoaS4kbmV4dEFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksaS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKSl9LGUucHJvdG90eXBlLnVwZGF0ZURvdHM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO251bGwhPT1pLiRkb3RzJiYoaS4kZG90cy5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuZW5kKCksaS4kZG90cy5maW5kKFwibGlcIikuZXEoTWF0aC5mbG9vcihpLmN1cnJlbnRTbGlkZS9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKSl9LGUucHJvdG90eXBlLnZpc2liaWxpdHk9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kub3B0aW9ucy5hdXRvcGxheSYmKGRvY3VtZW50W2kuaGlkZGVuXT9pLmludGVycnVwdGVkPSEwOmkuaW50ZXJydXB0ZWQ9ITEpfSxpLmZuLnNsaWNrPWZ1bmN0aW9uKCl7dmFyIGksdCxvPXRoaXMscz1hcmd1bWVudHNbMF0sbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkscj1vLmxlbmd0aDtmb3IoaT0wO2k8cjtpKyspaWYoXCJvYmplY3RcIj09dHlwZW9mIHN8fHZvaWQgMD09PXM/b1tpXS5zbGljaz1uZXcgZShvW2ldLHMpOnQ9b1tpXS5zbGlja1tzXS5hcHBseShvW2ldLnNsaWNrLG4pLHZvaWQgMCE9PXQpcmV0dXJuIHQ7cmV0dXJuIG99fSk7XG4iLCIvKlxuXHRGb2N1cyBhdSBjbGljIHN1ciB1biBsaWVuIG91IHVuIGJvdXRvblxuXHRFeGVtcGxlIGRlIHN5bnRheGUgOiA8YSBjbGFzcz1cIlwiIGhyZWY9XCIjXCIgdGl0bGU9XCJSZWNoZXJjaGVyXCIgZGF0YS1jbGljay1mb2N1cz1cIiNzZWFyY2hcIj5SZWNoZXJjaGU8L2E+XG4qL1xualF1ZXJ5KCdidXR0b25bZGF0YS1jbGljay1mb2N1c10sIGFbZGF0YS1jbGljay1mb2N1c10nKS5lYWNoKGZ1bmN0aW9uKGksaikge1xuXHRqUXVlcnkodGhpcykuY2xpY2soZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgZm9jdXNpbiA9IGpRdWVyeShqKS5hdHRyKCdkYXRhLWNsaWNrLWZvY3VzJyk7XG5cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRqUXVlcnkoZm9jdXNpbikuZm9jdXMoKTtcblx0XHR9LDQwMCk7XG5cblx0fSk7XG59KTtcbiIsIi8vIEdldCBJRSBvciBFZGdlIGJyb3dzZXIgdmVyc2lvblxudmFyIHZlcnNpb24gPSBkZXRlY3RJRSgpO1xuXG5pZiAodmVyc2lvbiA9PT0gZmFsc2UpIHtcblx0Ly8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29sZGJyb3dzZXJub3RpY2UnKS5pbm5lckhUTUwgPSAnPHM+SUUvRWRnZTwvcz4nO1xufSBlbHNlIGlmICh2ZXJzaW9uID49IDEyKSB7XG5cdC8vIGlzIEVER0Vcblx0Ly8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29sZGJyb3dzZXJub3RpY2UnKS5pbm5lckhUTUwgPSAnRWRnZSAnICsgdmVyc2lvbjtcbn0gZWxzZSBpZiAodmVyc2lvbiA+PSAxMSkge1xuXHQvLyBpcyBJRSAxMVxufSBlbHNlIHtcblx0JCgnI29sZGJyb3dzZXJub3RpY2UnKS5hZGRDbGFzcyggXCJpcy1hY3RpdmVcIiApO1xuXHQkKCdib2R5JykuYWRkQ2xhc3MoIFwiaXMtb2xkYnJvd3NlclwiICk7XG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvbGRicm93c2Vybm90aWNlJykuaW5uZXJIVE1MID0gc2twLm9sZGJyb3dzZXJfbXNnO1xufVxuXG4vLyBhZGQgZGV0YWlscyB0byBkZWJ1ZyByZXN1bHRcbi8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzJykuaW5uZXJIVE1MID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbi8qKlxuICogZGV0ZWN0IElFXG4gKiByZXR1cm5zIHZlcnNpb24gb2YgSUUgb3IgZmFsc2UsIGlmIGJyb3dzZXIgaXMgbm90IEludGVybmV0IEV4cGxvcmVyXG4gKi9cbmZ1bmN0aW9uIGRldGVjdElFKCkge1xuXHR2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuXHQvLyBUZXN0IHZhbHVlczsgVW5jb21tZW50IHRvIGNoZWNrIHJlc3VsdCDigKZcblxuXHQvLyBJRSAxMFxuXHQvLyB1YSA9ICdNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSAxMC4wOyBXaW5kb3dzIE5UIDYuMjsgVHJpZGVudC82LjApJztcblxuXHQvLyBJRSAxMVxuXHQvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjM7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztcblxuXHQvLyBFZGdlIDEyIChTcGFydGFuKVxuXHQvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzM5LjAuMjE3MS43MSBTYWZhcmkvNTM3LjM2IEVkZ2UvMTIuMCc7XG5cblx0Ly8gRWRnZSAxM1xuXHQvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNDYuMC4yNDg2LjAgU2FmYXJpLzUzNy4zNiBFZGdlLzEzLjEwNTg2JztcblxuXHR2YXIgbXNpZSA9IHVhLmluZGV4T2YoJ01TSUUgJyk7XG5cdGlmIChtc2llID4gMCkge1xuXHRcdC8vIElFIDEwIG9yIG9sZGVyID0+IHJldHVybiB2ZXJzaW9uIG51bWJlclxuXHRcdHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcobXNpZSArIDUsIHVhLmluZGV4T2YoJy4nLCBtc2llKSksIDEwKTtcblx0fVxuXG5cdHZhciB0cmlkZW50ID0gdWEuaW5kZXhPZignVHJpZGVudC8nKTtcblx0aWYgKHRyaWRlbnQgPiAwKSB7XG5cdFx0Ly8gSUUgMTEgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXG5cdFx0dmFyIHJ2ID0gdWEuaW5kZXhPZigncnY6Jyk7XG5cdFx0cmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhydiArIDMsIHVhLmluZGV4T2YoJy4nLCBydikpLCAxMCk7XG5cdH1cblxuXHR2YXIgZWRnZSA9IHVhLmluZGV4T2YoJ0VkZ2UvJyk7XG5cdGlmIChlZGdlID4gMCkge1xuXHRcdC8vIEVkZ2UgKElFIDEyKykgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXG5cdFx0cmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhlZGdlICsgNSwgdWEuaW5kZXhPZignLicsIGVkZ2UpKSwgMTApO1xuXHR9XG5cblx0Ly8gb3RoZXIgYnJvd3NlclxuXHRyZXR1cm4gZmFsc2U7XG59XG4iLCJqUXVlcnkoICdpZnJhbWVbc3JjKj1cInlvdXR1YmUuY29tXCJdJykud3JhcChcIjxkaXYgY2xhc3M9J3Jlc3BvbnNpdmUtZW1iZWQgd2lkZXNjcmVlbiB5b3V0dWJlJy8+XCIpO1xyXG5qUXVlcnkoICdpZnJhbWVbc3JjKj1cInZpbWVvLmNvbVwiXScpLndyYXAoXCI8ZGl2IGNsYXNzPSdyZXNwb25zaXZlLWVtYmVkIHdpZGVzY3JlZW4gdmltZW8nLz5cIik7XHJcbmpRdWVyeSggJ2lmcmFtZVtzcmMqPVwiZGFpbHltb3Rpb24uY29tXCJdJykud3JhcChcIjxkaXYgY2xhc3M9J3Jlc3BvbnNpdmUtZW1iZWQgd2lkZXNjcmVlbiBkYWlseW1vdGlvbicvPlwiKTtcclxuIiwiLypcblx0Q2FjaGVyIGxlcyBudW3DqXJvcyBwYXIgZMOpZmF1dFxuXHRFeGVtcGxlIGRlIHN5bnRheGUgOiA8YSBjbGFzcz1cIlwiIGhyZWY9XCJ0ZWw6KzMzKDApMzg5NjA3MTYxXCIgdGl0bGU9XCJOb3VzIGFwcGVsZXJcIiBkYXRhLWhpZGVudW09XCI8P3BocCBfZSgnQXBwZWxlei1ub3VzJywnc2twJyk7ID8+XCI+KzMzICgwKTMgODkgNjAgNzEgNjE8L2E+XG5cdGRhdGEtaGlkZW51bT1cIjw/cGhwIF9lKCdBcHBlbGV6LW5vdXMnLCdza3AnKTsgPz5cIlxuKi9cblxualF1ZXJ5KCdhW2RhdGEtaGlkZW51bV0nKS5lYWNoKGZ1bmN0aW9uKGksaikge1xuXHRqUXVlcnkodGhpcykuYWRkQ2xhc3MoJ3Bob25lbGluaycpO1xuXG5cdGpRdWVyeShqKS53cmFwQWxsKCc8c3BhbiBjbGFzcz1cImhpZGVwaG9uZVwiPjwvc3Bhbj4nKTtcblx0dmFyIGhpZGVudW10eHQgPSBqUXVlcnkoaikuYXR0cignZGF0YS1oaWRlbnVtJyk7XG5cdHZhciBwaG9uZW51bSA9IGpRdWVyeShqKS5hdHRyKFwiaHJlZlwiKTtcblx0dmFyIHBob25lY2xhc3MgPSBqUXVlcnkoaikuYXR0cihcImNsYXNzXCIpO1xuXHRpZiggaGlkZW51bXR4dCA9PSBcIlwiICkge1xuXHRcdGhpZGVudW10eHQgPSBcIkFwcGVsZXotbm91c1wiO1xuXHR9XG5cblx0alF1ZXJ5KHRoaXMpLmFkZENsYXNzKCdoaWRlcGhvbmUtbGluaycpO1xuXG5cdHZhciBwaG9uZWljb24gPSAnJztcblx0aWYoIGpRdWVyeShqKS5maW5kKFwiaVwiKS5sZW5ndGggPiAwICkge1xuXHRcdHBob25laWNvbiA9IGpRdWVyeShqKS5maW5kKFwiaVwiKS5wcm9wKCdvdXRlckhUTUwnKTtcblx0XHRpZiggIWpRdWVyeShqKS5oYXNDbGFzcygnd2l0aC1pY28nKSApIHtcblx0XHRcdHBob25lY2xhc3MgPSBwaG9uZWNsYXNzICsgJyB3aXRoLWljbyc7XG5cdFx0fVxuXHR9XG5cblx0dmFyIHBob25ldGl0bGU7XG5cdGlmKCBqUXVlcnkoaikuYXR0cihcInRpdGxlXCIpICkge1xuXHRcdHBob25ldGl0bGUgPSBqUXVlcnkoaikuYXR0cihcInRpdGxlXCIpO1xuXHR9IGVsc2Uge1xuXHRcdHBob25ldGl0bGUgPSBcIlwiO1xuXHR9XG5cblx0alF1ZXJ5KGopLmFmdGVyKCc8c3BhbiBjbGFzcz1cImhpZGVwaG9uZS10eHQgJysgcGhvbmVjbGFzcyArJ1wiIGRhdGEtcGhvbmU9XCInKyBwaG9uZW51bSArJ1wiIHRpdGxlPVwiJysgcGhvbmV0aXRsZSArJ1wiPicrIHBob25laWNvbiArJyAnKyBoaWRlbnVtdHh0ICsnPC9zcGFuPicpO1xuXG5cdC8vIGlmKGpRdWVyeShqKS5oYXNDbGFzcygnYnV0dG9uJykpIHtcblx0Ly8gXHRqUXVlcnkoaikuYWZ0ZXIoJzxzcGFuIGNsYXNzPVwiaGlkZXBob25lLXR4dCBidXR0b25cIiBkYXRhLXBob25lPVwiJysgcGhvbmVudW0gKydcIiB0aXRsZT1cIicrIHBob25ldGl0bGUgKydcIj4nKyBoaWRlbnVtdHh0ICsnPC9zcGFuPicpO1xuXHQvLyB9IGVsc2Uge1xuXHQvLyBcdGpRdWVyeShqKS5hZnRlcignPHNwYW4gY2xhc3M9XCJoaWRlcGhvbmUtdHh0IGxpbmtcIiBkYXRhLXBob25lPVwiJysgcGhvbmVudW0gKydcIiB0aXRsZT1cIicrIHBob25ldGl0bGUgKydcIj4nKyBoaWRlbnVtdHh0ICsnPC9zcGFuPicpO1xuXHQvLyB9XG59KTtcbmpRdWVyeSgnYm9keScpLm9uKCdjbGljaycsICcuaGlkZXBob25lJywgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeSh0aGlzKS5hZGRDbGFzcygndmlzaWJsZScpO1xufSk7XG4iLCIvKlxuXHRBam91dCB1bmUgY2xhc3MgXCJpcy1ob3ZlclwiIHN1ciBsZSBibG9jayBsb3JzcXUndW4gZGVzIGxpZW5zIHByw6lzZW50IGRhbnMgY2UgbcOqbWUgYmxvY2sgZXN0IHN1cnZvbMOpXG4qL1xuXG5qUXVlcnkoJy5saW5rc2hvdmVyLWJsb2NrJykuZWFjaChmdW5jdGlvbihpLGopIHtcblx0alF1ZXJ5KCcubGlua3Nob3Zlci1saW5rJywgaikuZWFjaChmdW5jdGlvbihrLGwpIHtcblx0XHRqUXVlcnkobCkuaG92ZXIoXG5cdFx0XHRmdW5jdGlvbigpeyBqUXVlcnkoaikuYWRkQ2xhc3MoJ2lzLWhvdmVyJykgfSxcblx0XHRcdGZ1bmN0aW9uKCl7IGpRdWVyeShqKS5yZW1vdmVDbGFzcygnaXMtaG92ZXInKSB9XG5cdFx0XHQvL2Z1bmN0aW9uKCl7IGpRdWVyeShqKS50b2dnbGVDbGFzcygnaXMtaG92ZXInKSB9XG5cdFx0KVxuXHR9KTtcbn0pO1xuIiwialF1ZXJ5KGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblx0alF1ZXJ5KGRvY3VtZW50KS5mb3VuZGF0aW9uKCk7XHJcbn0pO1xyXG4iLCJqUXVlcnkod2luZG93KS5vbihcInNjcm9sbCBsb2FkXCIsIGZ1bmN0aW9uKCkge1xuXHRpZiAoalF1ZXJ5KHdpbmRvdykuc2Nyb2xsVG9wKCkgPiA0MCkge1xuXHRcdGpRdWVyeSgnYm9keSwgLmhlYWRlcnNpdGUtbWFpbicpLmFkZENsYXNzKCdpcy1zY3JvbGxpbmcnKTtcblx0XHQvL2NvbnNvbGUubG9nKCdpbnNjcm9sbCcpO1xuXHR9ZWxzZSB7XG5cdFx0alF1ZXJ5KCdib2R5LCAuaGVhZGVyc2l0ZS1tYWluJykucmVtb3ZlQ2xhc3MoJ2lzLXNjcm9sbGluZycpO1xuXHRcdC8vY29uc29sZS5sb2coJ3JlbW92ZSBzY3JvbGwnKTtcblx0fVxufSk7XG4iLCIvKmpRdWVyeShmdW5jdGlvbigpIHtcblx0alF1ZXJ5KCd1bC5zdWItbWVudSA+IGxpJykuaG92ZXIoZnVuY3Rpb24oKSB7XG5cdFx0aWYgKGpRdWVyeSh0aGlzKS5maW5kKCd1bCcpLmxlbmd0aCA+PSAxKSB7XG5cdFx0XHRpZiAoaXNPdXRPZlZpZXdwb3J0KHRoaXMpKVxuXHRcdFx0XHRqUXVlcnkodGhpcykuY2hpbGRyZW4oJ3VsJykuY3NzKHsnbGVmdCc6J2F1dG8nLCdyaWdodCc6JzEwMCUnfSk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGpRdWVyeSh0aGlzKS5jaGlsZHJlbigndWwnKS5jc3MoeydsZWZ0JzonMTAwJScsJ3JpZ2h0JzonYXV0byd9KTtcblx0XHR9XG5cdH0pO1xuXHRqUXVlcnkoJ3VsLm1lbnUgPiBsaScpLmhvdmVyKGZ1bmN0aW9uKCkge1xuXHRcdGlmIChqUXVlcnkodGhpcykuZmluZCgndWwnKS5sZW5ndGggPj0gMSkge1xuXHRcdFx0aWYgKGlzT3V0T2ZWaWV3cG9ydCh0aGlzKSlcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLmNoaWxkcmVuKCd1bCcpLmNzcyh7J3JpZ2h0JzonMCd9KTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLmNoaWxkcmVuKCd1bCcpLmNzcyh7J3JpZ2h0JzonYXV0byd9KTtcblx0XHR9XG5cdH0pO1xufSk7Ki9cblxuLy8gQWpvdXQgZWxlbWVudCBwYXJlbnQgb2ZmY2FudmFzXG5qUXVlcnkoZnVuY3Rpb24oKSB7XG5cblx0dmFyIG9jc3ViID0galF1ZXJ5KCcjZ2xvYmFsIC5vZmYtY2FudmFzIC5pcy1hY2NvcmRpb24tc3VibWVudScpO1xuXHRvY3N1Yi5lYWNoKGZ1bmN0aW9uKGksIGopIHtcblx0XHRvY3N1Yl9uYW1lID0gJyc7XG5cdFx0aWYoalF1ZXJ5KGopLnByZXYoJ2EnKS5hdHRyKFwiZGF0YS1zZWNvbmRhcnktbmFtZVwiKSkge1xuXHRcdFx0b2NzdWJfbmFtZSA9IGpRdWVyeShqKS5wcmV2KCdhJykuYXR0cihcImRhdGEtc2Vjb25kYXJ5LW5hbWVcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9jc3ViX25hbWUgPSBqUXVlcnkoaikucHJldignYScpLmh0bWwoKTtcblx0XHR9XG5cdFx0alF1ZXJ5KGopLnByZXBlbmQoJzxsaSBjbGFzcz1cInBhcmVudC1saW5rIG1lbnUtaXRlbSBtZW51LWl0ZW0tdHlwZS1wb3N0X3R5cGUgbWVudS1pdGVtLW9iamVjdC1wYWdlIGlzLXN1Ym1lbnUtaXRlbSBpcy1hY2NvcmRpb24tc3VibWVudS1pdGVtXCI+PGEgaHJlZj1cIicgKyBqUXVlcnkoaikucHJldignYScpLmF0dHIoJ2hyZWYnKSArICdcIj4nICsgb2NzdWJfbmFtZSArICc8L2E+PC9saT4nKTtcblx0fSk7XG5cbn0pO1xuXG5qUXVlcnkod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuXG5cdC8vIFN5bmMgT3ZlcmxheSBvZmZjYW52YXMtbWVudSAtIGljb24gbWVudVxuXHRqUXVlcnkoXCIuanMtb2ZmLWNhbnZhcy1vdmVybGF5XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeShcIiNpY29idXJnZXJcIikucmVtb3ZlQ2xhc3MoXCJpcy1hY3RpdmVcIik7XG5cdH0pO1xuXG5cdC8vIFdpbmRvd3MgRml4XG5cdHZhciBtZCA9IG5ldyBNb2JpbGVEZXRlY3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuXHQvL2NvbnNvbGUubG9nKG1kLnZlcnNpb24oJ1RyaWRlbnQnKSxtZC52ZXJzaW9uKCdFZGdlJykpO1xuXHRpZigobWQudmVyc2lvbignVHJpZGVudCcpKSB8fCAobWQudmVyc2lvbignRWRnZScpKSApIHtcblx0XHRqUXVlcnkoJyNtZW51c2l0ZS10b3BiYXIgdWwgbGkgPiBhJykuYmluZCgncG9pbnRlcmRvd24nLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoZS5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlID09ICd0b3VjaCcpIHtcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdFx0XHR9XG5cdFx0XHQvL2NvbnNvbGUubG9nKGUub3JpZ2luYWxFdmVudC5wb2ludGVyVHlwZSwgZS5vcmlnaW5hbEV2ZW50LnR5cGUpO1xuXHRcdH0pO1xuXHR9XG5cbn0pOy8vIEVORCAod2luZG93KS5vbignbG9hZCcpXG4iLCIvKioqKioqKioqKioqKioqKioqKioqXG4gKiogU2tlbFByZXNzIFRvb2xzICoqXG4gKioqKioqKioqKioqKioqKioqKioqL1xuLy8gUHJlbWnDqHJlIGxldHRyZSBlbiBjYXBpdGFsZVxuZnVuY3Rpb24gY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHN0cmluZykge1xuXHRyZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnN1YnN0cigxKTtcbn1cbi8vIFLDqWN1cMOpcmVyIGxhIHRhaWxsZSByw6llbGxlIGR1IGRvY3VtZW50IChpbmNsdWFudCBsYSBzY3JvbGxiYXIpXG5mdW5jdGlvbiBkb2N1bWVudHNpemUoKSB7XG5cdHZhciBkcyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcblx0Ly8gQW5jaWVubmUgbcOpdGhvZGUgKGluY29tcGF0aWJsZSBhdmVjIHNjcm9sbERvd24pXG5cdC8vdmFyIGRzID0galF1ZXJ5KCdib2R5JykuY3NzKHsnb3ZlcmZsb3cnOidoaWRkZW4nfSkud2lkdGgoKTtcblx0Ly9qUXVlcnkoJ2JvZHknKS5jc3MoeydvdmVyZmxvdyc6Jyd9KTtcblx0cmV0dXJuIGRzO1xufVxuLy8gRMOpY29tcG9zaXRpb24gZGVzIFVSTCdzIHBvdXIgbGUgdHJhaXRlbWVudFxuZnVuY3Rpb24gcGFyc2VVUkwodXJsKSB7XG5cdHZhciBhID0gIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0YS5ocmVmID0gdXJsO1xuXHRyZXR1cm4ge1xuXHRcdHNvdXJjZTogdXJsLFxuXHRcdHByb3RvY29sOiBhLnByb3RvY29sLnJlcGxhY2UoJzonLCcnKSxcblx0XHRob3N0OiBhLmhvc3RuYW1lLFxuXHRcdHBvcnQ6IGEucG9ydCxcblx0XHRxdWVyeTogYS5zZWFyY2gsXG5cdFx0cGFyYW1zOiAoZnVuY3Rpb24oKXtcblx0XHRcdHZhciByZXQgPSB7fSxcblx0XHRcdHNlZyA9IGEuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCcnKS5zcGxpdCgnJicpLFxuXHRcdFx0bGVuID0gc2VnLmxlbmd0aCwgaSA9IDAsIHM7XG5cdFx0XHRmb3IgKDtpPGxlbjtpKyspIHtcblx0XHRcdFx0aWYgKCFzZWdbaV0pIHsgY29udGludWU7IH1cblx0XHRcdFx0cyA9IHNlZ1tpXS5zcGxpdCgnPScpO1xuXHRcdFx0XHRyZXRbc1swXV0gPSBzWzFdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9KSgpLFxuXHRcdGZpbGU6IChhLnBhdGhuYW1lLm1hdGNoKC9cXC8oW15cXC8/I10rKSQvaSkgfHwgWycnLCcnXSlbMV0sXG5cdFx0aGFzaDogYS5oYXNoLnJlcGxhY2UoJyMnLCcnKSxcblx0XHRwYXRoOiBhLnBhdGhuYW1lLnJlcGxhY2UoL14oW15cXC9dKS8sJy8kMScpLFxuXHRcdHJlbGF0aXZlOiAoYS5ocmVmLm1hdGNoKC90cHM/OlxcL1xcL1teXFwvXSsoLispLykgfHwgWycnLCcnXSlbMV0sXG5cdFx0c2VnbWVudHM6IGEucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sJycpLnNwbGl0KCcvJylcblx0fTtcbn1cbi8vIFBhZ2UgcHLDqWPDqWRlbnRlIG91IHBhZ2UgcsOpZsOpcmVudGVcbmZ1bmN0aW9uIGhpc3RvcnliYWNrKHJlZnVybCkge1xuXHR2YXIgaHJlZmVycmVyID0gcGFyc2VVUkwoZG9jdW1lbnQucmVmZXJyZXIpO1xuXHRpZiAod2luZG93Lmhpc3RvcnkubGVuZ3RoIDw9IDIgfHwgaHJlZmVycmVyLmhvc3QgIT0gd2luZG93LmxvY2F0aW9uLmhvc3QpIHtcblx0XHR3aW5kb3cubG9jYXRpb24gPSByZWZ1cmw7XG5cdH0gZWxzZVxuXHRcdHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbn1cbi8vIFbDqXJpZmllIHNpIGwnw6lsw6ltZW50IGR1IHNvdXMtbWVudSBlc3QgZW4gZGVob3JzIGRlIGxhIGZlbsOqdHJlXG5mdW5jdGlvbiBpc091dE9mVmlld3BvcnQoZWxtdCkge1xuXHR2YXIgZHMgPSBkb2N1bWVudHNpemUoKTtcblx0dmFyICRlbG10ID0galF1ZXJ5KGVsbXQpLmNoaWxkcmVuKCd1bCcpO1xuXHR2YXIgcG9zd3ggPSAkZWxtdC5vZmZzZXQoKS5sZWZ0ICsgJGVsbXQud2lkdGgoKSArIDIwO1xuXHRpZiAocG9zd3ggPiBkcykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG4vKlxuICogZ2V0U3R5bGVPYmplY3QgUGx1Z2luIGZvciBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5XG4gKiBGcm9tOiBodHRwOi8vdXBzaG90cy5vcmcvP3A9MTEyXG4gKi9cbi8vIFLDqWN1cMOpcmF0aW9uIGR1IHN0eWxlIGNvbXBsZXQgZCd1biBhdXRyZSDDqWzDqW1lbnQgKGNsb25lKVxuKGZ1bmN0aW9uKCQpe1xuXHQkLmZuLmdldFN0eWxlT2JqZWN0ID0gZnVuY3Rpb24oKXtcblx0XHR2YXIgZG9tID0gdGhpcy5nZXQoMCk7XG5cdFx0dmFyIHN0eWxlO1xuXHRcdHZhciBwcm9wO1xuXHRcdHZhciByZXR1cm5zID0ge307XG5cdFx0aWYod2luZG93LmdldENvbXB1dGVkU3R5bGUpe1xuXHRcdFx0dmFyIGNhbWVsaXplID0gZnVuY3Rpb24oYSxiKXtcblx0XHRcdFx0cmV0dXJuIGIudG9VcHBlckNhc2UoKTtcblx0XHRcdH07XG5cdFx0XHRzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvbSwgbnVsbCk7XG5cdFx0XHRmb3IodmFyIGkgPSAwLCBsID0gc3R5bGUubGVuZ3RoOyBpIDwgbDsgaSsrKXtcblx0XHRcdFx0cHJvcCA9IHN0eWxlW2ldO1xuXHRcdFx0XHR2YXIgY2FtZWwgPSBwcm9wLnJlcGxhY2UoL1xcLShbYS16XSkvZywgY2FtZWxpemUpO1xuXHRcdFx0XHR2YXIgdmFsID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcblx0XHRcdFx0cmV0dXJuc1tjYW1lbF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0dXJucztcblx0XHR9XG5cdFx0c3R5bGUgPSBkb20uY3VycmVudFN0eWxlO1xuXHRcdGlmKHN0eWxlKXtcblx0XHRcdGZvcihwcm9wIGluIHN0eWxlKXtcblx0XHRcdFx0cmV0dXJuc1twcm9wXSA9IHN0eWxlW3Byb3BdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldHVybnM7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmNzcygpO1xuXHR9O1xufSkoalF1ZXJ5KTtcblxuXG5qUXVlcnkod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuXG5cdC8vIFN5bmMgT3ZlcmxheSBvZmZjYW52YXMtbWVudSAtIGljb24gbWVudVxuXHRqUXVlcnkoXCIuanMtb2ZmLWNhbnZhcy1vdmVybGF5XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeShcIiNpY29idXJnZXJcIikucmVtb3ZlQ2xhc3MoXCJpcy1hY3RpdmVcIik7XG5cdH0pO1xuXG5cdC8vIGFkZGl0aW9uIGZvciBzd2lwZWJveCwgY2xvc2luZyBpbWcgb24gY2xpY2sgb24gYmdcblx0alF1ZXJ5KGZ1bmN0aW9uKCl7XG5cdFx0alF1ZXJ5KGRvY3VtZW50LmJvZHkpXG5cdFx0Lm9uKCdjbGljayB0b3VjaGVuZCcsJyNzd2lwZWJveC1zbGlkZXIgLmN1cnJlbnQgaW1nJywgZnVuY3Rpb24oZSl7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSlcblx0XHQub24oJ2NsaWNrIHRvdWNoZW5kJywnI3N3aXBlYm94LXNsaWRlciAuY3VycmVudCcsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0alF1ZXJ5KCcjc3dpcGVib3gtY2xvc2UnKS50cmlnZ2VyKCdjbGljaycpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHQvLyBMaWdodGJveCBzdXIgdG91cyBsZXMgbGllbnMgcXVpIGNvbnRpZW5uZW50IGRlcyBpbWFnZXNcblx0alF1ZXJ5KCAnYS5zd2lwZWJveCwgYVtocmVmJD1cIi5naWZcIl0sIGFbaHJlZiQ9XCIuanBnXCJdLCBhW2hyZWYkPVwiLnBuZ1wiXSwgYVtocmVmJD1cIi5qcGVnXCJdJyApLnN3aXBlYm94KHsgc2VsZWN0b3I6ICdhLnN3aXBlYm94LCBhW2hyZWYkPVwiLmdpZlwiXSwgYVtocmVmJD1cIi5qcGdcIl0sIGFbaHJlZiQ9XCIucG5nXCJdLCBhW2hyZWYkPVwiLmpwZWdcIl0nIH0pO1xuXG59KTsgLy8gRU5EICh3aW5kb3cpLm9uKCdsb2FkJylcblxuXG5qUXVlcnkoZG9jdW1lbnQpLmtleWRvd24oZnVuY3Rpb24oZSkge1xuXHQvLyBFU0NBUEUga2V5IHByZXNzZWRcblx0aWYgKGUua2V5Q29kZSA9PSAyNykge1xuXHRcdGpRdWVyeSgnLnBvcHVwLm9wZW4sIC5zZWFyY2gtYmFybG9vbS5vcGVuLCAub2ZmLWNhbnZhcy5pcy1vcGVuICNpY29idXJnZXInKS5mb3VuZGF0aW9uKCd0b2dnbGUnKTtcblx0fVxufSk7XG5cblxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG5cdC8vIEFqb3V0IGZvY3VzIHJlY2hlcmNoZVxuXHRqUXVlcnkoJy5idG4tZm9jdXNpbnB1dCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRqUXVlcnkoJy5mb2N1c2lucHV0JykuZm9jdXMoKTtcblx0fSk7XG5cdC8qY29uc29sZS5sb2coJ3JlaW5pdCBpbnRlcmNoYW5nZScpO1xuXHRGb3VuZGF0aW9uLnJlSW5pdChqUXVlcnkoJ1tkYXRhLWludGVyY2hhbmdlXScpKTsqL1xuXG59KTtcblxuLypcbmpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcblx0Y29uc29sZS5sb2coJ3JlaW5pdCBxc2Rxc2RxcycpO1xuXHRGb3VuZGF0aW9uLnJlSW5pdChqUXVlcnkoJ1tkYXRhLWludGVyY2hhbmdlXScpKTtcbn0pO1xuKi8iLCIvL0FPUyBpbml0XG5BT1MuaW5pdCgpOyIsImpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuXG5cdGpRdWVyeSgnLmltZ3NsaWRlci1zaW1wbGUnKS5lYWNoKGZ1bmN0aW9uIChpLCBqKSB7XG5cdFx0alF1ZXJ5KGopLnNsaWNrKHtcblx0XHRcdGluZmluaXRlOiB0cnVlLFxuXHRcdFx0YXJyb3dzOiB0cnVlLFxuXHRcdFx0ZG90czogZmFsc2UsXG5cdFx0XHRwYXVzZU9uSG92ZXI6IGZhbHNlLFxuXHRcdFx0c3BlZWQ6IDgwMCxcblx0XHRcdGZhZGU6IHRydWUsXG5cdFx0XHRhdXRvcGxheTogdHJ1ZSxcblx0XHRcdGF1dG9wbGF5U3BlZWQ6IDg0MDAsXG5cdFx0XHRzbGlkZXNUb1Nob3c6IDEsXG5cdFx0XHRzbGlkZXNUb1Njcm9sbDogMSxcblx0XHRcdGNzc0Vhc2U6ICdsaW5lYXInXG5cdFx0fSk7XG5cdH0pO1xuXG5cdGpRdWVyeSgnLnBhcnRuZXJzbGlkZXInKS5lYWNoKGZ1bmN0aW9uIChpLCBqKSB7XG5cdFx0alF1ZXJ5KGopLnNsaWNrKHtcblx0XHRcdHNwZWVkOiAxMDAwLFxuXHRcdFx0YXJyb3dzOlx0dHJ1ZSxcblx0XHRcdGF1dG9wbGF5OiB0cnVlLFxuXHRcdFx0YXV0b3BsYXlTcGVlZDogMzAwMCxcblx0XHRcdGNlbnRlck1vZGU6IGZhbHNlLFxuXHRcdFx0c2xpZGVzVG9TaG93OiA3LFxuXHRcdFx0c2xpZGVzVG9TY3JvbGw6IDEsXG5cdFx0XHRyZXNwb25zaXZlOiBbXG5cdFx0XHRcdHsgYnJlYWtwb2ludDogMTcwMCwgc2V0dGluZ3M6IHsgc2xpZGVzVG9TaG93OiA3IH0gfSxcblx0XHRcdFx0eyBicmVha3BvaW50OiAxMjgwLCBzZXR0aW5nczogeyBzbGlkZXNUb1Nob3c6IDUgfSB9LFxuXHRcdFx0XHR7IGJyZWFrcG9pbnQ6IDc2Nywgc2V0dGluZ3M6IHsgc2xpZGVzVG9TaG93OiAyIH0gfSxcblx0XHRcdFx0eyBicmVha3BvaW50OiA1NTAsIHNldHRpbmdzOiB7IHNsaWRlc1RvU2hvdzogMSB9IH1cblx0XHRcdF1cblx0XHR9KTtcblx0fSk7XG5cblx0Ly8gU2xpZGVyIDogTcOqbWUgaGF1dGV1ciBwb3VyIHRvdXRlcyBsZXMgc2xpZGVzXG5cdGpRdWVyeSgnLnNsaWNrLWVxdWFsaXplcicpLmVhY2goZnVuY3Rpb24gKGksIGopIHtcblx0XHRqUXVlcnkoaikub24oJ3NldFBvc2l0aW9uJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0alF1ZXJ5KHRoaXMpLmZpbmQoJy5zbGljay1jb250ZW50JykuaGVpZ2h0KCdhdXRvJyk7XG5cdFx0XHR2YXIgc2xpY2tUcmFjayA9IGpRdWVyeSh0aGlzKS5maW5kKCcuc2xpY2stdHJhY2snKTtcblx0XHRcdHZhciBzbGlja1RyYWNrSGVpZ2h0ID0galF1ZXJ5KHNsaWNrVHJhY2spLmhlaWdodCgpO1xuXHRcdFx0alF1ZXJ5KHRoaXMpLmZpbmQoJy5zbGljay1jb250ZW50JykuY3NzKCdoZWlnaHQnLCBzbGlja1RyYWNrSGVpZ2h0ICsgJ3B4Jyk7XG5cdFx0fSk7XG5cdH0pO1xuXG5cblx0Ly8gU2xpZGVyIGNoaWZmcmVzXG5cdGpRdWVyeSgnLnNsaWRlci1nYWxlcmllJykuZWFjaChmdW5jdGlvbiAoaSwgaikge1xuXHRcdGpRdWVyeShqKS5zbGljayh7XG5cdFx0XHRpbmZpbml0ZTogdHJ1ZSxcblx0XHRcdGFycm93czogdHJ1ZSxcblx0XHRcdGRvdHM6IGZhbHNlLFxuXHRcdFx0cGF1c2VPbkhvdmVyOiBmYWxzZSxcblx0XHRcdHNwZWVkOiA1MDAsXG5cdFx0XHRhdXRvcGxheTogZmFsc2UsXG5cdFx0XHRhdXRvcGxheVNwZWVkOiA0NTAwLFxuXHRcdFx0c2xpZGVzVG9TaG93OiA0LFxuXHRcdFx0c2xpZGVzVG9TY3JvbGw6IDEsXG5cdFx0XHQvLyBhcHBlbmRBcnJvd3M6ICQoJy5zbGlkZXItZ2FsZXJpZS1jb250cm9sLScrKGkrMSkpLFxuXHRcdFx0Y3NzRWFzZTogJ2N1YmljLWJlemllcigwLjcsIDAsIDAuMywgMSknLFxuXHRcdFx0cmVzcG9uc2l2ZTogW1xuXHRcdFx0XHR7IGJyZWFrcG9pbnQ6IDEwMjQsIHNldHRpbmdzOiB7IHNsaWRlc1RvU2hvdzogMyB9IH0sXG5cdFx0XHRcdHsgYnJlYWtwb2ludDogNzY3LCBzZXR0aW5nczogeyBzbGlkZXNUb1Nob3c6IDIgfSB9LFxuXHRcdFx0XHR7IGJyZWFrcG9pbnQ6IDU1MCwgc2V0dGluZ3M6IHsgc2xpZGVzVG9TaG93OiAxIH0gfVxuXHRcdFx0XVxuXHRcdH0pO1xuXHR9KTtcblxufSk7XG4iLCIvKiBBbmltYXRpb24gcmV0b3VyIGNvbnRlbnQgcGFnZSA8YSBocmVmPVwiI1wiPiAqL1xualF1ZXJ5KGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkoJy5iYWNrYm90dG9tJykuY2xpY2soZnVuY3Rpb24oKXtcblx0XHRqUXVlcnkoJ2h0bWwsYm9keScpLmFuaW1hdGUoe3Njcm9sbFRvcDpqUXVlcnkoJyNtYWluJykub2Zmc2V0KCkudG9wLTUwfSk7XG5cdH0pO1xufSk7XG5cbi8vIFNtb290aCBzY3JvbGwgc3VyIGxlcyBsaWVucyBcImFuY3JlXCJcbmpRdWVyeSggJy53aWctY29udGVudCBhW2hyZWZePVwiI1wiXScgKS5hdHRyKCdkYXRhLXNtb290aC1zY3JvbGwnLCAnJyk7XG4iLCJqUXVlcnkod2luZG93KS5iaW5kKCcgbG9hZCByZXNpemUgb3JpZW50YXRpb25DaGFuZ2UgJywgZnVuY3Rpb24gKCkge1xyXG5cdHZhciBmb290ZXIgPSBqUXVlcnkoXCIuZm9vdGVyc2l0ZVwiKTtcclxuXHR2YXIgcG9zID0gZm9vdGVyLnBvc2l0aW9uKCk7XHJcblx0dmFyIGhlaWdodCA9IGpRdWVyeSh3aW5kb3cpLmhlaWdodCgpO1xyXG5cdGhlaWdodCA9IGhlaWdodCAtIHBvcy50b3A7XHJcblx0aGVpZ2h0ID0gaGVpZ2h0IC0gZm9vdGVyLm91dGVySGVpZ2h0KCk7XHJcblxyXG5cdGZ1bmN0aW9uIHN0aWNreUZvb3RlcigpIHtcclxuXHRcdGZvb3Rlci5jc3Moe1xyXG5cdFx0XHQnbWFyZ2luLXRvcCc6IGhlaWdodCArICdweCdcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0aWYgKGhlaWdodCA+IDApIHtcclxuXHRcdHN0aWNreUZvb3RlcigpO1xyXG5cdH1cclxufSk7XHJcbiIsImpRdWVyeSgnLnRpdGxlLXdpdGgtZGVjbycpLmVhY2goZnVuY3Rpb24oaSxqKSB7XG5cdGpRdWVyeShqKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwidGl0bGVkZWNvXCI+PHNwYW4gY2xhc3M9XCJ0aXRsZWRlY28taW5uZXJcIj48L3NwYW4+PC9zcGFuPicpO1xufSk7XG5cblxualF1ZXJ5KCcud2lnLWNvbnRlbnQgPiBoMicpLmVhY2goZnVuY3Rpb24oaSxqKSB7XG5cdGpRdWVyeShqKS5hZGRDbGFzcygndGl0bGUtd2l0aC1kZWNvJyk7XG5cdGpRdWVyeShqKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwidGl0bGVkZWNvXCI+PHNwYW4gY2xhc3M9XCJ0aXRsZWRlY28taW5uZXJcIj48L3NwYW4+PC9zcGFuPicpO1xufSk7XG5cbiIsImpRdWVyeShmdW5jdGlvbigpIHtcblx0alF1ZXJ5KCcuYmFja3RvcCcpLmNsaWNrKGZ1bmN0aW9uKCl7XG5cdFx0alF1ZXJ5KCdodG1sLGJvZHknKS5hbmltYXRlKHtzY3JvbGxUb3A6alF1ZXJ5KCcjZ2xvYmFsJykub2Zmc2V0KCkudG9wfSk7XG5cdH0pO1xufSk7XG4iLCJ2YXIgbm9zcGxhc2ggPSBmYWxzZTtcblxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0alF1ZXJ5KFwiLnNwbGFzaHNjcmVlblwiKS5hZGRDbGFzcyhcImZhZGVvdXRcIik7XG5cdGpRdWVyeShcImJvZHlcIikuYWRkQ2xhc3MoXCJnb1wiKTtcbn0pO1xuXG5qUXVlcnkoXCJhW2hyZWZePSd0ZWw6J10sIGFbaHJlZl49J21haWx0bzonXSwgYnV0dG9uLnNpbmdsZV9hZGRfdG9fY2FydF9idXR0b24sLm5vc3BsYXNoXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRub3NwbGFzaCA9IHRydWU7XG59KTtcblxualF1ZXJ5KHdpbmRvdykub24oJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uKCkge1xuXHRpZighbm9zcGxhc2gpIHtcblx0XHRqUXVlcnkoXCIuc3BsYXNoc2NyZWVuXCIpLnJlbW92ZUNsYXNzKFwiZmFkZW91dFwiKTtcblx0XHRqUXVlcnkoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwiZ29cIik7XG5cdH1cbn0pO1xuXG4vLyBGaXggYmxvY2tlZCBsb2FkZXIgaW4gU2FmYXJpIHdpdGggYmFjayBidXR0b24gbmF2aWdhdG9yXG5qUXVlcnkod2luZG93KS5iaW5kKFwicGFnZXNob3dcIiwgZnVuY3Rpb24oZXZlbnQpIHtcblx0aWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQucGVyc2lzdGVkKSB7XG5cdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHR9XG59KTtcbiIsIi8vIFLDqWN1cMOpcmF0aW9uIGR1IG1lc3NhZ2UgZCdlcnJldXIgb3UgZGUgc3VjY8Ooc1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnd3BjZjdpbnZhbGlkJywgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHdwY2Y3X2ludmFsaWRNc2cgPSBqUXVlcnkoXCIud3BjZjctcmVzcG9uc2Utb3V0cHV0XCIpLnRleHQoKTtcblx0XHRqUXVlcnkoJy53cGNmNy1jdXN0b20tcmVzcG9uc2Utb3V0cHV0JykudGV4dCh3cGNmN19pbnZhbGlkTXNnKTtcblx0fSwxMDAwKTtcbn0sIGZhbHNlICk7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd3cGNmN3NwYW0nLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHR2YXIgd3BjZjdfc3BhbU1zZyA9IGpRdWVyeShcIi53cGNmNy1yZXNwb25zZS1vdXRwdXRcIikudGV4dCgpO1xuXHRcdGpRdWVyeSgnLndwY2Y3LWN1c3RvbS1yZXNwb25zZS1vdXRwdXQnKS50ZXh0KHdwY2Y3X3NwYW1Nc2cpO1xuXHR9LDEwMDApO1xufSwgZmFsc2UgKTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3dwY2Y3bWFpbGZhaWxlZCcsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdHZhciB3cGNmN19tYWlsZmFpbGVkTXNnID0galF1ZXJ5KFwiLndwY2Y3LXJlc3BvbnNlLW91dHB1dFwiKS50ZXh0KCk7XG5cdFx0alF1ZXJ5KCcud3BjZjctY3VzdG9tLXJlc3BvbnNlLW91dHB1dCcpLnRleHQod3BjZjdfbWFpbGZhaWxlZE1zZyk7XG5cdH0sMTAwMCk7XG59LCBmYWxzZSApO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnd3BjZjdtYWlsc2VudCcsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdHZhciB3cGNmN19tYWlsc2VudE1zZyA9IGpRdWVyeShcIi53cGNmNy1yZXNwb25zZS1vdXRwdXRcIikudGV4dCgpO1xuXHRcdGpRdWVyeSgnLndwY2Y3LWN1c3RvbS1yZXNwb25zZS1vdXRwdXQnKS50ZXh0KHdwY2Y3X21haWxzZW50TXNnKTtcblxuXHRcdC8vIG91dnJlIGxlIHBhbm5lYXUgZCdpbmZvcm1hdGlvbnMgbG9ycyBkZSBsJ2luc2NyaXB0aW9uIMOgIGxhIG5ld3NsZXR0ZXJcblx0XHRqUXVlcnkoJyNubG1zZ29rJykuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcblx0fSwxMDAwKTtcblxufSwgZmFsc2UgKTtcbiIsImpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuXG5cdGpRdWVyeSgnLmZlZWRzbGlkZXInKS5lYWNoKGZ1bmN0aW9uIChpLCBqKSB7XG5cdFx0alF1ZXJ5KGopLnNsaWNrKHtcblx0XHRcdHNwZWVkOiA0NDQsXG5cdFx0XHRhcnJvd3M6XHR0cnVlLFxuXHRcdFx0YXV0b3BsYXk6IHRydWUsXG5cdFx0XHRhdXRvcGxheVNwZWVkOiAzMjAwLFxuXHRcdFx0Y2VudGVyTW9kZTogZmFsc2UsXG5cdFx0XHRzbGlkZXNUb1Nob3c6IDMsXG5cdFx0XHRzbGlkZXNUb1Njcm9sbDogMSxcblx0XHRcdHJlc3BvbnNpdmU6IFtcblx0XHRcdFx0eyBicmVha3BvaW50OiAxMjgwLCBzZXR0aW5nczogeyBzbGlkZXNUb1Nob3c6IDMgfSB9LFxuXHRcdFx0XHR7IGJyZWFrcG9pbnQ6IDc2Nywgc2V0dGluZ3M6IHsgc2xpZGVzVG9TaG93OiAyIH0gfSxcblx0XHRcdFx0eyBicmVha3BvaW50OiA1NTAsIHNldHRpbmdzOiB7IHNsaWRlc1RvU2hvdzogMSB9IH1cblx0XHRcdF1cblx0XHR9KTtcblx0fSk7XG5cdFxufSk7IC8vIEVORCAoZG9jdW1lbnQpLnJlYWR5Il19
